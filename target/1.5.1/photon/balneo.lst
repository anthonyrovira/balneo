
c:/Users/user/Documents/Particle/projects/balneo/target/1.5.1/photon/balneo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005a30  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5a50  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a5a54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006cc  20000080  20000080  00040080  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a5ad0  080a5ad0  00035ad0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5af8  080a5af8  00035af8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f0a7e  00000000  00000000  00035afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014aa5  00000000  00000000  0012657a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d1e9  00000000  00000000  0013b01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024e8  00000000  00000000  00158208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004010  00000000  00000000  0015a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d4bb  00000000  00000000  0015e700  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031345  00000000  00000000  0018bbbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1f3a  00000000  00000000  001bcf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ced8  00000000  00000000  0026ee3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 fd47 	bl	80a4ac4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 fd4c 	bl	80a4ada <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5a54 	.word	0x080a5a54
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000080 	.word	0x20000080
 80a0058:	2000074c 	.word	0x2000074c
 80a005c:	2000074c 	.word	0x2000074c

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fe53 	bl	80a2d0c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a5a00 	.word	0x080a5a00
 80a0088:	080a5a48 	.word	0x080a5a48

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b9d4 	b.w	80a0438 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fad5 	bl	80a0640 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bdf9 	b.w	80a2c90 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f002 bb05 	b.w	80a26ac <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f002 bb0b 	b.w	80a26bc <free>
	...

080a00a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a03      	ldr	r2, [pc, #12]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00ac:	2100      	movs	r1, #0
 80a00ae:	200c      	movs	r0, #12
 80a00b0:	f002 fa40 	bl	80a2534 <panic_>
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a22e1 	.word	0x080a22e1

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN21MHZ19BCO2SensorSerialI11USARTSerialED1Ev>:
   */
  MHZ19BCO2SensorSerial(MHZ19UARTSerial& serial) : m_serial(serial) {
    m_serial.template begin(9600,SERIAL_8N1);
  }

  ~MHZ19BCO2SensorSerial() {
 80a00cc:	b510      	push	{r4, lr}
 80a00ce:	4604      	mov	r4, r0
    m_serial.template end();
 80a00d0:	6800      	ldr	r0, [r0, #0]
 80a00d2:	f003 fb1b 	bl	80a370c <_ZN11USARTSerial3endEv>
  }
 80a00d6:	4620      	mov	r0, r4
 80a00d8:	bd10      	pop	{r4, pc}

080a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a00da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a00dc:	4605      	mov	r5, r0
 80a00de:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a00e2:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00e4:	f88d 3000 	strb.w	r3, [sp]
 80a00e8:	233c      	movs	r3, #60	; 0x3c
 80a00ea:	f002 ff7d 	bl	80a2fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80a00ee:	4628      	mov	r0, r5
 80a00f0:	b003      	add	sp, #12
 80a00f2:	bd30      	pop	{r4, r5, pc}

080a00f4 <_Z7arrondif>:
    fadingLed(HIGH, LOW, HIGH);
  }
}

double arrondi(float data)
{
 80a00f4:	b508      	push	{r3, lr}
  return (double)((int)(data * pow(10, 2) + .5)) / pow(10, 2);
 80a00f6:	f004 f82d 	bl	80a4154 <__aeabi_f2d>
 80a00fa:	2200      	movs	r2, #0
 80a00fc:	4b07      	ldr	r3, [pc, #28]	; (80a011c <_Z7arrondif+0x28>)
 80a00fe:	f004 f87d 	bl	80a41fc <__aeabi_dmul>
 80a0102:	2200      	movs	r2, #0
 80a0104:	4b06      	ldr	r3, [pc, #24]	; (80a0120 <_Z7arrondif+0x2c>)
 80a0106:	f003 fec7 	bl	80a3e98 <__adddf3>
 80a010a:	f004 fb27 	bl	80a475c <__aeabi_d2iz>
 80a010e:	f004 f80f 	bl	80a4130 <__aeabi_i2d>
 80a0112:	2200      	movs	r2, #0
 80a0114:	4b01      	ldr	r3, [pc, #4]	; (80a011c <_Z7arrondif+0x28>)
 80a0116:	f004 f99b 	bl	80a4450 <__aeabi_ddiv>
}
 80a011a:	bd08      	pop	{r3, pc}
 80a011c:	40590000 	.word	0x40590000
 80a0120:	3fe00000 	.word	0x3fe00000

080a0124 <_Z14getTemperaturev>:

double getTemperature()
{
 80a0124:	b538      	push	{r3, r4, r5, lr}
  // Get Temperature
  float readings = dht.readTemperature();
 80a0126:	4809      	ldr	r0, [pc, #36]	; (80a014c <_Z14getTemperaturev+0x28>)
 80a0128:	f002 f83c 	bl	80a21a4 <_ZN14PietteTech_DHT15readTemperatureEv>
  double result = arrondi(readings);
 80a012c:	f7ff ffe2 	bl	80a00f4 <_Z7arrondif>
  if (isnan(result))
 80a0130:	4602      	mov	r2, r0
 80a0132:	460b      	mov	r3, r1

double getTemperature()
{
  // Get Temperature
  float readings = dht.readTemperature();
  double result = arrondi(readings);
 80a0134:	4604      	mov	r4, r0
 80a0136:	460d      	mov	r5, r1
  if (isnan(result))
 80a0138:	f004 fafa 	bl	80a4730 <__aeabi_dcmpun>
 80a013c:	b910      	cbnz	r0, 80a0144 <_Z14getTemperaturev+0x20>
  {
    return -1;
  }
  else
  {
    return result;
 80a013e:	4620      	mov	r0, r4
 80a0140:	4629      	mov	r1, r5
 80a0142:	bd38      	pop	{r3, r4, r5, pc}
  // Get Temperature
  float readings = dht.readTemperature();
  double result = arrondi(readings);
  if (isnan(result))
  {
    return -1;
 80a0144:	2000      	movs	r0, #0
 80a0146:	4902      	ldr	r1, [pc, #8]	; (80a0150 <_Z14getTemperaturev+0x2c>)
  }
  else
  {
    return result;
  }
}
 80a0148:	bd38      	pop	{r3, r4, r5, pc}
 80a014a:	bf00      	nop
 80a014c:	20000108 	.word	0x20000108
 80a0150:	bff00000 	.word	0xbff00000

080a0154 <_Z11getHumidityv>:

double getHumidity()
{
 80a0154:	b538      	push	{r3, r4, r5, lr}
  // Get Humidity
  float readings = dht.readHumidity();
 80a0156:	4809      	ldr	r0, [pc, #36]	; (80a017c <_Z11getHumidityv+0x28>)
 80a0158:	f002 f82e 	bl	80a21b8 <_ZN14PietteTech_DHT12readHumidityEv>
  double result = arrondi(readings);
 80a015c:	f7ff ffca 	bl	80a00f4 <_Z7arrondif>
  if (isnan(result))
 80a0160:	4602      	mov	r2, r0
 80a0162:	460b      	mov	r3, r1

double getHumidity()
{
  // Get Humidity
  float readings = dht.readHumidity();
  double result = arrondi(readings);
 80a0164:	4604      	mov	r4, r0
 80a0166:	460d      	mov	r5, r1
  if (isnan(result))
 80a0168:	f004 fae2 	bl	80a4730 <__aeabi_dcmpun>
 80a016c:	b910      	cbnz	r0, 80a0174 <_Z11getHumidityv+0x20>
  {
    return -1;
  }
  else
  {
    return result;
 80a016e:	4620      	mov	r0, r4
 80a0170:	4629      	mov	r1, r5
 80a0172:	bd38      	pop	{r3, r4, r5, pc}
  // Get Humidity
  float readings = dht.readHumidity();
  double result = arrondi(readings);
  if (isnan(result))
  {
    return -1;
 80a0174:	2000      	movs	r0, #0
 80a0176:	4902      	ldr	r1, [pc, #8]	; (80a0180 <_Z11getHumidityv+0x2c>)
  }
  else
  {
    return result;
  }
}
 80a0178:	bd38      	pop	{r3, r4, r5, pc}
 80a017a:	bf00      	nop
 80a017c:	20000108 	.word	0x20000108
 80a0180:	bff00000 	.word	0xbff00000

080a0184 <_Z12blinkLedTestv>:
  int readings = mhz19b.Read();
  return readings;
}

void blinkLedTest()
{
 80a0184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int ledState = LOW;
  int coutdown = 20;
  int prevMillis = 0;
 80a0186:	2400      	movs	r4, #0
  return readings;
}

void blinkLedTest()
{
  int ledState = LOW;
 80a0188:	4626      	mov	r6, r4
  int coutdown = 20;
 80a018a:	2514      	movs	r5, #20
  int prevMillis = 0;
  while (coutdown != 0)
 80a018c:	b1c5      	cbz	r5, 80a01c0 <_Z12blinkLedTestv+0x3c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a018e:	f002 f8b7 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
  {
    int curMillis = millis();
    if (curMillis - prevMillis >= 500)
 80a0192:	1b03      	subs	r3, r0, r4
 80a0194:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0198:	4607      	mov	r7, r0
 80a019a:	dbf7      	blt.n	80a018c <_Z12blinkLedTestv+0x8>
 80a019c:	f086 0601 	eor.w	r6, r6, #1
      }
      else
      {
        ledState = LOW;
      }
      digitalWrite(redpin, ledState);
 80a01a0:	b2f4      	uxtb	r4, r6
 80a01a2:	4621      	mov	r1, r4
 80a01a4:	2002      	movs	r0, #2
 80a01a6:	f003 fc5a 	bl	80a3a5e <digitalWrite>
      digitalWrite(greenpin, ledState);
 80a01aa:	4621      	mov	r1, r4
 80a01ac:	2005      	movs	r0, #5
 80a01ae:	f003 fc56 	bl	80a3a5e <digitalWrite>
      digitalWrite(bluepin, ledState);
 80a01b2:	4621      	mov	r1, r4
 80a01b4:	2004      	movs	r0, #4
 80a01b6:	f003 fc52 	bl	80a3a5e <digitalWrite>
      coutdown--;
 80a01ba:	3d01      	subs	r5, #1
  int ledState = LOW;
  int coutdown = 20;
  int prevMillis = 0;
  while (coutdown != 0)
  {
    int curMillis = millis();
 80a01bc:	463c      	mov	r4, r7
 80a01be:	e7e5      	b.n	80a018c <_Z12blinkLedTestv+0x8>
 80a01c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a01c4 <_Z11displayTempf>:
    }
  }
}

void displayTemp(float temp)
{
 80a01c4:	b570      	push	{r4, r5, r6, lr}
 80a01c6:	4606      	mov	r6, r0
  int currentTime = 0;
  int prevTime;
  int tensecs = 10000;
  display.clearDisplay();
 80a01c8:	4c17      	ldr	r4, [pc, #92]	; (80a0228 <_Z11displayTempf+0x64>)
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 80a01ca:	2500      	movs	r5, #0
 80a01cc:	4620      	mov	r0, r4
 80a01ce:	f001 fa9e 	bl	80a170e <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.setTextSize(1);
 80a01d2:	4620      	mov	r0, r4
 80a01d4:	2101      	movs	r1, #1
 80a01d6:	f001 f8cf 	bl	80a1378 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a01da:	2301      	movs	r3, #1
 80a01dc:	82e3      	strh	r3, [r4, #22]
 80a01de:	82a3      	strh	r3, [r4, #20]
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 80a01e0:	8225      	strh	r5, [r4, #16]
 80a01e2:	8265      	strh	r5, [r4, #18]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(F("Temperature : "));
 80a01e4:	4911      	ldr	r1, [pc, #68]	; (80a022c <_Z11displayTempf+0x68>)
 80a01e6:	4620      	mov	r0, r4
 80a01e8:	f002 fbad 	bl	80a2946 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setTextSize(3);
 80a01ec:	4620      	mov	r0, r4
 80a01ee:	2103      	movs	r1, #3
 80a01f0:	f001 f8c2 	bl	80a1378 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.print(temp);
 80a01f4:	2202      	movs	r2, #2
 80a01f6:	4631      	mov	r1, r6
 80a01f8:	4620      	mov	r0, r4
 80a01fa:	f002 fc7f 	bl	80a2afc <_ZN5Print5printEfi>
  display.println(F(" C"));
 80a01fe:	490c      	ldr	r1, [pc, #48]	; (80a0230 <_Z11displayTempf+0x6c>)
 80a0200:	4620      	mov	r0, r4
 80a0202:	f002 fba0 	bl	80a2946 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.display();
 80a0206:	4620      	mov	r0, r4
 80a0208:	f001 fcfe 	bl	80a1c08 <_ZN16Adafruit_SSD13067displayEv>
 80a020c:	f002 f878 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a0210:	4604      	mov	r4, r0
  }
}

void displayTemp(float temp)
{
  int currentTime = 0;
 80a0212:	4628      	mov	r0, r5
  display.setTextSize(3);
  display.print(temp);
  display.println(F(" C"));
  display.display();
  prevTime = millis();
  while (currentTime - prevTime < tensecs)
 80a0214:	f242 750f 	movw	r5, #9999	; 0x270f
 80a0218:	1b00      	subs	r0, r0, r4
 80a021a:	42a8      	cmp	r0, r5
 80a021c:	dc02      	bgt.n	80a0224 <_Z11displayTempf+0x60>
 80a021e:	f002 f86f 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a0222:	e7f9      	b.n	80a0218 <_Z11displayTempf+0x54>
 80a0224:	bd70      	pop	{r4, r5, r6, pc}
 80a0226:	bf00      	nop
 80a0228:	20000090 	.word	0x20000090
 80a022c:	080a4ba1 	.word	0x080a4ba1
 80a0230:	080a4bb0 	.word	0x080a4bb0

080a0234 <_Z10displayCo2i>:
    currentTime = millis();
  }
}

void displayCo2(int ppm)
{
 80a0234:	b538      	push	{r3, r4, r5, lr}
 80a0236:	4605      	mov	r5, r0
  int currentTime = 0;
  int prevTime;
  int tensecs = 10000;
  display.clearDisplay();
 80a0238:	4c1b      	ldr	r4, [pc, #108]	; (80a02a8 <_Z10displayCo2i+0x74>)
 80a023a:	4620      	mov	r0, r4
 80a023c:	f001 fa67 	bl	80a170e <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.setTextSize(1);
 80a0240:	2101      	movs	r1, #1
 80a0242:	4620      	mov	r0, r4
 80a0244:	f001 f898 	bl	80a1378 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a0248:	2301      	movs	r3, #1
 80a024a:	82e3      	strh	r3, [r4, #22]
 80a024c:	82a3      	strh	r3, [r4, #20]
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 80a024e:	2300      	movs	r3, #0
 80a0250:	8223      	strh	r3, [r4, #16]
 80a0252:	8263      	strh	r3, [r4, #18]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(F("CO2 : "));
 80a0254:	4915      	ldr	r1, [pc, #84]	; (80a02ac <_Z10displayCo2i+0x78>)
 80a0256:	4620      	mov	r0, r4
 80a0258:	f002 fb75 	bl	80a2946 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setTextSize(3);
 80a025c:	2103      	movs	r1, #3
 80a025e:	4620      	mov	r0, r4
 80a0260:	f001 f88a 	bl	80a1378 <_ZN12Adafruit_GFX11setTextSizeEh>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a0264:	2d00      	cmp	r5, #0
 80a0266:	da05      	bge.n	80a0274 <_Z10displayCo2i+0x40>
            t = print('-');
 80a0268:	212d      	movs	r1, #45	; 0x2d
 80a026a:	4620      	mov	r0, r4
 80a026c:	f002 fb52 	bl	80a2914 <_ZN5Print5printEc>
            val = -n;
 80a0270:	4269      	negs	r1, r5
 80a0272:	e000      	b.n	80a0276 <_Z10displayCo2i+0x42>
        } else {
            val = n;
 80a0274:	4629      	mov	r1, r5
        }
        return printNumber(val, base) + t;
 80a0276:	220a      	movs	r2, #10
 80a0278:	480b      	ldr	r0, [pc, #44]	; (80a02a8 <_Z10displayCo2i+0x74>)
 80a027a:	f002 fb66 	bl	80a294a <_ZN5Print11printNumberEmh>
  display.print(ppm);
  display.println(F("ppm"));
 80a027e:	490c      	ldr	r1, [pc, #48]	; (80a02b0 <_Z10displayCo2i+0x7c>)
 80a0280:	4809      	ldr	r0, [pc, #36]	; (80a02a8 <_Z10displayCo2i+0x74>)
 80a0282:	f002 fb60 	bl	80a2946 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.display();
 80a0286:	4808      	ldr	r0, [pc, #32]	; (80a02a8 <_Z10displayCo2i+0x74>)
 80a0288:	f001 fcbe 	bl	80a1c08 <_ZN16Adafruit_SSD13067displayEv>
 80a028c:	f002 f838 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
  prevTime = millis();
  while (currentTime - prevTime < tensecs)
 80a0290:	f242 750f 	movw	r5, #9999	; 0x270f
 80a0294:	4604      	mov	r4, r0
  }
}

void displayCo2(int ppm)
{
  int currentTime = 0;
 80a0296:	2000      	movs	r0, #0
  display.setTextSize(3);
  display.print(ppm);
  display.println(F("ppm"));
  display.display();
  prevTime = millis();
  while (currentTime - prevTime < tensecs)
 80a0298:	1b00      	subs	r0, r0, r4
 80a029a:	42a8      	cmp	r0, r5
 80a029c:	dc02      	bgt.n	80a02a4 <_Z10displayCo2i+0x70>
 80a029e:	f002 f82f 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a02a2:	e7f9      	b.n	80a0298 <_Z10displayCo2i+0x64>
 80a02a4:	bd38      	pop	{r3, r4, r5, pc}
 80a02a6:	bf00      	nop
 80a02a8:	20000090 	.word	0x20000090
 80a02ac:	080a4bb3 	.word	0x080a4bb3
 80a02b0:	080a4bba 	.word	0x080a4bba

080a02b4 <_Z9fadingLediii>:
    currentTime = millis();
  }
}

void fadingLed(int Led1, int Led2, int Led3)
{
 80a02b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int i;
  int i1;
  int i2;
  int i3;
  int currentTime = 0;
 80a02b8:	2700      	movs	r7, #0
    currentTime = millis();
  }
}

void fadingLed(int Led1, int Led2, int Led3)
{
 80a02ba:	4680      	mov	r8, r0
 80a02bc:	460d      	mov	r5, r1
 80a02be:	4616      	mov	r6, r2
  int i3;
  int currentTime = 0;
  int prevTime;
  int twentymillis = 20;

  for (i = 0; i < 255; i += 5)
 80a02c0:	463c      	mov	r4, r7
  {
    if (Led1 == HIGH)
 80a02c2:	f1b8 0f01 	cmp.w	r8, #1
 80a02c6:	d104      	bne.n	80a02d2 <_Z9fadingLediii+0x1e>
    {
      i1 = i;
      analogWrite(redpin, i1);
 80a02c8:	4621      	mov	r1, r4
 80a02ca:	2002      	movs	r0, #2
 80a02cc:	f003 fbf3 	bl	80a3ab6 <_Z11analogWritetm>
 80a02d0:	e003      	b.n	80a02da <_Z9fadingLediii+0x26>
    }
    else
    {
      digitalWrite(redpin, LOW);
 80a02d2:	2100      	movs	r1, #0
 80a02d4:	2002      	movs	r0, #2
 80a02d6:	f003 fbc2 	bl	80a3a5e <digitalWrite>
    }
    if (Led2 == HIGH)
 80a02da:	2d01      	cmp	r5, #1
    {
      digitalWrite(bluepin, HIGH);
 80a02dc:	bf0c      	ite	eq
 80a02de:	4629      	moveq	r1, r5
    }
    else
    {
      digitalWrite(bluepin, LOW);
 80a02e0:	2100      	movne	r1, #0
 80a02e2:	2004      	movs	r0, #4
 80a02e4:	f003 fbbb 	bl	80a3a5e <digitalWrite>
    }
    if (Led3 == HIGH)
 80a02e8:	2e01      	cmp	r6, #1
    {
      digitalWrite(greenpin, HIGH);
 80a02ea:	bf0c      	ite	eq
 80a02ec:	4631      	moveq	r1, r6
    }
    else
    {
      digitalWrite(greenpin, LOW);
 80a02ee:	2100      	movne	r1, #0
 80a02f0:	2005      	movs	r0, #5
 80a02f2:	f003 fbb4 	bl	80a3a5e <digitalWrite>
 80a02f6:	f002 f803 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a02fa:	4681      	mov	r9, r0
    }
    prevTime = millis();
    while (currentTime - prevTime < twentymillis)
 80a02fc:	ebc9 0307 	rsb	r3, r9, r7
 80a0300:	2b13      	cmp	r3, #19
 80a0302:	dc03      	bgt.n	80a030c <_Z9fadingLediii+0x58>
 80a0304:	f001 fffc 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a0308:	4607      	mov	r7, r0
 80a030a:	e7f7      	b.n	80a02fc <_Z9fadingLediii+0x48>
  int i3;
  int currentTime = 0;
  int prevTime;
  int twentymillis = 20;

  for (i = 0; i < 255; i += 5)
 80a030c:	3405      	adds	r4, #5
 80a030e:	2cff      	cmp	r4, #255	; 0xff
 80a0310:	d1d7      	bne.n	80a02c2 <_Z9fadingLediii+0xe>
 80a0312:	2700      	movs	r7, #0
    }
  }
  currentTime = 0;
  for (i = 255; i > 0; i -= 5)
  {
    if (Led1 == HIGH)
 80a0314:	f1b8 0f01 	cmp.w	r8, #1
 80a0318:	d104      	bne.n	80a0324 <_Z9fadingLediii+0x70>
    {
      i1 = i;
      analogWrite(redpin, i1);
 80a031a:	4621      	mov	r1, r4
 80a031c:	2002      	movs	r0, #2
 80a031e:	f003 fbca 	bl	80a3ab6 <_Z11analogWritetm>
 80a0322:	e003      	b.n	80a032c <_Z9fadingLediii+0x78>
    }
    else
    {
      digitalWrite(redpin, LOW);
 80a0324:	2100      	movs	r1, #0
 80a0326:	2002      	movs	r0, #2
 80a0328:	f003 fb99 	bl	80a3a5e <digitalWrite>
    }
    if (Led2 == HIGH)
 80a032c:	2d01      	cmp	r5, #1
    {
      digitalWrite(bluepin, HIGH);
 80a032e:	bf0c      	ite	eq
 80a0330:	4629      	moveq	r1, r5
    }
    else
    {
      digitalWrite(bluepin, LOW);
 80a0332:	2100      	movne	r1, #0
 80a0334:	2004      	movs	r0, #4
 80a0336:	f003 fb92 	bl	80a3a5e <digitalWrite>
    }
    if (Led3 == HIGH)
 80a033a:	2e01      	cmp	r6, #1
    {
      digitalWrite(greenpin, HIGH);
 80a033c:	bf0c      	ite	eq
 80a033e:	4631      	moveq	r1, r6
    }
    else
    {
      digitalWrite(greenpin, LOW);
 80a0340:	2100      	movne	r1, #0
 80a0342:	2005      	movs	r0, #5
 80a0344:	f003 fb8b 	bl	80a3a5e <digitalWrite>
 80a0348:	f001 ffda 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a034c:	4681      	mov	r9, r0
    }
    prevTime = millis();
    while (currentTime - prevTime < twentymillis)
 80a034e:	ebc9 0307 	rsb	r3, r9, r7
 80a0352:	2b13      	cmp	r3, #19
 80a0354:	dc03      	bgt.n	80a035e <_Z9fadingLediii+0xaa>
 80a0356:	f001 ffd3 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a035a:	4607      	mov	r7, r0
 80a035c:	e7f7      	b.n	80a034e <_Z9fadingLediii+0x9a>
    {
      currentTime = millis();
    }
  }
  currentTime = 0;
  for (i = 255; i > 0; i -= 5)
 80a035e:	3c05      	subs	r4, #5
 80a0360:	d1d8      	bne.n	80a0314 <_Z9fadingLediii+0x60>
    while (currentTime - prevTime < twentymillis)
    {
      currentTime = millis();
    }
  }
}
 80a0362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0366:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0368:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a036a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a036c:	b17c      	cbz	r4, 80a038e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a036e:	6863      	ldr	r3, [r4, #4]
 80a0370:	3b01      	subs	r3, #1
 80a0372:	6063      	str	r3, [r4, #4]
 80a0374:	b95b      	cbnz	r3, 80a038e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0376:	6823      	ldr	r3, [r4, #0]
 80a0378:	4620      	mov	r0, r4
 80a037a:	689b      	ldr	r3, [r3, #8]
 80a037c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a037e:	68a3      	ldr	r3, [r4, #8]
 80a0380:	3b01      	subs	r3, #1
 80a0382:	60a3      	str	r3, [r4, #8]
 80a0384:	b91b      	cbnz	r3, 80a038e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0386:	6823      	ldr	r3, [r4, #0]
 80a0388:	4620      	mov	r0, r4
 80a038a:	68db      	ldr	r3, [r3, #12]
 80a038c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a038e:	4628      	mov	r0, r5
 80a0390:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0394 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv>:
  /**
   * Reads the current CO2 level from the sensor.
   *
   * Returns -1 if either a timeout or checksum didn't match.
   */
  int Read() {
 80a0394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0398:	b08d      	sub	sp, #52	; 0x34
 80a039a:	4607      	mov	r7, r0
 80a039c:	f001 ffb0 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
    unsigned long startTime = millis();

    int reading = -1;
    const uint8_t CMD86[9] = {0xFF,0x01,0x86,0,0,0,0,0,0x79};
 80a03a0:	466b      	mov	r3, sp
 80a03a2:	4a20      	ldr	r2, [pc, #128]	; (80a0424 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x90>)
 80a03a4:	4680      	mov	r8, r0
 80a03a6:	6851      	ldr	r1, [r2, #4]
 80a03a8:	6810      	ldr	r0, [r2, #0]
 80a03aa:	7a12      	ldrb	r2, [r2, #8]
 80a03ac:	c303      	stmia	r3!, {r0, r1}
    uint8_t checksum = 0;
    int recieved[9] = {0};
 80a03ae:	f10d 090c 	add.w	r9, sp, #12
   */
  int Read() {
    unsigned long startTime = millis();

    int reading = -1;
    const uint8_t CMD86[9] = {0xFF,0x01,0x86,0,0,0,0,0,0x79};
 80a03b2:	701a      	strb	r2, [r3, #0]
    uint8_t checksum = 0;
    int recieved[9] = {0};
 80a03b4:	2100      	movs	r1, #0
 80a03b6:	2224      	movs	r2, #36	; 0x24
 80a03b8:	4648      	mov	r0, r9
 80a03ba:	f004 fb8e 	bl	80a4ada <memset>
    int recieved_bytes = 0;

    m_serial.template write(CMD86, 9);
 80a03be:	6838      	ldr	r0, [r7, #0]
 80a03c0:	2209      	movs	r2, #9
 80a03c2:	6803      	ldr	r3, [r0, #0]
 80a03c4:	4669      	mov	r1, sp
 80a03c6:	68db      	ldr	r3, [r3, #12]

    int reading = -1;
    const uint8_t CMD86[9] = {0xFF,0x01,0x86,0,0,0,0,0,0x79};
    uint8_t checksum = 0;
    int recieved[9] = {0};
    int recieved_bytes = 0;
 80a03c8:	2500      	movs	r5, #0

    m_serial.template write(CMD86, 9);
 80a03ca:	4798      	blx	r3
  int Read() {
    unsigned long startTime = millis();

    int reading = -1;
    const uint8_t CMD86[9] = {0xFF,0x01,0x86,0,0,0,0,0,0x79};
    uint8_t checksum = 0;
 80a03cc:	462c      	mov	r4, r5
   * Returns -1 if either a timeout or checksum didn't match.
   */
  int Read() {
    unsigned long startTime = millis();

    int reading = -1;
 80a03ce:	f04f 36ff 	mov.w	r6, #4294967295
    int recieved[9] = {0};
    int recieved_bytes = 0;

    m_serial.template write(CMD86, 9);

    while ((recieved_bytes < 9) && ((millis() - startTime) < 500)) {
 80a03d2:	2d09      	cmp	r5, #9
 80a03d4:	d022      	beq.n	80a041c <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x88>
 80a03d6:	f001 ff93 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a03da:	ebc8 0000 	rsb	r0, r8, r0
 80a03de:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80a03e2:	d21b      	bcs.n	80a041c <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x88>
      if (m_serial.template available() > 0) {
 80a03e4:	6838      	ldr	r0, [r7, #0]
 80a03e6:	6803      	ldr	r3, [r0, #0]
 80a03e8:	691b      	ldr	r3, [r3, #16]
 80a03ea:	4798      	blx	r3
 80a03ec:	2800      	cmp	r0, #0
 80a03ee:	ddf0      	ble.n	80a03d2 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x3e>
        recieved[recieved_bytes] = m_serial.template read();
 80a03f0:	6838      	ldr	r0, [r7, #0]
 80a03f2:	6803      	ldr	r3, [r0, #0]
 80a03f4:	695b      	ldr	r3, [r3, #20]
 80a03f6:	4798      	blx	r3
        if (recieved_bytes == 8) {
 80a03f8:	2d08      	cmp	r5, #8

    m_serial.template write(CMD86, 9);

    while ((recieved_bytes < 9) && ((millis() - startTime) < 500)) {
      if (m_serial.template available() > 0) {
        recieved[recieved_bytes] = m_serial.template read();
 80a03fa:	f849 0025 	str.w	r0, [r9, r5, lsl #2]
        if (recieved_bytes == 8) {
 80a03fe:	d108      	bne.n	80a0412 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x7e>
          checksum = 0xFF - checksum;
          checksum += 1;
 80a0400:	4264      	negs	r4, r4
 80a0402:	b2e4      	uxtb	r4, r4
          if (checksum == recieved[recieved_bytes]) {
 80a0404:	42a0      	cmp	r0, r4
 80a0406:	d107      	bne.n	80a0418 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x84>
            reading = ((recieved[2]*256) +recieved[3]);
 80a0408:	9b06      	ldr	r3, [sp, #24]
 80a040a:	9e05      	ldr	r6, [sp, #20]
 80a040c:	eb03 2606 	add.w	r6, r3, r6, lsl #8
 80a0410:	e002      	b.n	80a0418 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x84>
          }
        } else if (recieved_bytes > 0){
 80a0412:	b10d      	cbz	r5, 80a0418 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x84>
          checksum += recieved[recieved_bytes];
 80a0414:	4404      	add	r4, r0
 80a0416:	b2e4      	uxtb	r4, r4
        }
        recieved_bytes++;
 80a0418:	3501      	adds	r5, #1
 80a041a:	e7da      	b.n	80a03d2 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv+0x3e>
      }
    }

    return reading;
  }
 80a041c:	4630      	mov	r0, r6
 80a041e:	b00d      	add	sp, #52	; 0x34
 80a0420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0424:	080a4b98 	.word	0x080a4b98

080a0428 <_Z6getCo2v>:
    return result;
  }
}

int getCo2()
{
 80a0428:	b508      	push	{r3, lr}
  //Get CO2
  int readings = mhz19b.Read();
 80a042a:	4802      	ldr	r0, [pc, #8]	; (80a0434 <_Z6getCo2v+0xc>)
 80a042c:	f7ff ffb2 	bl	80a0394 <_ZN21MHZ19BCO2SensorSerialI11USARTSerialE4ReadEv>
  return readings;
}
 80a0430:	bd08      	pop	{r3, pc}
 80a0432:	bf00      	nop
 80a0434:	20000088 	.word	0x20000088

080a0438 <setup>:
unsigned long previousMillis = 0;
unsigned long currentMillis = 0;
unsigned int interval = 30000;

void setup()
{
 80a0438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a043a:	4f2c      	ldr	r7, [pc, #176]	; (80a04ec <setup+0xb4>)
 80a043c:	4e2c      	ldr	r6, [pc, #176]	; (80a04f0 <setup+0xb8>)
 80a043e:	2300      	movs	r3, #0
 80a0440:	2209      	movs	r2, #9
 80a0442:	4639      	mov	r1, r7
 80a0444:	4d2b      	ldr	r5, [pc, #172]	; (80a04f4 <setup+0xbc>)
 80a0446:	482c      	ldr	r0, [pc, #176]	; (80a04f8 <setup+0xc0>)
 80a0448:	f002 f908 	bl	80a265c <spark_variable>
 80a044c:	2300      	movs	r3, #0
 80a044e:	2209      	movs	r2, #9
 80a0450:	4631      	mov	r1, r6
 80a0452:	482a      	ldr	r0, [pc, #168]	; (80a04fc <setup+0xc4>)
 80a0454:	f002 f902 	bl	80a265c <spark_variable>
 80a0458:	2300      	movs	r3, #0
 80a045a:	2202      	movs	r2, #2
 80a045c:	4629      	mov	r1, r5
 80a045e:	4828      	ldr	r0, [pc, #160]	; (80a0500 <setup+0xc8>)
 80a0460:	f002 f8fc 	bl	80a265c <spark_variable>
 80a0464:	2300      	movs	r3, #0
 80a0466:	2202      	movs	r2, #2
 80a0468:	4926      	ldr	r1, [pc, #152]	; (80a0504 <setup+0xcc>)
 80a046a:	4827      	ldr	r0, [pc, #156]	; (80a0508 <setup+0xd0>)
 80a046c:	f002 f8f6 	bl	80a265c <spark_variable>
  Particle.variable("temp", t);
  Particle.variable("humidity", h);
  Particle.variable("CO2", co2);
  Particle.variable("presence", pirState);
  // Serial.begin(9600);
  pinMode(MOTOR_PIN, OUTPUT);
 80a0470:	2101      	movs	r1, #1
 80a0472:	2003      	movs	r0, #3
 80a0474:	f003 fae2 	bl	80a3a3c <pinMode>
  pinMode(redpin, OUTPUT);
 80a0478:	2101      	movs	r1, #1
 80a047a:	2002      	movs	r0, #2
 80a047c:	f003 fade 	bl	80a3a3c <pinMode>
  pinMode(bluepin, OUTPUT);
 80a0480:	2101      	movs	r1, #1
 80a0482:	2004      	movs	r0, #4
 80a0484:	f003 fada 	bl	80a3a3c <pinMode>
  pinMode(greenpin, OUTPUT);
 80a0488:	2101      	movs	r1, #1
 80a048a:	2005      	movs	r0, #5
 80a048c:	f003 fad6 	bl	80a3a3c <pinMode>
  pinMode(DHT22_PIN, INPUT);
  pinMode(PIR_PIN, INPUT_PULLUP);

  blinkLedTest();
  display.setup();
 80a0490:	4c1e      	ldr	r4, [pc, #120]	; (80a050c <setup+0xd4>)
  // Serial.begin(9600);
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(redpin, OUTPUT);
  pinMode(bluepin, OUTPUT);
  pinMode(greenpin, OUTPUT);
  pinMode(DHT22_PIN, INPUT);
 80a0492:	2100      	movs	r1, #0
 80a0494:	2006      	movs	r0, #6
 80a0496:	f003 fad1 	bl	80a3a3c <pinMode>
  pinMode(PIR_PIN, INPUT_PULLUP);
 80a049a:	2102      	movs	r1, #2
 80a049c:	2007      	movs	r0, #7
 80a049e:	f003 facd 	bl	80a3a3c <pinMode>

  blinkLedTest();
 80a04a2:	f7ff fe6f 	bl	80a0184 <_Z12blinkLedTestv>
  display.setup();
 80a04a6:	4620      	mov	r0, r4
 80a04a8:	f000 ffa6 	bl	80a13f8 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
 80a04ac:	4620      	mov	r0, r4
 80a04ae:	f001 f92e 	bl	80a170e <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
 80a04b2:	4620      	mov	r0, r4
 80a04b4:	f001 fba8 	bl	80a1c08 <_ZN16Adafruit_SSD13067displayEv>

  dht.begin();
 80a04b8:	4815      	ldr	r0, [pc, #84]	; (80a0510 <setup+0xd8>)
 80a04ba:	f001 fd0d 	bl	80a1ed8 <_ZN14PietteTech_DHT5beginEv>

  delay(100);
 80a04be:	2064      	movs	r0, #100	; 0x64
 80a04c0:	f002 fb84 	bl	80a2bcc <delay>

  t = getTemperature();
 80a04c4:	f7ff fe2e 	bl	80a0124 <_Z14getTemperaturev>
 80a04c8:	e9c7 0100 	strd	r0, r1, [r7]
  h = getHumidity();
 80a04cc:	f7ff fe42 	bl	80a0154 <_Z11getHumidityv>
 80a04d0:	e9c6 0100 	strd	r0, r1, [r6]
  co2 = getCo2();
 80a04d4:	f7ff ffa8 	bl	80a0428 <_Z6getCo2v>
 80a04d8:	6028      	str	r0, [r5, #0]

  delay(1000);
 80a04da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a04de:	f002 fb75 	bl	80a2bcc <delay>
 80a04e2:	f001 ff0d 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
  previousMillis = millis();
 80a04e6:	4b0b      	ldr	r3, [pc, #44]	; (80a0514 <setup+0xdc>)
 80a04e8:	6018      	str	r0, [r3, #0]
 80a04ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a04ec:	20000100 	.word	0x20000100
 80a04f0:	200000f0 	.word	0x200000f0
 80a04f4:	20000164 	.word	0x20000164
 80a04f8:	080a4bbe 	.word	0x080a4bbe
 80a04fc:	080a4bc3 	.word	0x080a4bc3
 80a0500:	080a4bcc 	.word	0x080a4bcc
 80a0504:	200000f8 	.word	0x200000f8
 80a0508:	080a4bd0 	.word	0x080a4bd0
 80a050c:	20000090 	.word	0x20000090
 80a0510:	20000108 	.word	0x20000108
 80a0514:	2000008c 	.word	0x2000008c

080a0518 <_GLOBAL__sub_I_display>:
    while (currentTime - prevTime < twentymillis)
    {
      currentTime = millis();
    }
  }
}
 80a0518:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a051a:	4b15      	ldr	r3, [pc, #84]	; (80a0570 <_GLOBAL__sub_I_display+0x58>)
 80a051c:	2401      	movs	r4, #1
 80a051e:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0520:	f001 fe56 	bl	80a21d0 <HAL_Pin_Map>
#define INTER1_SPEED 95
#define INTER2_SPEED 170
//#define SCREEN_WIDTH 128 // OLED display width, in pixels
//#define SCREEN_HEIGHT 32 // OLED display height, in pixels

SYSTEM_THREAD(ENABLED);
 80a0524:	4620      	mov	r0, r4

OledWingAdafruit display;
 80a0526:	4c13      	ldr	r4, [pc, #76]	; (80a0574 <_GLOBAL__sub_I_display+0x5c>)
 80a0528:	4d13      	ldr	r5, [pc, #76]	; (80a0578 <_GLOBAL__sub_I_display+0x60>)
#define INTER1_SPEED 95
#define INTER2_SPEED 170
//#define SCREEN_WIDTH 128 // OLED display width, in pixels
//#define SCREEN_HEIGHT 32 // OLED display height, in pixels

SYSTEM_THREAD(ENABLED);
 80a052a:	2100      	movs	r1, #0
 80a052c:	f002 f81a 	bl	80a2564 <system_thread_set_state>

OledWingAdafruit display;
 80a0530:	2107      	movs	r1, #7
 80a0532:	4620      	mov	r0, r4
 80a0534:	f000 ff40 	bl	80a13b8 <_ZN16OledWingAdafruitC1Ei>
 80a0538:	462a      	mov	r2, r5
 80a053a:	4910      	ldr	r1, [pc, #64]	; (80a057c <_GLOBAL__sub_I_display+0x64>)
 80a053c:	4620      	mov	r0, r4
 80a053e:	f003 fb39 	bl	80a3bb4 <__aeabi_atexit>

PietteTech_DHT dht(DHT22_PIN, DHT22);
 80a0542:	2300      	movs	r3, #0
 80a0544:	2216      	movs	r2, #22
 80a0546:	2106      	movs	r1, #6
 80a0548:	480d      	ldr	r0, [pc, #52]	; (80a0580 <_GLOBAL__sub_I_display+0x68>)
 80a054a:	f001 fcc2 	bl	80a1ed2 <_ZN14PietteTech_DHTC1EhhPFvvE>

MHZ19BCO2SensorSerial<USARTSerial> mhz19b(Serial1);
 80a054e:	f003 f8e3 	bl	80a3718 <_Z22__fetch_global_Serial1v>
  /**
   * Construct the MHZ19BCO2SensorSerial with the Serial object you want to use.
   *
   * @param serial the Serial object you want to use.
   */
  MHZ19BCO2SensorSerial(MHZ19UARTSerial& serial) : m_serial(serial) {
 80a0552:	4c0c      	ldr	r4, [pc, #48]	; (80a0584 <_GLOBAL__sub_I_display+0x6c>)
    m_serial.template begin(9600,SERIAL_8N1);
 80a0554:	2200      	movs	r2, #0
 80a0556:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  /**
   * Construct the MHZ19BCO2SensorSerial with the Serial object you want to use.
   *
   * @param serial the Serial object you want to use.
   */
  MHZ19BCO2SensorSerial(MHZ19UARTSerial& serial) : m_serial(serial) {
 80a055a:	6020      	str	r0, [r4, #0]
    m_serial.template begin(9600,SERIAL_8N1);
 80a055c:	f003 f8d2 	bl	80a3704 <_ZN11USARTSerial5beginEmm>
 80a0560:	462a      	mov	r2, r5
 80a0562:	4620      	mov	r0, r4
    while (currentTime - prevTime < twentymillis)
    {
      currentTime = millis();
    }
  }
}
 80a0564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

OledWingAdafruit display;

PietteTech_DHT dht(DHT22_PIN, DHT22);

MHZ19BCO2SensorSerial<USARTSerial> mhz19b(Serial1);
 80a0568:	4907      	ldr	r1, [pc, #28]	; (80a0588 <_GLOBAL__sub_I_display+0x70>)
 80a056a:	f003 bb23 	b.w	80a3bb4 <__aeabi_atexit>
 80a056e:	bf00      	nop
 80a0570:	200000e8 	.word	0x200000e8
 80a0574:	20000090 	.word	0x20000090
 80a0578:	20000080 	.word	0x20000080
 80a057c:	080a1385 	.word	0x080a1385
 80a0580:	20000108 	.word	0x20000108
 80a0584:	20000088 	.word	0x20000088
 80a0588:	080a00cd 	.word	0x080a00cd

080a058c <_Z9displayHrf>:
    currentTime = millis();
  }
}

void displayHr(float hr)
{
 80a058c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a058e:	4607      	mov	r7, r0
  int currentTime = 0;
  int prevTime;
  int tensecs = 10000;
  display.clearDisplay();
 80a0590:	4c28      	ldr	r4, [pc, #160]	; (80a0634 <_Z9displayHrf+0xa8>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a0592:	2601      	movs	r6, #1
 80a0594:	4620      	mov	r0, r4
 80a0596:	f001 f8ba 	bl	80a170e <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 80a059a:	2500      	movs	r5, #0

  display.setTextSize(1);
 80a059c:	4620      	mov	r0, r4
 80a059e:	2101      	movs	r1, #1
 80a05a0:	f000 feea 	bl	80a1378 <_ZN12Adafruit_GFX11setTextSizeEh>
 80a05a4:	8225      	strh	r5, [r4, #16]
 80a05a6:	8265      	strh	r5, [r4, #18]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a05a8:	82e6      	strh	r6, [r4, #22]
 80a05aa:	82a6      	strh	r6, [r4, #20]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(F("Humidite : "));
 80a05ac:	4922      	ldr	r1, [pc, #136]	; (80a0638 <_Z9displayHrf+0xac>)
 80a05ae:	4620      	mov	r0, r4
 80a05b0:	f002 f9c9 	bl	80a2946 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setTextSize(3);
 80a05b4:	4620      	mov	r0, r4
 80a05b6:	2103      	movs	r1, #3
 80a05b8:	f000 fede 	bl	80a1378 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.print(hr);
 80a05bc:	2202      	movs	r2, #2
 80a05be:	4639      	mov	r1, r7
 80a05c0:	4620      	mov	r0, r4
 80a05c2:	f002 fa9b 	bl	80a2afc <_ZN5Print5printEfi>
 80a05c6:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80a05ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]

  display.drawLine(display.width() - 20, display.height(), display.width(),
                   display.height() - 20, WHITE);
 80a05ce:	f1a2 0014 	sub.w	r0, r2, #20
 80a05d2:	f1a3 0114 	sub.w	r1, r3, #20
 80a05d6:	b200      	sxth	r0, r0
 80a05d8:	9000      	str	r0, [sp, #0]
 80a05da:	b209      	sxth	r1, r1
 80a05dc:	4620      	mov	r0, r4
 80a05de:	9601      	str	r6, [sp, #4]
 80a05e0:	f000 fafe 	bl	80a0be0 <_ZN12Adafruit_GFX8drawLineEsssst>

  display.drawCircle(display.width() - 16, display.height() - 16, 3, WHITE);
 80a05e4:	89e2      	ldrh	r2, [r4, #14]
 80a05e6:	89a1      	ldrh	r1, [r4, #12]
 80a05e8:	3a10      	subs	r2, #16
 80a05ea:	3910      	subs	r1, #16
 80a05ec:	4620      	mov	r0, r4
 80a05ee:	2303      	movs	r3, #3
 80a05f0:	b212      	sxth	r2, r2
 80a05f2:	b209      	sxth	r1, r1
 80a05f4:	9600      	str	r6, [sp, #0]
 80a05f6:	f000 fb9d 	bl	80a0d34 <_ZN12Adafruit_GFX10drawCircleEssst>

  display.drawCircle(display.width() - 4, display.height() - 4, 3, WHITE);
 80a05fa:	89e2      	ldrh	r2, [r4, #14]
 80a05fc:	89a1      	ldrh	r1, [r4, #12]
 80a05fe:	3a04      	subs	r2, #4
 80a0600:	3904      	subs	r1, #4
 80a0602:	2303      	movs	r3, #3
 80a0604:	b212      	sxth	r2, r2
 80a0606:	b209      	sxth	r1, r1
 80a0608:	4620      	mov	r0, r4
 80a060a:	9600      	str	r6, [sp, #0]
 80a060c:	f000 fb92 	bl	80a0d34 <_ZN12Adafruit_GFX10drawCircleEssst>
  display.display();
 80a0610:	4620      	mov	r0, r4
 80a0612:	f001 faf9 	bl	80a1c08 <_ZN16Adafruit_SSD13067displayEv>
 80a0616:	f001 fe73 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a061a:	4604      	mov	r4, r0
  }
}

void displayHr(float hr)
{
  int currentTime = 0;
 80a061c:	4628      	mov	r0, r5
  display.drawCircle(display.width() - 16, display.height() - 16, 3, WHITE);

  display.drawCircle(display.width() - 4, display.height() - 4, 3, WHITE);
  display.display();
  prevTime = millis();
  while (currentTime - prevTime < tensecs)
 80a061e:	f242 750f 	movw	r5, #9999	; 0x270f
 80a0622:	1b00      	subs	r0, r0, r4
 80a0624:	42a8      	cmp	r0, r5
 80a0626:	dc02      	bgt.n	80a062e <_Z9displayHrf+0xa2>
 80a0628:	f001 fe6a 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a062c:	e7f9      	b.n	80a0622 <_Z9displayHrf+0x96>
  {
    currentTime = millis();
  }
}
 80a062e:	b003      	add	sp, #12
 80a0630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0632:	bf00      	nop
 80a0634:	20000090 	.word	0x20000090
 80a0638:	080a4bd9 	.word	0x080a4bd9
 80a063c:	00000000 	.word	0x00000000

080a0640 <loop>:
  delay(1000);
  previousMillis = millis();
}

void loop()
{
 80a0640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0644:	f001 fe5c 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
  currentMillis = millis();
  if (currentMillis - previousMillis >= interval)
 80a0648:	4ba1      	ldr	r3, [pc, #644]	; (80a08d0 <loop+0x290>)
  previousMillis = millis();
}

void loop()
{
  currentMillis = millis();
 80a064a:	4aa2      	ldr	r2, [pc, #648]	; (80a08d4 <loop+0x294>)
  if (currentMillis - previousMillis >= interval)
 80a064c:	6819      	ldr	r1, [r3, #0]
  previousMillis = millis();
}

void loop()
{
  currentMillis = millis();
 80a064e:	6010      	str	r0, [r2, #0]
  if (currentMillis - previousMillis >= interval)
 80a0650:	1a40      	subs	r0, r0, r1
 80a0652:	49a1      	ldr	r1, [pc, #644]	; (80a08d8 <loop+0x298>)
 80a0654:	4692      	mov	sl, r2
 80a0656:	6809      	ldr	r1, [r1, #0]
 80a0658:	4699      	mov	r9, r3
 80a065a:	4288      	cmp	r0, r1
 80a065c:	f0c0 80f9 	bcc.w	80a0852 <loop+0x212>
  {
    /* -----||| GETTING DATA FROM SENSORS |||----- */
    t = getTemperature();
 80a0660:	f7ff fd60 	bl	80a0124 <_Z14getTemperaturev>
 80a0664:	4d9d      	ldr	r5, [pc, #628]	; (80a08dc <loop+0x29c>)
    h = getHumidity();
 80a0666:	4c9e      	ldr	r4, [pc, #632]	; (80a08e0 <loop+0x2a0>)
{
  currentMillis = millis();
  if (currentMillis - previousMillis >= interval)
  {
    /* -----||| GETTING DATA FROM SENSORS |||----- */
    t = getTemperature();
 80a0668:	e9c5 0100 	strd	r0, r1, [r5]
    h = getHumidity();
 80a066c:	f7ff fd72 	bl	80a0154 <_Z11getHumidityv>
 80a0670:	e9c4 0100 	strd	r0, r1, [r4]
    co2 = getCo2();
 80a0674:	f7ff fed8 	bl	80a0428 <_Z6getCo2v>
 80a0678:	4b9a      	ldr	r3, [pc, #616]	; (80a08e4 <loop+0x2a4>)

    if (co2 < 0 || t < 0 || h < 0)
 80a067a:	2800      	cmp	r0, #0
  if (currentMillis - previousMillis >= interval)
  {
    /* -----||| GETTING DATA FROM SENSORS |||----- */
    t = getTemperature();
    h = getHumidity();
    co2 = getCo2();
 80a067c:	4606      	mov	r6, r0
 80a067e:	6018      	str	r0, [r3, #0]
 80a0680:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80a0928 <loop+0x2e8>
 80a0684:	4f98      	ldr	r7, [pc, #608]	; (80a08e8 <loop+0x2a8>)

    if (co2 < 0 || t < 0 || h < 0)
 80a0686:	db0e      	blt.n	80a06a6 <loop+0x66>
 80a0688:	e9d5 0100 	ldrd	r0, r1, [r5]
 80a068c:	2200      	movs	r2, #0
 80a068e:	2300      	movs	r3, #0
 80a0690:	f004 f826 	bl	80a46e0 <__aeabi_dcmplt>
 80a0694:	b938      	cbnz	r0, 80a06a6 <loop+0x66>
 80a0696:	cc30      	ldmia	r4, {r4, r5}
 80a0698:	2200      	movs	r2, #0
 80a069a:	2300      	movs	r3, #0
 80a069c:	4620      	mov	r0, r4
 80a069e:	4629      	mov	r1, r5
 80a06a0:	f004 f81e 	bl	80a46e0 <__aeabi_dcmplt>
 80a06a4:	b1c0      	cbz	r0, 80a06d8 <loop+0x98>
    {
      g_value = LOW;
 80a06a6:	4b91      	ldr	r3, [pc, #580]	; (80a08ec <loop+0x2ac>)
 80a06a8:	2200      	movs	r2, #0
 80a06aa:	601a      	str	r2, [r3, #0]
      r_value, b_value = HIGH;
 80a06ac:	4b90      	ldr	r3, [pc, #576]	; (80a08f0 <loop+0x2b0>)
 80a06ae:	2101      	movs	r1, #1
 80a06b0:	6019      	str	r1, [r3, #0]
      stateIndicator = 0;
      if (stateIndicator != lastState)
 80a06b2:	783b      	ldrb	r3, [r7, #0]

    if (co2 < 0 || t < 0 || h < 0)
    {
      g_value = LOW;
      r_value, b_value = HIGH;
      stateIndicator = 0;
 80a06b4:	f888 2000 	strb.w	r2, [r8]
      if (stateIndicator != lastState)
 80a06b8:	2b00      	cmp	r3, #0
 80a06ba:	f000 80c3 	beq.w	80a0844 <loop+0x204>
 80a06be:	4b8d      	ldr	r3, [pc, #564]	; (80a08f4 <loop+0x2b4>)
      {
        Particle.publish("newState", "dataError", PRIVATE);
 80a06c0:	a802      	add	r0, sp, #8
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a06c2:	781b      	ldrb	r3, [r3, #0]
 80a06c4:	498c      	ldr	r1, [pc, #560]	; (80a08f8 <loop+0x2b8>)
 80a06c6:	f88d 2000 	strb.w	r2, [sp]
 80a06ca:	4a8c      	ldr	r2, [pc, #560]	; (80a08fc <loop+0x2bc>)
 80a06cc:	f7ff fd05 	bl	80a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a06d0:	a803      	add	r0, sp, #12
 80a06d2:	f7ff fe48 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a06d6:	e0b5      	b.n	80a0844 <loop+0x204>
      }
    }
    else
    {
      if ((h > 85) || (co2 > 2000))
 80a06d8:	2200      	movs	r2, #0
 80a06da:	4b89      	ldr	r3, [pc, #548]	; (80a0900 <loop+0x2c0>)
 80a06dc:	4620      	mov	r0, r4
 80a06de:	4629      	mov	r1, r5
 80a06e0:	f004 f81c 	bl	80a471c <__aeabi_dcmpgt>
 80a06e4:	b910      	cbnz	r0, 80a06ec <loop+0xac>
 80a06e6:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
 80a06ea:	dd1c      	ble.n	80a0726 <loop+0xe6>
      {
        analogWrite(MOTOR_PIN, MAX_SPEED);
 80a06ec:	21d6      	movs	r1, #214	; 0xd6
 80a06ee:	2003      	movs	r0, #3
 80a06f0:	f003 f9e1 	bl	80a3ab6 <_Z11analogWritetm>
        stateIndicator = 4;
 80a06f4:	2304      	movs	r3, #4
 80a06f6:	f888 3000 	strb.w	r3, [r8]
        if (stateIndicator != lastState)
 80a06fa:	783b      	ldrb	r3, [r7, #0]
 80a06fc:	2b04      	cmp	r3, #4
 80a06fe:	d00c      	beq.n	80a071a <loop+0xda>
 80a0700:	4b7c      	ldr	r3, [pc, #496]	; (80a08f4 <loop+0x2b4>)
        {
          Particle.publish("newState", "red", PRIVATE);
 80a0702:	2200      	movs	r2, #0
 80a0704:	781b      	ldrb	r3, [r3, #0]
 80a0706:	a802      	add	r0, sp, #8
 80a0708:	f88d 2000 	strb.w	r2, [sp]
 80a070c:	497a      	ldr	r1, [pc, #488]	; (80a08f8 <loop+0x2b8>)
 80a070e:	4a7d      	ldr	r2, [pc, #500]	; (80a0904 <loop+0x2c4>)
 80a0710:	f7ff fce3 	bl	80a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>
 80a0714:	a803      	add	r0, sp, #12
 80a0716:	f7ff fe26 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        // Serial.println(F("Vitesse MAX"));
        r_value = HIGH;
 80a071a:	4b7b      	ldr	r3, [pc, #492]	; (80a0908 <loop+0x2c8>)
 80a071c:	2201      	movs	r2, #1
 80a071e:	601a      	str	r2, [r3, #0]
        g_value = LOW;
 80a0720:	2300      	movs	r3, #0
 80a0722:	4a72      	ldr	r2, [pc, #456]	; (80a08ec <loop+0x2ac>)
 80a0724:	e08b      	b.n	80a083e <loop+0x1fe>
        b_value = LOW;
      }
      else if (((h > 75) && (h <= 85)) || ((co2 > 1400) && (co2 <= 2000)))
 80a0726:	a368      	add	r3, pc, #416	; (adr r3, 80a08c8 <loop+0x288>)
 80a0728:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a072c:	4620      	mov	r0, r4
 80a072e:	4629      	mov	r1, r5
 80a0730:	f003 fff4 	bl	80a471c <__aeabi_dcmpgt>
 80a0734:	b130      	cbz	r0, 80a0744 <loop+0x104>
 80a0736:	2200      	movs	r2, #0
 80a0738:	4b71      	ldr	r3, [pc, #452]	; (80a0900 <loop+0x2c0>)
 80a073a:	4620      	mov	r0, r4
 80a073c:	4629      	mov	r1, r5
 80a073e:	f003 ffd9 	bl	80a46f4 <__aeabi_dcmple>
 80a0742:	b928      	cbnz	r0, 80a0750 <loop+0x110>
 80a0744:	f46f 62af 	mvn.w	r2, #1400	; 0x578
 80a0748:	18b3      	adds	r3, r6, r2
 80a074a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80a074e:	d21f      	bcs.n	80a0790 <loop+0x150>
      {
        analogWrite(MOTOR_PIN, INTER2_SPEED);
 80a0750:	21aa      	movs	r1, #170	; 0xaa
 80a0752:	2003      	movs	r0, #3
 80a0754:	f003 f9af 	bl	80a3ab6 <_Z11analogWritetm>
        stateIndicator = 3;
 80a0758:	2303      	movs	r3, #3
 80a075a:	f888 3000 	strb.w	r3, [r8]
        if (stateIndicator != lastState)
 80a075e:	783b      	ldrb	r3, [r7, #0]
 80a0760:	2b03      	cmp	r3, #3
 80a0762:	d00c      	beq.n	80a077e <loop+0x13e>
 80a0764:	4b63      	ldr	r3, [pc, #396]	; (80a08f4 <loop+0x2b4>)
        {
          Particle.publish("newState", "blue", PRIVATE);
 80a0766:	2200      	movs	r2, #0
 80a0768:	781b      	ldrb	r3, [r3, #0]
 80a076a:	a802      	add	r0, sp, #8
 80a076c:	f88d 2000 	strb.w	r2, [sp]
 80a0770:	4961      	ldr	r1, [pc, #388]	; (80a08f8 <loop+0x2b8>)
 80a0772:	4a66      	ldr	r2, [pc, #408]	; (80a090c <loop+0x2cc>)
 80a0774:	f7ff fcb1 	bl	80a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>
 80a0778:	a803      	add	r0, sp, #12
 80a077a:	f7ff fdf4 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        // Serial.println(F("Vitesse 2"));
        r_value = LOW;
 80a077e:	4a62      	ldr	r2, [pc, #392]	; (80a0908 <loop+0x2c8>)
 80a0780:	2300      	movs	r3, #0
 80a0782:	6013      	str	r3, [r2, #0]
        g_value = LOW;
 80a0784:	4a59      	ldr	r2, [pc, #356]	; (80a08ec <loop+0x2ac>)
 80a0786:	6013      	str	r3, [r2, #0]
        b_value = HIGH;
 80a0788:	4b59      	ldr	r3, [pc, #356]	; (80a08f0 <loop+0x2b0>)
 80a078a:	2201      	movs	r2, #1
 80a078c:	601a      	str	r2, [r3, #0]
 80a078e:	e059      	b.n	80a0844 <loop+0x204>
      }
      else if (((h > 65) && (h <= 75)) || ((co2 > 700) && (co2 <= 1400)))
 80a0790:	2200      	movs	r2, #0
 80a0792:	4b5f      	ldr	r3, [pc, #380]	; (80a0910 <loop+0x2d0>)
 80a0794:	4620      	mov	r0, r4
 80a0796:	4629      	mov	r1, r5
 80a0798:	f003 ffc0 	bl	80a471c <__aeabi_dcmpgt>
 80a079c:	b138      	cbz	r0, 80a07ae <loop+0x16e>
 80a079e:	a34a      	add	r3, pc, #296	; (adr r3, 80a08c8 <loop+0x288>)
 80a07a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07a4:	4620      	mov	r0, r4
 80a07a6:	4629      	mov	r1, r5
 80a07a8:	f003 ffa4 	bl	80a46f4 <__aeabi_dcmple>
 80a07ac:	b928      	cbnz	r0, 80a07ba <loop+0x17a>
 80a07ae:	f46f 732f 	mvn.w	r3, #700	; 0x2bc
 80a07b2:	441e      	add	r6, r3
 80a07b4:	f5b6 7f2f 	cmp.w	r6, #700	; 0x2bc
 80a07b8:	d21e      	bcs.n	80a07f8 <loop+0x1b8>
      {
        analogWrite(MOTOR_PIN, INTER1_SPEED);
 80a07ba:	215f      	movs	r1, #95	; 0x5f
 80a07bc:	2003      	movs	r0, #3
 80a07be:	f003 f97a 	bl	80a3ab6 <_Z11analogWritetm>
        stateIndicator = 2;
 80a07c2:	2302      	movs	r3, #2
 80a07c4:	f888 3000 	strb.w	r3, [r8]
        if (stateIndicator != lastState)
 80a07c8:	783b      	ldrb	r3, [r7, #0]
 80a07ca:	2b02      	cmp	r3, #2
 80a07cc:	d00c      	beq.n	80a07e8 <loop+0x1a8>
 80a07ce:	4b49      	ldr	r3, [pc, #292]	; (80a08f4 <loop+0x2b4>)
        {
          Particle.publish("newState", "lightBlue", PRIVATE);
 80a07d0:	2200      	movs	r2, #0
 80a07d2:	781b      	ldrb	r3, [r3, #0]
 80a07d4:	a802      	add	r0, sp, #8
 80a07d6:	f88d 2000 	strb.w	r2, [sp]
 80a07da:	4947      	ldr	r1, [pc, #284]	; (80a08f8 <loop+0x2b8>)
 80a07dc:	4a4d      	ldr	r2, [pc, #308]	; (80a0914 <loop+0x2d4>)
 80a07de:	f7ff fc7c 	bl	80a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>
 80a07e2:	a803      	add	r0, sp, #12
 80a07e4:	f7ff fdbf 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        // Serial.println(F("Vitesse 1"));
        b_value = HIGH;
 80a07e8:	4a41      	ldr	r2, [pc, #260]	; (80a08f0 <loop+0x2b0>)
 80a07ea:	2301      	movs	r3, #1
 80a07ec:	6013      	str	r3, [r2, #0]
        r_value = LOW;
 80a07ee:	4a46      	ldr	r2, [pc, #280]	; (80a0908 <loop+0x2c8>)
 80a07f0:	2100      	movs	r1, #0
 80a07f2:	6011      	str	r1, [r2, #0]
        g_value = HIGH;
 80a07f4:	4a3d      	ldr	r2, [pc, #244]	; (80a08ec <loop+0x2ac>)
 80a07f6:	e024      	b.n	80a0842 <loop+0x202>
      }
      else if ((h <= 65) && (co2 <= 700))
 80a07f8:	2200      	movs	r2, #0
 80a07fa:	4b45      	ldr	r3, [pc, #276]	; (80a0910 <loop+0x2d0>)
 80a07fc:	4620      	mov	r0, r4
 80a07fe:	4629      	mov	r1, r5
 80a0800:	f003 ff78 	bl	80a46f4 <__aeabi_dcmple>
 80a0804:	b1f0      	cbz	r0, 80a0844 <loop+0x204>
      {
        analogWrite(MOTOR_PIN, MIN_SPEED);
 80a0806:	2114      	movs	r1, #20
 80a0808:	2003      	movs	r0, #3
 80a080a:	f003 f954 	bl	80a3ab6 <_Z11analogWritetm>
        stateIndicator = 1;
 80a080e:	2301      	movs	r3, #1
 80a0810:	f888 3000 	strb.w	r3, [r8]
        if (stateIndicator != lastState)
 80a0814:	783b      	ldrb	r3, [r7, #0]
 80a0816:	2b01      	cmp	r3, #1
 80a0818:	d00c      	beq.n	80a0834 <loop+0x1f4>
 80a081a:	4b36      	ldr	r3, [pc, #216]	; (80a08f4 <loop+0x2b4>)
        {
          Particle.publish("newState", "green", PRIVATE);
 80a081c:	2200      	movs	r2, #0
 80a081e:	781b      	ldrb	r3, [r3, #0]
 80a0820:	a802      	add	r0, sp, #8
 80a0822:	f88d 2000 	strb.w	r2, [sp]
 80a0826:	4934      	ldr	r1, [pc, #208]	; (80a08f8 <loop+0x2b8>)
 80a0828:	4a3b      	ldr	r2, [pc, #236]	; (80a0918 <loop+0x2d8>)
 80a082a:	f7ff fc56 	bl	80a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>
 80a082e:	a803      	add	r0, sp, #12
 80a0830:	f7ff fd99 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        // Serial.println(F("Vitesse MIN"));
        g_value = HIGH;
 80a0834:	4b2d      	ldr	r3, [pc, #180]	; (80a08ec <loop+0x2ac>)
 80a0836:	2201      	movs	r2, #1
 80a0838:	601a      	str	r2, [r3, #0]
        r_value = LOW;
 80a083a:	4a33      	ldr	r2, [pc, #204]	; (80a0908 <loop+0x2c8>)
 80a083c:	2300      	movs	r3, #0
 80a083e:	6013      	str	r3, [r2, #0]
        b_value = LOW;
 80a0840:	4a2b      	ldr	r2, [pc, #172]	; (80a08f0 <loop+0x2b0>)
 80a0842:	6013      	str	r3, [r2, #0]
      }
    }
    lastState = stateIndicator;
 80a0844:	f898 3000 	ldrb.w	r3, [r8]
 80a0848:	703b      	strb	r3, [r7, #0]
    previousMillis = currentMillis;
 80a084a:	f8da 3000 	ldr.w	r3, [sl]
 80a084e:	f8c9 3000 	str.w	r3, [r9]
  }
  // pirValue = digitalRead(PIR_PIN);
  if (digitalRead(PIR_PIN) == HIGH)
 80a0852:	2007      	movs	r0, #7
 80a0854:	f003 f91c 	bl	80a3a90 <digitalRead>
 80a0858:	2801      	cmp	r0, #1
 80a085a:	4605      	mov	r5, r0
 80a085c:	4c2f      	ldr	r4, [pc, #188]	; (80a091c <loop+0x2dc>)
 80a085e:	d165      	bne.n	80a092c <loop+0x2ec>
  {
    digitalWrite(redpin, r_value);
 80a0860:	4b29      	ldr	r3, [pc, #164]	; (80a0908 <loop+0x2c8>)
 80a0862:	2002      	movs	r0, #2
 80a0864:	7819      	ldrb	r1, [r3, #0]
 80a0866:	f003 f8fa 	bl	80a3a5e <digitalWrite>
    digitalWrite(greenpin, g_value);
 80a086a:	4b20      	ldr	r3, [pc, #128]	; (80a08ec <loop+0x2ac>)
 80a086c:	2005      	movs	r0, #5
 80a086e:	7819      	ldrb	r1, [r3, #0]
 80a0870:	f003 f8f5 	bl	80a3a5e <digitalWrite>
    digitalWrite(bluepin, b_value);
 80a0874:	4b1e      	ldr	r3, [pc, #120]	; (80a08f0 <loop+0x2b0>)
 80a0876:	2004      	movs	r0, #4
 80a0878:	7819      	ldrb	r1, [r3, #0]
 80a087a:	f003 f8f0 	bl	80a3a5e <digitalWrite>

    if (pirState == LOW)
 80a087e:	6822      	ldr	r2, [r4, #0]
 80a0880:	b962      	cbnz	r2, 80a089c <loop+0x25c>
 80a0882:	4b1c      	ldr	r3, [pc, #112]	; (80a08f4 <loop+0x2b4>)
    {
      pirState = HIGH;
 80a0884:	6025      	str	r5, [r4, #0]
 80a0886:	781b      	ldrb	r3, [r3, #0]
      Particle.publish("Motion-Detection", "presence", PRIVATE);
 80a0888:	a802      	add	r0, sp, #8
 80a088a:	f88d 2000 	strb.w	r2, [sp]
 80a088e:	4924      	ldr	r1, [pc, #144]	; (80a0920 <loop+0x2e0>)
 80a0890:	4a24      	ldr	r2, [pc, #144]	; (80a0924 <loop+0x2e4>)
 80a0892:	f7ff fc22 	bl	80a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>
 80a0896:	a803      	add	r0, sp, #12
 80a0898:	f7ff fd65 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    displayTemp((float)t);
 80a089c:	4b0f      	ldr	r3, [pc, #60]	; (80a08dc <loop+0x29c>)
 80a089e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a08a2:	f003 ffa3 	bl	80a47ec <__aeabi_d2f>
 80a08a6:	f7ff fc8d 	bl	80a01c4 <_Z11displayTempf>
    displayHr((float)h);
 80a08aa:	4b0d      	ldr	r3, [pc, #52]	; (80a08e0 <loop+0x2a0>)
 80a08ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a08b0:	f003 ff9c 	bl	80a47ec <__aeabi_d2f>
 80a08b4:	f7ff fe6a 	bl	80a058c <_Z9displayHrf>
    displayCo2((int)co2);
 80a08b8:	4b0a      	ldr	r3, [pc, #40]	; (80a08e4 <loop+0x2a4>)
 80a08ba:	6818      	ldr	r0, [r3, #0]
 80a08bc:	f7ff fcba 	bl	80a0234 <_Z10displayCo2i>
 80a08c0:	e05a      	b.n	80a0978 <loop+0x338>
 80a08c2:	bf00      	nop
 80a08c4:	f3af 8000 	nop.w
 80a08c8:	00000000 	.word	0x00000000
 80a08cc:	4052c000 	.word	0x4052c000
 80a08d0:	2000008c 	.word	0x2000008c
 80a08d4:	20000168 	.word	0x20000168
 80a08d8:	20000010 	.word	0x20000010
 80a08dc:	20000100 	.word	0x20000100
 80a08e0:	200000f0 	.word	0x200000f0
 80a08e4:	20000164 	.word	0x20000164
 80a08e8:	20000004 	.word	0x20000004
 80a08ec:	20000008 	.word	0x20000008
 80a08f0:	2000000c 	.word	0x2000000c
 80a08f4:	200000e8 	.word	0x200000e8
 80a08f8:	080a4bef 	.word	0x080a4bef
 80a08fc:	080a4be5 	.word	0x080a4be5
 80a0900:	40554000 	.word	0x40554000
 80a0904:	080a4bf8 	.word	0x080a4bf8
 80a0908:	20000000 	.word	0x20000000
 80a090c:	080a4bfc 	.word	0x080a4bfc
 80a0910:	40504000 	.word	0x40504000
 80a0914:	080a4c01 	.word	0x080a4c01
 80a0918:	080a4c0b 	.word	0x080a4c0b
 80a091c:	200000f8 	.word	0x200000f8
 80a0920:	080a4c11 	.word	0x080a4c11
 80a0924:	080a4bd0 	.word	0x080a4bd0
 80a0928:	20000084 	.word	0x20000084
  }
  else
  {
    display.clearDisplay();
 80a092c:	4814      	ldr	r0, [pc, #80]	; (80a0980 <loop+0x340>)
 80a092e:	f000 feee 	bl	80a170e <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
 80a0932:	4813      	ldr	r0, [pc, #76]	; (80a0980 <loop+0x340>)
 80a0934:	f001 f968 	bl	80a1c08 <_ZN16Adafruit_SSD13067displayEv>

    if (pirState == HIGH)
 80a0938:	6823      	ldr	r3, [r4, #0]
 80a093a:	2b01      	cmp	r3, #1
 80a093c:	d10d      	bne.n	80a095a <loop+0x31a>
 80a093e:	4b11      	ldr	r3, [pc, #68]	; (80a0984 <loop+0x344>)
    {
      pirState = LOW;
 80a0940:	2200      	movs	r2, #0
 80a0942:	6022      	str	r2, [r4, #0]
 80a0944:	781b      	ldrb	r3, [r3, #0]
      Particle.publish("Motion-Detection", "absence", PRIVATE);
 80a0946:	a802      	add	r0, sp, #8
 80a0948:	f88d 2000 	strb.w	r2, [sp]
 80a094c:	490e      	ldr	r1, [pc, #56]	; (80a0988 <loop+0x348>)
 80a094e:	4a0f      	ldr	r2, [pc, #60]	; (80a098c <loop+0x34c>)
 80a0950:	f7ff fbc3 	bl	80a00da <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.10>
 80a0954:	a803      	add	r0, sp, #12
 80a0956:	f7ff fd06 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    fadingLed(HIGH, HIGH, HIGH);
 80a095a:	2201      	movs	r2, #1
 80a095c:	4611      	mov	r1, r2
 80a095e:	4610      	mov	r0, r2
 80a0960:	f7ff fca8 	bl	80a02b4 <_Z9fadingLediii>
    fadingLed(HIGH, HIGH, LOW);
 80a0964:	2101      	movs	r1, #1
 80a0966:	4608      	mov	r0, r1
 80a0968:	2200      	movs	r2, #0
 80a096a:	f7ff fca3 	bl	80a02b4 <_Z9fadingLediii>
    fadingLed(HIGH, LOW, HIGH);
 80a096e:	2201      	movs	r2, #1
 80a0970:	2100      	movs	r1, #0
 80a0972:	4610      	mov	r0, r2
 80a0974:	f7ff fc9e 	bl	80a02b4 <_Z9fadingLediii>
  }
}
 80a0978:	b004      	add	sp, #16
 80a097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a097e:	bf00      	nop
 80a0980:	20000090 	.word	0x20000090
 80a0984:	200000e8 	.word	0x200000e8
 80a0988:	080a4c11 	.word	0x080a4c11
 80a098c:	080a4c22 	.word	0x080a4c22

080a0990 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0990:	b510      	push	{r4, lr}
 80a0992:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0994:	6880      	ldr	r0, [r0, #8]
 80a0996:	b108      	cbz	r0, 80a099c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0998:	f001 fcd2 	bl	80a2340 <os_mutex_recursive_destroy>
 80a099c:	4620      	mov	r0, r4
 80a099e:	bd10      	pop	{r4, pc}

080a09a0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a09a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a09a2:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a09a4:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a09a6:	4608      	mov	r0, r1
 80a09a8:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a09aa:	b133      	cbz	r3, 80a09ba <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a09ac:	b93d      	cbnz	r5, 80a09be <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a09ae:	490c      	ldr	r1, [pc, #48]	; (80a09e0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a09b0:	b004      	add	sp, #16
 80a09b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a09b6:	f001 bfa9 	b.w	80a290c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a09ba:	4b0a      	ldr	r3, [pc, #40]	; (80a09e4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a09bc:	e000      	b.n	80a09c0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a09be:	4b0a      	ldr	r3, [pc, #40]	; (80a09e8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a09c0:	7b16      	ldrb	r6, [r2, #12]
 80a09c2:	4c0a      	ldr	r4, [pc, #40]	; (80a09ec <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a09c4:	490a      	ldr	r1, [pc, #40]	; (80a09f0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a09c6:	7b52      	ldrb	r2, [r2, #13]
 80a09c8:	2e01      	cmp	r6, #1
 80a09ca:	bf08      	it	eq
 80a09cc:	4621      	moveq	r1, r4
 80a09ce:	9202      	str	r2, [sp, #8]
 80a09d0:	9101      	str	r1, [sp, #4]
 80a09d2:	9500      	str	r5, [sp, #0]
 80a09d4:	4a07      	ldr	r2, [pc, #28]	; (80a09f4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a09d6:	2100      	movs	r1, #0
 80a09d8:	f002 f89f 	bl	80a2b1a <_ZN5Print11printf_implEbPKcz>
  }
 80a09dc:	b004      	add	sp, #16
 80a09de:	bd70      	pop	{r4, r5, r6, pc}
 80a09e0:	080a4c3b 	.word	0x080a4c3b
 80a09e4:	080a5818 	.word	0x080a5818
 80a09e8:	080a4c2a 	.word	0x080a4c2a
 80a09ec:	080a4c33 	.word	0x080a4c33
 80a09f0:	080a4c37 	.word	0x080a4c37
 80a09f4:	080a4c51 	.word	0x080a4c51

080a09f8 <_GLOBAL__sub_I__ZN15Adafruit_SPITFTC2Ettaaaaaa>:
 80a09f8:	f001 bbea 	b.w	80a21d0 <HAL_Pin_Map>

080a09fc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a09fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0a00:	461e      	mov	r6, r3
 80a0a02:	b085      	sub	sp, #20
 80a0a04:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0a08:	4615      	mov	r5, r2
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0a0a:	1a9a      	subs	r2, r3, r2
 80a0a0c:	2a00      	cmp	r2, #0
 80a0a0e:	bfb8      	it	lt
 80a0a10:	4252      	neglt	r2, r2
 80a0a12:	9200      	str	r2, [sp, #0]
 80a0a14:	1a72      	subs	r2, r6, r1
 80a0a16:	2a00      	cmp	r2, #0
 80a0a18:	bfb8      	it	lt
 80a0a1a:	4252      	neglt	r2, r2
 80a0a1c:	9201      	str	r2, [sp, #4]
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0a1e:	460c      	mov	r4, r1
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0a20:	9a00      	ldr	r2, [sp, #0]
 80a0a22:	9901      	ldr	r1, [sp, #4]
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0a24:	4681      	mov	r9, r0
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0a26:	428a      	cmp	r2, r1
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0a28:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0a2c:	dd05      	ble.n	80a0a3a <_ZN12Adafruit_GFX9writeLineEsssst+0x3e>
 80a0a2e:	4632      	mov	r2, r6
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
 80a0a30:	461e      	mov	r6, r3
 80a0a32:	4613      	mov	r3, r2
        uint16_t color) {
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0a34:	4622      	mov	r2, r4
        _swap_int16_t(x0, y0);
 80a0a36:	462c      	mov	r4, r5
 80a0a38:	4615      	mov	r5, r2
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80a0a3a:	42b4      	cmp	r4, r6
 80a0a3c:	dd05      	ble.n	80a0a4a <_ZN12Adafruit_GFX9writeLineEsssst+0x4e>
 80a0a3e:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 80a0a40:	461d      	mov	r5, r3
 80a0a42:	4613      	mov	r3, r2
    if (steep) {
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80a0a44:	4622      	mov	r2, r4
 80a0a46:	4634      	mov	r4, r6
 80a0a48:	4616      	mov	r6, r2
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
 80a0a4a:	1b5a      	subs	r2, r3, r5
 80a0a4c:	2a00      	cmp	r2, #0
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80a0a4e:	ebc4 0806 	rsb	r8, r4, r6
    dy = abs(y1 - y0);
 80a0a52:	bfb8      	it	lt
 80a0a54:	4252      	neglt	r2, r2
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80a0a56:	fa1f f888 	uxth.w	r8, r8
    dy = abs(y1 - y0);
 80a0a5a:	9203      	str	r2, [sp, #12]

    int16_t err = dx / 2;
 80a0a5c:	fa0f f788 	sxth.w	r7, r8
 80a0a60:	2202      	movs	r2, #2
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 80a0a62:	429d      	cmp	r5, r3
 80a0a64:	bfb4      	ite	lt
 80a0a66:	2301      	movlt	r3, #1
 80a0a68:	f04f 33ff 	movge.w	r3, #4294967295

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);

    int16_t err = dx / 2;
 80a0a6c:	fb97 f7f2 	sdiv	r7, r7, r2
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 80a0a70:	9302      	str	r3, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 80a0a72:	42b4      	cmp	r4, r6
 80a0a74:	dc1f      	bgt.n	80a0ab6 <_ZN12Adafruit_GFX9writeLineEsssst+0xba>
        if (steep) {
 80a0a76:	9a01      	ldr	r2, [sp, #4]
 80a0a78:	9b00      	ldr	r3, [sp, #0]
            writePixel(y0, x0, color);
        } else {
            writePixel(x0, y0, color);
 80a0a7a:	4648      	mov	r0, r9
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
        if (steep) {
 80a0a7c:	4293      	cmp	r3, r2
 80a0a7e:	f8d9 3000 	ldr.w	r3, [r9]
            writePixel(y0, x0, color);
 80a0a82:	bfc8      	it	gt
 80a0a84:	4622      	movgt	r2, r4
 80a0a86:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a0a8a:	bfc8      	it	gt
 80a0a8c:	4629      	movgt	r1, r5
 80a0a8e:	4653      	mov	r3, sl
        } else {
            writePixel(x0, y0, color);
 80a0a90:	bfdc      	itt	le
 80a0a92:	462a      	movle	r2, r5
 80a0a94:	4621      	movle	r1, r4
 80a0a96:	47d8      	blx	fp
        }
        err -= dy;
 80a0a98:	9b03      	ldr	r3, [sp, #12]
 80a0a9a:	1aff      	subs	r7, r7, r3
 80a0a9c:	b2bb      	uxth	r3, r7
 80a0a9e:	b21f      	sxth	r7, r3
        if (err < 0) {
 80a0aa0:	2f00      	cmp	r7, #0
 80a0aa2:	da05      	bge.n	80a0ab0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
            y0 += ystep;
 80a0aa4:	9a02      	ldr	r2, [sp, #8]
            err += dx;
 80a0aa6:	eb08 0703 	add.w	r7, r8, r3
        } else {
            writePixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) {
            y0 += ystep;
 80a0aaa:	4415      	add	r5, r2
 80a0aac:	b22d      	sxth	r5, r5
            err += dx;
 80a0aae:	b23f      	sxth	r7, r7
 80a0ab0:	3401      	adds	r4, #1
 80a0ab2:	b224      	sxth	r4, r4
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
 80a0ab4:	e7dd      	b.n	80a0a72 <_ZN12Adafruit_GFX9writeLineEsssst+0x76>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
 80a0ab6:	b005      	add	sp, #20
 80a0ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0abc <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 80a0abc:	b410      	push	{r4}
    drawPixel(x, y, color);
 80a0abe:	6804      	ldr	r4, [r0, #0]
 80a0ac0:	6924      	ldr	r4, [r4, #16]
 80a0ac2:	46a4      	mov	ip, r4
}
 80a0ac4:	bc10      	pop	{r4}
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    drawPixel(x, y, color);
 80a0ac6:	4760      	bx	ip

080a0ac8 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0ac8:	b430      	push	{r4, r5}
 80a0aca:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 80a0ace:	6804      	ldr	r4, [r0, #0]
 80a0ad0:	9502      	str	r5, [sp, #8]
 80a0ad2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a0ad4:	46a4      	mov	ip, r4
}
 80a0ad6:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 80a0ad8:	4760      	bx	ip

080a0ada <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0ada:	b430      	push	{r4, r5}
 80a0adc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 80a0ae0:	6804      	ldr	r4, [r0, #0]
 80a0ae2:	9502      	str	r5, [sp, #8]
 80a0ae4:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80a0ae6:	46a4      	mov	ip, r4
}
 80a0ae8:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 80a0aea:	4760      	bx	ip

080a0aec <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0aec:	b470      	push	{r4, r5, r6}
 80a0aee:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80a0af2:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 80a0af6:	6804      	ldr	r4, [r0, #0]
 80a0af8:	9604      	str	r6, [sp, #16]
 80a0afa:	9503      	str	r5, [sp, #12]
 80a0afc:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a0afe:	46a4      	mov	ip, r4
}
 80a0b00:	bc70      	pop	{r4, r5, r6}
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 80a0b02:	4760      	bx	ip

080a0b04 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    End a display-writing routine, overwrite in subclasses if startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite(){
 80a0b04:	4770      	bx	lr

080a0b06 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0b06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0b0a:	461c      	mov	r4, r3
 80a0b0c:	4616      	mov	r6, r2
 80a0b0e:	4605      	mov	r5, r0
 80a0b10:	460f      	mov	r7, r1
    startWrite();
 80a0b12:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 80a0b14:	3c01      	subs	r4, #1
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0b16:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a0b1a:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 80a0b1c:	4434      	add	r4, r6
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
 80a0b1e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 80a0b20:	b224      	sxth	r4, r4
 80a0b22:	682b      	ldr	r3, [r5, #0]
 80a0b24:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0b28:	9400      	str	r4, [sp, #0]
 80a0b2a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80a0b2c:	4628      	mov	r0, r5
 80a0b2e:	463b      	mov	r3, r7
 80a0b30:	4632      	mov	r2, r6
 80a0b32:	4639      	mov	r1, r7
 80a0b34:	47a0      	blx	r4
    endWrite();
 80a0b36:	4628      	mov	r0, r5
 80a0b38:	682b      	ldr	r3, [r5, #0]
 80a0b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0b3c:	b002      	add	sp, #8
 80a0b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
    writeLine(x, y, x, y+h-1, color);
    endWrite();
 80a0b42:	4718      	bx	r3

080a0b44 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0b44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0b48:	4617      	mov	r7, r2
 80a0b4a:	4604      	mov	r4, r0
 80a0b4c:	461d      	mov	r5, r3
 80a0b4e:	460e      	mov	r6, r1
    startWrite();
 80a0b50:	6803      	ldr	r3, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0b52:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a0b56:	695b      	ldr	r3, [r3, #20]
 80a0b58:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 80a0b5a:	e88d 0180 	stmia.w	sp, {r7, r8}
 80a0b5e:	6822      	ldr	r2, [r4, #0]
 80a0b60:	1e6b      	subs	r3, r5, #1
 80a0b62:	4433      	add	r3, r6
 80a0b64:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80a0b66:	4620      	mov	r0, r4
 80a0b68:	b21b      	sxth	r3, r3
 80a0b6a:	463a      	mov	r2, r7
 80a0b6c:	4631      	mov	r1, r6
 80a0b6e:	47a8      	blx	r5
    endWrite();
 80a0b70:	4620      	mov	r0, r4
 80a0b72:	6823      	ldr	r3, [r4, #0]
 80a0b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0b76:	b002      	add	sp, #8
 80a0b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    startWrite();
    writeLine(x, y, x+w-1, y, color);
    endWrite();
 80a0b7c:	4718      	bx	r3

080a0b7e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0b7e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0b82:	461e      	mov	r6, r3
    startWrite();
 80a0b84:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0b86:	460c      	mov	r4, r1
    startWrite();
 80a0b88:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0b8a:	4605      	mov	r5, r0
 80a0b8c:	4617      	mov	r7, r2
 80a0b8e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0b92:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    startWrite();
 80a0b96:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 80a0b98:	4426      	add	r6, r4
 80a0b9a:	42b4      	cmp	r4, r6
 80a0b9c:	682a      	ldr	r2, [r5, #0]
 80a0b9e:	da0b      	bge.n	80a0bb8 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 80a0ba0:	f8cd 9000 	str.w	r9, [sp]
 80a0ba4:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80a0ba8:	4621      	mov	r1, r4
 80a0baa:	4643      	mov	r3, r8
 80a0bac:	463a      	mov	r2, r7
 80a0bae:	4628      	mov	r0, r5
 80a0bb0:	3401      	adds	r4, #1
 80a0bb2:	47d0      	blx	sl
 80a0bb4:	b224      	sxth	r4, r4
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
 80a0bb6:	e7f0      	b.n	80a0b9a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
        writeFastVLine(i, y, h, color);
    }
    endWrite();
 80a0bb8:	4628      	mov	r0, r5
 80a0bba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
}
 80a0bbc:	b002      	add	sp, #8
 80a0bbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
        writeFastVLine(i, y, h, color);
    }
    endWrite();
 80a0bc2:	4718      	bx	r3

080a0bc4 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0bc4:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 80a0bc6:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0bca:	6804      	ldr	r4, [r0, #0]
 80a0bcc:	9101      	str	r1, [sp, #4]
 80a0bce:	9200      	str	r2, [sp, #0]
 80a0bd0:	2200      	movs	r2, #0
 80a0bd2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0bd6:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a0bd8:	4611      	mov	r1, r2
 80a0bda:	47a0      	blx	r4
}
 80a0bdc:	b002      	add	sp, #8
 80a0bde:	bd10      	pop	{r4, pc}

080a0be0 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 80a0be4:	4299      	cmp	r1, r3
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0be6:	4690      	mov	r8, r2
 80a0be8:	4607      	mov	r7, r0
 80a0bea:	460e      	mov	r6, r1
 80a0bec:	461c      	mov	r4, r3
 80a0bee:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80a0bf2:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 80a0bf6:	6802      	ldr	r2, [r0, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
 80a0bf8:	d10b      	bne.n	80a0c12 <_ZN12Adafruit_GFX8drawLineEsssst+0x32>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80a0bfa:	45a8      	cmp	r8, r5
 80a0bfc:	bfc2      	ittt	gt
 80a0bfe:	4643      	movgt	r3, r8
 80a0c00:	46a8      	movgt	r8, r5
 80a0c02:	461d      	movgt	r5, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a0c04:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a0c08:	1c6b      	adds	r3, r5, #1
 80a0c0a:	ebc8 0303 	rsb	r3, r8, r3
 80a0c0e:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80a0c10:	e00b      	b.n	80a0c2a <_ZN12Adafruit_GFX8drawLineEsssst+0x4a>
    } else if(y0 == y1){
 80a0c12:	45a8      	cmp	r8, r5
 80a0c14:	d112      	bne.n	80a0c3c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80a0c16:	4299      	cmp	r1, r3
 80a0c18:	bfc2      	ittt	gt
 80a0c1a:	460b      	movgt	r3, r1
 80a0c1c:	4626      	movgt	r6, r4
 80a0c1e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0c20:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a0c24:	1c63      	adds	r3, r4, #1
 80a0c26:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a0c28:	1b9b      	subs	r3, r3, r6
 80a0c2a:	4642      	mov	r2, r8
 80a0c2c:	4631      	mov	r1, r6
 80a0c2e:	4638      	mov	r0, r7
 80a0c30:	46a4      	mov	ip, r4
 80a0c32:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 80a0c34:	b003      	add	sp, #12
 80a0c36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0c3a:	4760      	bx	ip
    } else {
        startWrite();
 80a0c3c:	6953      	ldr	r3, [r2, #20]
 80a0c3e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 80a0c40:	683b      	ldr	r3, [r7, #0]
 80a0c42:	e88d 0220 	stmia.w	sp, {r5, r9}
 80a0c46:	4638      	mov	r0, r7
 80a0c48:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80a0c4a:	4642      	mov	r2, r8
 80a0c4c:	4623      	mov	r3, r4
 80a0c4e:	4631      	mov	r1, r6
 80a0c50:	47a8      	blx	r5
        endWrite();
 80a0c52:	4638      	mov	r0, r7
 80a0c54:	683b      	ldr	r3, [r7, #0]
 80a0c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }
}
 80a0c58:	b003      	add	sp, #12
 80a0c5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
 80a0c5e:	4718      	bx	r3

080a0c60 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0c60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0c64:	4604      	mov	r4, r0
 80a0c66:	460d      	mov	r5, r1
 80a0c68:	4617      	mov	r7, r2
 80a0c6a:	461e      	mov	r6, r3
    startWrite();
 80a0c6c:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0c6e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 80a0c72:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0c74:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 80a0c78:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 80a0c7a:	6823      	ldr	r3, [r4, #0]
 80a0c7c:	f8cd 8000 	str.w	r8, [sp]
 80a0c80:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a0c84:	463a      	mov	r2, r7
 80a0c86:	4633      	mov	r3, r6
 80a0c88:	4629      	mov	r1, r5
 80a0c8a:	4620      	mov	r0, r4
 80a0c8c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 80a0c8e:	6823      	ldr	r3, [r4, #0]
 80a0c90:	f109 32ff 	add.w	r2, r9, #4294967295
 80a0c94:	f8cd 8000 	str.w	r8, [sp]
 80a0c98:	443a      	add	r2, r7
 80a0c9a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a0c9e:	4629      	mov	r1, r5
 80a0ca0:	4633      	mov	r3, r6
 80a0ca2:	4620      	mov	r0, r4
 80a0ca4:	b212      	sxth	r2, r2
 80a0ca6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 80a0ca8:	6823      	ldr	r3, [r4, #0]
 80a0caa:	f8cd 8000 	str.w	r8, [sp]
 80a0cae:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a0cb2:	463a      	mov	r2, r7
 80a0cb4:	464b      	mov	r3, r9
 80a0cb6:	4629      	mov	r1, r5
 80a0cb8:	4620      	mov	r0, r4
 80a0cba:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 80a0cbc:	6823      	ldr	r3, [r4, #0]
 80a0cbe:	1e71      	subs	r1, r6, #1
 80a0cc0:	f8cd 8000 	str.w	r8, [sp]
 80a0cc4:	4429      	add	r1, r5
 80a0cc6:	4620      	mov	r0, r4
 80a0cc8:	6a1d      	ldr	r5, [r3, #32]
 80a0cca:	463a      	mov	r2, r7
 80a0ccc:	464b      	mov	r3, r9
 80a0cce:	b209      	sxth	r1, r1
 80a0cd0:	47a8      	blx	r5
    endWrite();
 80a0cd2:	4620      	mov	r0, r4
 80a0cd4:	6823      	ldr	r3, [r4, #0]
 80a0cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0cd8:	b002      	add	sp, #8
 80a0cda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    startWrite();
    writeFastHLine(x, y, w, color);
    writeFastHLine(x, y+h-1, w, color);
    writeFastVLine(x, y, h, color);
    writeFastVLine(x+w-1, y, h, color);
    endWrite();
 80a0cde:	4718      	bx	r3

080a0ce0 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
 80a0ce0:	4770      	bx	lr

080a0ce2 <_ZN12Adafruit_GFX11setRotationEh>:
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
 80a0ce2:	f001 0103 	and.w	r1, r1, #3
    switch(rotation) {
 80a0ce6:	2901      	cmp	r1, #1
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
 80a0ce8:	7681      	strb	r1, [r0, #26]
 80a0cea:	8903      	ldrh	r3, [r0, #8]
 80a0cec:	8942      	ldrh	r2, [r0, #10]
    switch(rotation) {
 80a0cee:	d004      	beq.n	80a0cfa <_ZN12Adafruit_GFX11setRotationEh+0x18>
 80a0cf0:	2903      	cmp	r1, #3
 80a0cf2:	d002      	beq.n	80a0cfa <_ZN12Adafruit_GFX11setRotationEh+0x18>
        case 0:
        case 2:
            _width  = WIDTH;
 80a0cf4:	8183      	strh	r3, [r0, #12]
            _height = HEIGHT;
 80a0cf6:	81c2      	strh	r2, [r0, #14]
 80a0cf8:	4770      	bx	lr
            break;
        case 1:
        case 3:
            _width  = HEIGHT;
 80a0cfa:	8182      	strh	r2, [r0, #12]
            _height = WIDTH;
 80a0cfc:	81c3      	strh	r3, [r0, #14]
 80a0cfe:	4770      	bx	lr

080a0d00 <_ZN12Adafruit_GFXC1Ess>:
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
 80a0d00:	8101      	strh	r1, [r0, #8]
{
    _width    = WIDTH;
 80a0d02:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize_x = textsize_y  = 1;
    textcolor = textbgcolor = 0xFFFF;
 80a0d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   @brief    Instatiate a GFX context for graphics! Can only be done by a superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a0d08:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 80a0d0a:	4d09      	ldr	r5, [pc, #36]	; (80a0d30 <_ZN12Adafruit_GFXC1Ess+0x30>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0d0c:	2400      	movs	r4, #0
 80a0d0e:	8142      	strh	r2, [r0, #10]
{
    _width    = WIDTH;
    _height   = HEIGHT;
 80a0d10:	81c2      	strh	r2, [r0, #14]
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize_x = textsize_y  = 1;
 80a0d12:	2201      	movs	r2, #1
 80a0d14:	6044      	str	r4, [r0, #4]
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
 80a0d16:	6005      	str	r5, [r0, #0]
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
 80a0d18:	7684      	strb	r4, [r0, #26]
    cursor_y  = cursor_x    = 0;
 80a0d1a:	8204      	strh	r4, [r0, #16]
 80a0d1c:	8244      	strh	r4, [r0, #18]
    textsize_x = textsize_y  = 1;
 80a0d1e:	7642      	strb	r2, [r0, #25]
 80a0d20:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
 80a0d22:	82c1      	strh	r1, [r0, #22]
 80a0d24:	8281      	strh	r1, [r0, #20]
    wrap      = true;
 80a0d26:	76c2      	strb	r2, [r0, #27]
    _cp437    = false;
 80a0d28:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 80a0d2a:	6204      	str	r4, [r0, #32]
}
 80a0d2c:	bd30      	pop	{r4, r5, pc}
 80a0d2e:	bf00      	nop
 80a0d30:	080a4c78 	.word	0x080a4c78

080a0d34 <_ZN12Adafruit_GFX10drawCircleEssst>:
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
 80a0d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0d38:	4604      	mov	r4, r0
 80a0d3a:	4617      	mov	r7, r2
 80a0d3c:	4688      	mov	r8, r1
 80a0d3e:	b08b      	sub	sp, #44	; 0x2c
 80a0d40:	9303      	str	r3, [sp, #12]
#if defined(ESP8266)
    yield();
#endif
    int16_t f = 1 - r;
 80a0d42:	f8bd 600c 	ldrh.w	r6, [sp, #12]
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
 80a0d46:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
#if defined(ESP8266)
    yield();
#endif
    int16_t f = 1 - r;
 80a0d4a:	f1c6 0301 	rsb	r3, r6, #1
 80a0d4e:	b21b      	sxth	r3, r3
 80a0d50:	9302      	str	r3, [sp, #8]
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 80a0d52:	ebc6 33c6 	rsb	r3, r6, r6, lsl #15
 80a0d56:	005b      	lsls	r3, r3, #1
 80a0d58:	b21b      	sxth	r3, r3
 80a0d5a:	9306      	str	r3, [sp, #24]
    int16_t x = 0;
    int16_t y = r;

    startWrite();
 80a0d5c:	6803      	ldr	r3, [r0, #0]
    writePixel(x0  , y0+r, color);
 80a0d5e:	fa1f fb87 	uxth.w	fp, r7
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    startWrite();
 80a0d62:	695b      	ldr	r3, [r3, #20]
 80a0d64:	4798      	blx	r3
    writePixel(x0  , y0+r, color);
 80a0d66:	6823      	ldr	r3, [r4, #0]
 80a0d68:	eb06 020b 	add.w	r2, r6, fp
 80a0d6c:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80a0d70:	4641      	mov	r1, r8
 80a0d72:	462b      	mov	r3, r5
 80a0d74:	b212      	sxth	r2, r2
 80a0d76:	4620      	mov	r0, r4
 80a0d78:	47c8      	blx	r9
    writePixel(x0  , y0-r, color);
 80a0d7a:	6823      	ldr	r3, [r4, #0]
 80a0d7c:	ebc6 020b 	rsb	r2, r6, fp
 80a0d80:	4641      	mov	r1, r8
 80a0d82:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80a0d86:	b212      	sxth	r2, r2
 80a0d88:	462b      	mov	r3, r5
 80a0d8a:	4620      	mov	r0, r4
 80a0d8c:	47c8      	blx	r9
    writePixel(x0+r, y0  , color);
 80a0d8e:	fa1f f388 	uxth.w	r3, r8
 80a0d92:	18f1      	adds	r1, r6, r3
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	6823      	ldr	r3, [r4, #0]
 80a0d98:	463a      	mov	r2, r7
 80a0d9a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80a0d9e:	b209      	sxth	r1, r1
 80a0da0:	462b      	mov	r3, r5
 80a0da2:	4620      	mov	r0, r4
 80a0da4:	47c0      	blx	r8
    writePixel(x0-r, y0  , color);
 80a0da6:	9b01      	ldr	r3, [sp, #4]
 80a0da8:	463a      	mov	r2, r7
 80a0daa:	1b99      	subs	r1, r3, r6
 80a0dac:	6823      	ldr	r3, [r4, #0]
 80a0dae:	b209      	sxth	r1, r1
 80a0db0:	699e      	ldr	r6, [r3, #24]
 80a0db2:	4620      	mov	r0, r4
 80a0db4:	462b      	mov	r3, r5
 80a0db6:	47b0      	blx	r6
 80a0db8:	2300      	movs	r3, #0
 80a0dba:	9305      	str	r3, [sp, #20]
 80a0dbc:	9b01      	ldr	r3, [sp, #4]
 80a0dbe:	3301      	adds	r3, #1
 80a0dc0:	9307      	str	r3, [sp, #28]
 80a0dc2:	9b01      	ldr	r3, [sp, #4]
 80a0dc4:	3b01      	subs	r3, #1
 80a0dc6:	9308      	str	r3, [sp, #32]
 80a0dc8:	f10b 0301 	add.w	r3, fp, #1
 80a0dcc:	9309      	str	r3, [sp, #36]	; 0x24

    while (x<y) {
 80a0dce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80a0dd2:	9a03      	ldr	r2, [sp, #12]
 80a0dd4:	4293      	cmp	r3, r2
 80a0dd6:	f280 8084 	bge.w	80a0ee2 <_ZN12Adafruit_GFX10drawCircleEssst+0x1ae>
        if (f >= 0) {
 80a0dda:	9b02      	ldr	r3, [sp, #8]
 80a0ddc:	2b00      	cmp	r3, #0
 80a0dde:	db0b      	blt.n	80a0df8 <_ZN12Adafruit_GFX10drawCircleEssst+0xc4>
            y--;
 80a0de0:	1e53      	subs	r3, r2, #1
 80a0de2:	b21b      	sxth	r3, r3
 80a0de4:	9303      	str	r3, [sp, #12]
            ddF_y += 2;
 80a0de6:	9b06      	ldr	r3, [sp, #24]
 80a0de8:	3302      	adds	r3, #2
 80a0dea:	b29b      	uxth	r3, r3
 80a0dec:	b21a      	sxth	r2, r3
 80a0dee:	9206      	str	r2, [sp, #24]
            f += ddF_y;
 80a0df0:	9a02      	ldr	r2, [sp, #8]
 80a0df2:	4413      	add	r3, r2
 80a0df4:	b21b      	sxth	r3, r3
 80a0df6:	9302      	str	r3, [sp, #8]
 80a0df8:	f8bd 7014 	ldrh.w	r7, [sp, #20]
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 80a0dfc:	9b02      	ldr	r3, [sp, #8]

        writePixel(x0 + x, y0 + y, color);
 80a0dfe:	4620      	mov	r0, r4
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 80a0e00:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80a0e04:	3303      	adds	r3, #3
 80a0e06:	b21b      	sxth	r3, r3
 80a0e08:	9302      	str	r3, [sp, #8]
 80a0e0a:	9b07      	ldr	r3, [sp, #28]
 80a0e0c:	eb07 0a03 	add.w	sl, r7, r3

        writePixel(x0 + x, y0 + y, color);
 80a0e10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80a0e14:	fa0f fa8a 	sxth.w	sl, sl
 80a0e18:	9304      	str	r3, [sp, #16]
 80a0e1a:	eb0b 0903 	add.w	r9, fp, r3
 80a0e1e:	6823      	ldr	r3, [r4, #0]
 80a0e20:	fa0f f989 	sxth.w	r9, r9
 80a0e24:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80a0e28:	464a      	mov	r2, r9
 80a0e2a:	4651      	mov	r1, sl
 80a0e2c:	462b      	mov	r3, r5
 80a0e2e:	47c0      	blx	r8
 80a0e30:	9b08      	ldr	r3, [sp, #32]
        writePixel(x0 - x, y0 + y, color);
 80a0e32:	464a      	mov	r2, r9
 80a0e34:	ebc7 0803 	rsb	r8, r7, r3
 80a0e38:	6823      	ldr	r3, [r4, #0]
 80a0e3a:	fa0f f888 	sxth.w	r8, r8
 80a0e3e:	699b      	ldr	r3, [r3, #24]
 80a0e40:	4641      	mov	r1, r8
 80a0e42:	461e      	mov	r6, r3
 80a0e44:	4620      	mov	r0, r4
 80a0e46:	462b      	mov	r3, r5
 80a0e48:	47b0      	blx	r6
        writePixel(x0 + x, y0 - y, color);
 80a0e4a:	9b04      	ldr	r3, [sp, #16]
 80a0e4c:	4651      	mov	r1, sl
 80a0e4e:	ebc3 090b 	rsb	r9, r3, fp
 80a0e52:	6823      	ldr	r3, [r4, #0]
 80a0e54:	fa0f f989 	sxth.w	r9, r9
 80a0e58:	699b      	ldr	r3, [r3, #24]
 80a0e5a:	464a      	mov	r2, r9
 80a0e5c:	461e      	mov	r6, r3
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	462b      	mov	r3, r5
 80a0e62:	47b0      	blx	r6
        writePixel(x0 - x, y0 - y, color);
 80a0e64:	6823      	ldr	r3, [r4, #0]
 80a0e66:	464a      	mov	r2, r9
 80a0e68:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80a0e6c:	4641      	mov	r1, r8
 80a0e6e:	462b      	mov	r3, r5
 80a0e70:	4620      	mov	r0, r4
 80a0e72:	47d0      	blx	sl
        writePixel(x0 + y, y0 + x, color);
 80a0e74:	9b01      	ldr	r3, [sp, #4]
 80a0e76:	9a04      	ldr	r2, [sp, #16]
 80a0e78:	4620      	mov	r0, r4
 80a0e7a:	eb03 0802 	add.w	r8, r3, r2
 80a0e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0e80:	fa0f f888 	sxth.w	r8, r8
 80a0e84:	eb07 0903 	add.w	r9, r7, r3
 80a0e88:	6823      	ldr	r3, [r4, #0]
 80a0e8a:	fa0f f989 	sxth.w	r9, r9
 80a0e8e:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80a0e92:	464a      	mov	r2, r9
 80a0e94:	4641      	mov	r1, r8
 80a0e96:	462b      	mov	r3, r5
 80a0e98:	47d0      	blx	sl
        writePixel(x0 - y, y0 + x, color);
 80a0e9a:	9b01      	ldr	r3, [sp, #4]
 80a0e9c:	9a04      	ldr	r2, [sp, #16]
 80a0e9e:	4620      	mov	r0, r4
 80a0ea0:	1a9e      	subs	r6, r3, r2
 80a0ea2:	6823      	ldr	r3, [r4, #0]
 80a0ea4:	b236      	sxth	r6, r6
 80a0ea6:	464a      	mov	r2, r9
 80a0ea8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80a0eac:	4631      	mov	r1, r6
 80a0eae:	462b      	mov	r3, r5
 80a0eb0:	47d0      	blx	sl
 80a0eb2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80a0eb6:	1bdf      	subs	r7, r3, r7
        writePixel(x0 + y, y0 - x, color);
 80a0eb8:	6823      	ldr	r3, [r4, #0]
 80a0eba:	b23f      	sxth	r7, r7
 80a0ebc:	4641      	mov	r1, r8
 80a0ebe:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80a0ec2:	463a      	mov	r2, r7
 80a0ec4:	462b      	mov	r3, r5
 80a0ec6:	4620      	mov	r0, r4
 80a0ec8:	47c8      	blx	r9
        writePixel(x0 - y, y0 - x, color);
 80a0eca:	6823      	ldr	r3, [r4, #0]
 80a0ecc:	463a      	mov	r2, r7
 80a0ece:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80a0ed2:	4631      	mov	r1, r6
 80a0ed4:	462b      	mov	r3, r5
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	47c0      	blx	r8
 80a0eda:	9b05      	ldr	r3, [sp, #20]
 80a0edc:	3301      	adds	r3, #1
 80a0ede:	9305      	str	r3, [sp, #20]
    writePixel(x0  , y0+r, color);
    writePixel(x0  , y0-r, color);
    writePixel(x0+r, y0  , color);
    writePixel(x0-r, y0  , color);

    while (x<y) {
 80a0ee0:	e775      	b.n	80a0dce <_ZN12Adafruit_GFX10drawCircleEssst+0x9a>
        writePixel(x0 + y, y0 + x, color);
        writePixel(x0 - y, y0 + x, color);
        writePixel(x0 + y, y0 - x, color);
        writePixel(x0 - y, y0 - x, color);
    }
    endWrite();
 80a0ee2:	4620      	mov	r0, r4
 80a0ee4:	6823      	ldr	r3, [r4, #0]
 80a0ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0ee8:	b00b      	add	sp, #44	; 0x2c
 80a0eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        writePixel(x0 + y, y0 + x, color);
        writePixel(x0 - y, y0 + x, color);
        writePixel(x0 + y, y0 - x, color);
        writePixel(x0 - y, y0 - x, color);
    }
    endWrite();
 80a0eee:	4718      	bx	r3

080a0ef0 <_ZN12Adafruit_GFX10drawBitmapEssPhsst>:
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
 80a0ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ef4:	b089      	sub	sp, #36	; 0x24
 80a0ef6:	469a      	mov	sl, r3
 80a0ef8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80a0efc:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 80a0f00:	9304      	str	r3, [sp, #16]
 80a0f02:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80a0f06:	9203      	str	r2, [sp, #12]
 80a0f08:	9305      	str	r3, [sp, #20]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
 80a0f0a:	6803      	ldr	r3, [r0, #0]
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
 80a0f0c:	9102      	str	r1, [sp, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
 80a0f0e:	695b      	ldr	r3, [r3, #20]
 80a0f10:	2600      	movs	r6, #0
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
 80a0f12:	4605      	mov	r5, r0

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
 80a0f14:	4798      	blx	r3
 80a0f16:	2308      	movs	r3, #8
 80a0f18:	f109 0207 	add.w	r2, r9, #7
 80a0f1c:	fb92 fbf3 	sdiv	fp, r2, r3
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;
 80a0f20:	4634      	mov	r4, r6

    startWrite();
 80a0f22:	9600      	str	r6, [sp, #0]
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a0f24:	9307      	str	r3, [sp, #28]
 80a0f26:	9a00      	ldr	r2, [sp, #0]
 80a0f28:	9b03      	ldr	r3, [sp, #12]
 80a0f2a:	4413      	add	r3, r2
 80a0f2c:	b21b      	sxth	r3, r3
 80a0f2e:	9301      	str	r3, [sp, #4]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
 80a0f30:	9a04      	ldr	r2, [sp, #16]
 80a0f32:	f9bd 3000 	ldrsh.w	r3, [sp]
 80a0f36:	429a      	cmp	r2, r3
 80a0f38:	dd28      	ble.n	80a0f8c <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x9c>
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a0f3a:	eb0a 0306 	add.w	r3, sl, r6

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
 80a0f3e:	f04f 0800 	mov.w	r8, #0
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a0f42:	9306      	str	r3, [sp, #24]
 80a0f44:	fa0f f388 	sxth.w	r3, r8
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
 80a0f48:	454b      	cmp	r3, r9
 80a0f4a:	da1a      	bge.n	80a0f82 <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x92>
            if(i & 7) byte <<= 1;
 80a0f4c:	fa1f f188 	uxth.w	r1, r8
 80a0f50:	074a      	lsls	r2, r1, #29
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a0f52:	bf09      	itett	eq
 80a0f54:	9a07      	ldreq	r2, [sp, #28]
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
 80a0f56:	0064      	lslne	r4, r4, #1
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a0f58:	fb93 f3f2 	sdiveq	r3, r3, r2
 80a0f5c:	9a06      	ldreq	r2, [sp, #24]
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
 80a0f5e:	bf14      	ite	ne
 80a0f60:	b2e4      	uxtbne	r4, r4
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a0f62:	5cd4      	ldrbeq	r4, [r2, r3]
            if(byte & 0x80) writePixel(x+i, y, color);
 80a0f64:	0623      	lsls	r3, r4, #24
 80a0f66:	d509      	bpl.n	80a0f7c <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x8c>
 80a0f68:	9b02      	ldr	r3, [sp, #8]
 80a0f6a:	9a01      	ldr	r2, [sp, #4]
 80a0f6c:	4419      	add	r1, r3
 80a0f6e:	682b      	ldr	r3, [r5, #0]
 80a0f70:	b209      	sxth	r1, r1
 80a0f72:	699b      	ldr	r3, [r3, #24]
 80a0f74:	4628      	mov	r0, r5
 80a0f76:	461f      	mov	r7, r3
 80a0f78:	9b05      	ldr	r3, [sp, #20]
 80a0f7a:	47b8      	blx	r7
 80a0f7c:	f108 0801 	add.w	r8, r8, #1
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
 80a0f80:	e7e0      	b.n	80a0f44 <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x54>
 80a0f82:	9b00      	ldr	r3, [sp, #0]
 80a0f84:	445e      	add	r6, fp
 80a0f86:	3301      	adds	r3, #1
 80a0f88:	9300      	str	r3, [sp, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
 80a0f8a:	e7cc      	b.n	80a0f26 <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x36>
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
            if(byte & 0x80) writePixel(x+i, y, color);
        }
    }
    endWrite();
 80a0f8c:	4628      	mov	r0, r5
 80a0f8e:	682b      	ldr	r3, [r5, #0]
 80a0f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0f92:	b009      	add	sp, #36	; 0x24
 80a0f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
            if(byte & 0x80) writePixel(x+i, y, color);
        }
    }
    endWrite();
 80a0f98:	4718      	bx	r3

080a0f9a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
 80a0f9a:	b470      	push	{r4, r5, r6}
 80a0f9c:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 80a0fa0:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 80a0fa4:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80a0fa8:	9504      	str	r5, [sp, #16]
 80a0faa:	9605      	str	r6, [sp, #20]
 80a0fac:	9403      	str	r4, [sp, #12]
 80a0fae:	bc70      	pop	{r4, r5, r6}
 80a0fb0:	f7ff bf9e 	b.w	80a0ef0 <_ZN12Adafruit_GFX10drawBitmapEssPhsst>

080a0fb4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a0fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fb8:	b091      	sub	sp, #68	; 0x44
 80a0fba:	4617      	mov	r7, r2
 80a0fbc:	4698      	mov	r8, r3

    if(!gfxFont) { // 'Classic' built-in font
 80a0fbe:	6a02      	ldr	r2, [r0, #32]
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a0fc0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80a0fc4:	4604      	mov	r4, r0
 80a0fc6:	9103      	str	r1, [sp, #12]
 80a0fc8:	9302      	str	r3, [sp, #8]
 80a0fca:	f8bd 906c 	ldrh.w	r9, [sp, #108]	; 0x6c
 80a0fce:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 80a0fd2:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74

    if(!gfxFont) { // 'Classic' built-in font
 80a0fd6:	2a00      	cmp	r2, #0
 80a0fd8:	f040 80b4 	bne.w	80a1144 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x190>

        if((x >= _width)            || // Clip right
 80a0fdc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0fe0:	428b      	cmp	r3, r1
 80a0fe2:	f340 813b 	ble.w	80a125c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
 80a0fe6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a0fea:	42bb      	cmp	r3, r7
 80a0fec:	f340 8136 	ble.w	80a125c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
           (y >= _height)           || // Clip bottom
 80a0ff0:	2306      	movs	r3, #6
 80a0ff2:	fb03 1306 	mla	r3, r3, r6, r1
 80a0ff6:	2b00      	cmp	r3, #0
 80a0ff8:	f340 8130 	ble.w	80a125c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a0ffc:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80a1000:	2b00      	cmp	r3, #0
 80a1002:	f340 812b 	ble.w	80a125c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
           ((y + 8 * size_y - 1) < 0))   // Clip top
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80a1006:	7f03      	ldrb	r3, [r0, #28]
 80a1008:	b933      	cbnz	r3, 80a1018 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x64>
 80a100a:	f1b8 0faf 	cmp.w	r8, #175	; 0xaf
 80a100e:	bf84      	itt	hi
 80a1010:	f108 0801 	addhi.w	r8, r8, #1
 80a1014:	fa5f f888 	uxtbhi.w	r8, r8

        startWrite();
 80a1018:	6823      	ldr	r3, [r4, #0]
 80a101a:	4620      	mov	r0, r4
 80a101c:	695b      	ldr	r3, [r3, #20]
 80a101e:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a1020:	2305      	movs	r3, #5
 80a1022:	9308      	str	r3, [sp, #32]
 80a1024:	4b8f      	ldr	r3, [pc, #572]	; (80a1264 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b0>)
 80a1026:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80a102a:	4443      	add	r3, r8
 80a102c:	930c      	str	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a102e:	b233      	sxth	r3, r6
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a1030:	f04f 0a00 	mov.w	sl, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a1034:	930b      	str	r3, [sp, #44]	; 0x2c
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a1036:	b2b2      	uxth	r2, r6
 80a1038:	9206      	str	r2, [sp, #24]

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a103a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a103c:	f8bd 200c 	ldrh.w	r2, [sp, #12]

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a1040:	f813 300a 	ldrb.w	r3, [r3, sl]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a1044:	9204      	str	r2, [sp, #16]
 80a1046:	9904      	ldr	r1, [sp, #16]
 80a1048:	9a06      	ldr	r2, [sp, #24]

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a104a:	9305      	str	r3, [sp, #20]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a104c:	fa1f f38a 	uxth.w	r3, sl
 80a1050:	fb02 1203 	mla	r2, r2, r3, r1
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
 80a1054:	440b      	add	r3, r1
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a1056:	b212      	sxth	r2, r2
 80a1058:	9207      	str	r2, [sp, #28]
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
 80a105a:	b21b      	sxth	r3, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a105c:	2208      	movs	r2, #8
 80a105e:	9209      	str	r2, [sp, #36]	; 0x24
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a1060:	f04f 0800 	mov.w	r8, #0
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
 80a1064:	930a      	str	r3, [sp, #40]	; 0x28

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
 80a1066:	9b05      	ldr	r3, [sp, #20]
 80a1068:	07da      	lsls	r2, r3, #31
 80a106a:	d510      	bpl.n	80a108e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xda>
                    if(size_x == 1 && size_y == 1)
 80a106c:	2e01      	cmp	r6, #1
 80a106e:	d108      	bne.n	80a1082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xce>
 80a1070:	2d01      	cmp	r5, #1
 80a1072:	d106      	bne.n	80a1082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xce>
                        writePixel(x+i, y+j, color);
 80a1074:	6823      	ldr	r3, [r4, #0]
 80a1076:	eb08 0207 	add.w	r2, r8, r7
 80a107a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a107e:	9b02      	ldr	r3, [sp, #8]
 80a1080:	e012      	b.n	80a10a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xf4>
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a1082:	9902      	ldr	r1, [sp, #8]
 80a1084:	fb08 7205 	mla	r2, r8, r5, r7
 80a1088:	6823      	ldr	r3, [r4, #0]
 80a108a:	9101      	str	r1, [sp, #4]
 80a108c:	e016      	b.n	80a10bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x108>
                } else if(bg != color) {
 80a108e:	9b02      	ldr	r3, [sp, #8]
 80a1090:	454b      	cmp	r3, r9
 80a1092:	d01b      	beq.n	80a10cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x118>
                    if(size_x == 1 && size_y == 1)
 80a1094:	2e01      	cmp	r6, #1
 80a1096:	d10c      	bne.n	80a10b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xfe>
 80a1098:	2d01      	cmp	r5, #1
 80a109a:	d10a      	bne.n	80a10b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xfe>
                        writePixel(x+i, y+j, bg);
 80a109c:	6823      	ldr	r3, [r4, #0]
 80a109e:	eb08 0207 	add.w	r2, r8, r7
 80a10a2:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a10a6:	464b      	mov	r3, r9
 80a10a8:	b212      	sxth	r2, r2
 80a10aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	47d8      	blx	fp
 80a10b0:	e00c      	b.n	80a10cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x118>
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a10b2:	fb08 7205 	mla	r2, r8, r5, r7
 80a10b6:	6823      	ldr	r3, [r4, #0]
 80a10b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80a10bc:	9500      	str	r5, [sp, #0]
 80a10be:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a10c2:	b212      	sxth	r2, r2
 80a10c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a10c6:	9907      	ldr	r1, [sp, #28]
 80a10c8:	4620      	mov	r0, r4
 80a10ca:	47d8      	blx	fp
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a10cc:	9b05      	ldr	r3, [sp, #20]
 80a10ce:	f108 0801 	add.w	r8, r8, #1
 80a10d2:	085b      	lsrs	r3, r3, #1
 80a10d4:	9305      	str	r3, [sp, #20]
 80a10d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a10d8:	fa4f f888 	sxtb.w	r8, r8
 80a10dc:	3b01      	subs	r3, #1
 80a10de:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a10e2:	9309      	str	r3, [sp, #36]	; 0x24
 80a10e4:	d1bf      	bne.n	80a1066 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb2>
 80a10e6:	9b08      	ldr	r3, [sp, #32]
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a10e8:	f10a 0a01 	add.w	sl, sl, #1
 80a10ec:	3b01      	subs	r3, #1
 80a10ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a10f2:	fa4f fa8a 	sxtb.w	sl, sl
 80a10f6:	9308      	str	r3, [sp, #32]
 80a10f8:	d19d      	bne.n	80a1036 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
 80a10fa:	9b02      	ldr	r3, [sp, #8]
 80a10fc:	454b      	cmp	r3, r9
 80a10fe:	f000 80a6 	beq.w	80a124e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 80a1102:	2e01      	cmp	r6, #1
 80a1104:	6823      	ldr	r3, [r4, #0]
 80a1106:	d10c      	bne.n	80a1122 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a1108:	2d01      	cmp	r5, #1
 80a110a:	d10a      	bne.n	80a1122 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a110c:	9904      	ldr	r1, [sp, #16]
 80a110e:	f8cd 9000 	str.w	r9, [sp]
 80a1112:	3105      	adds	r1, #5
 80a1114:	6a1d      	ldr	r5, [r3, #32]
 80a1116:	463a      	mov	r2, r7
 80a1118:	2308      	movs	r3, #8
 80a111a:	b209      	sxth	r1, r1
 80a111c:	4620      	mov	r0, r4
 80a111e:	47a8      	blx	r5
 80a1120:	e095      	b.n	80a124e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 80a1122:	9a06      	ldr	r2, [sp, #24]
 80a1124:	00ed      	lsls	r5, r5, #3
 80a1126:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80a112a:	9a04      	ldr	r2, [sp, #16]
 80a112c:	f8cd 9004 	str.w	r9, [sp, #4]
 80a1130:	440a      	add	r2, r1
 80a1132:	4611      	mov	r1, r2
 80a1134:	9500      	str	r5, [sp, #0]
 80a1136:	69dd      	ldr	r5, [r3, #28]
 80a1138:	463a      	mov	r2, r7
 80a113a:	4633      	mov	r3, r6
 80a113c:	b209      	sxth	r1, r1
 80a113e:	4620      	mov	r0, r4
 80a1140:	47a8      	blx	r5
 80a1142:	e084      	b.n	80a124e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
#else
    // expression in __AVR__ section may generate "dereferencing type-punned pointer will break strict-aliasing rules" warning
    // In fact, on other platforms (such as STM32) there is no need to do this pointer magic as program memory may be read in a usual way
    // So expression may be simplified
    return gfxFont->glyph + c;
 80a1144:	7a13      	ldrb	r3, [r2, #8]
 80a1146:	6851      	ldr	r1, [r2, #4]
 80a1148:	ebc3 0808 	rsb	r8, r3, r8
 80a114c:	6812      	ldr	r2, [r2, #0]
 80a114e:	fa5f f888 	uxtb.w	r8, r8
 80a1152:	920d      	str	r2, [sp, #52]	; 0x34

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a1154:	f831 2038 	ldrh.w	r2, [r1, r8, lsl #3]
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
#else
    // expression in __AVR__ section may generate "dereferencing type-punned pointer will break strict-aliasing rules" warning
    // In fact, on other platforms (such as STM32) there is no need to do this pointer magic as program memory may be read in a usual way
    // So expression may be simplified
    return gfxFont->glyph + c;
 80a1158:	eb01 03c8 	add.w	r3, r1, r8, lsl #3

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a115c:	9204      	str	r2, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a115e:	789a      	ldrb	r2, [r3, #2]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size_x > 1 || size_y > 1) {
 80a1160:	2e01      	cmp	r6, #1
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a1162:	9207      	str	r2, [sp, #28]
                 h  = pgm_read_byte(&glyph->height);
 80a1164:	78da      	ldrb	r2, [r3, #3]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
 80a1166:	f993 b006 	ldrsb.w	fp, [r3, #6]
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
 80a116a:	920a      	str	r2, [sp, #40]	; 0x28
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80a116c:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80a1170:	9208      	str	r2, [sp, #32]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size_x > 1 || size_y > 1) {
 80a1172:	d801      	bhi.n	80a1178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1c4>
 80a1174:	2d01      	cmp	r5, #1
 80a1176:	d906      	bls.n	80a1186 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d2>
            xo16 = xo;
 80a1178:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80a117c:	9306      	str	r3, [sp, #24]
            yo16 = yo;
 80a117e:	fa0f f38b 	sxth.w	r3, fp
 80a1182:	9305      	str	r3, [sp, #20]
 80a1184:	e002      	b.n	80a118c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d8>
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
 80a1186:	2300      	movs	r3, #0
 80a1188:	9305      	str	r3, [sp, #20]
 80a118a:	9306      	str	r3, [sp, #24]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
 80a118c:	f04f 0800 	mov.w	r8, #0
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
 80a1190:	46c2      	mov	sl, r8
 80a1192:	46c1      	mov	r9, r8
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
 80a1194:	6823      	ldr	r3, [r4, #0]
 80a1196:	4620      	mov	r0, r4
 80a1198:	695b      	ldr	r3, [r3, #20]
 80a119a:	4798      	blx	r3
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a119c:	b2bb      	uxth	r3, r7
 80a119e:	9309      	str	r3, [sp, #36]	; 0x24
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a11a0:	445b      	add	r3, fp
 80a11a2:	930f      	str	r3, [sp, #60]	; 0x3c
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
 80a11a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a11a6:	fa5f f388 	uxtb.w	r3, r8
 80a11aa:	4293      	cmp	r3, r2
 80a11ac:	d24f      	bcs.n	80a124e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a11ae:	9a05      	ldr	r2, [sp, #20]
 80a11b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a11b2:	4442      	add	r2, r8
 80a11b4:	fb02 1205 	mla	r2, r2, r5, r1
 80a11b8:	b212      	sxth	r2, r2
 80a11ba:	920c      	str	r2, [sp, #48]	; 0x30
 80a11bc:	4652      	mov	r2, sl
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a11be:	990f      	ldr	r1, [sp, #60]	; 0x3c
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a11c0:	2700      	movs	r7, #0
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a11c2:	440b      	add	r3, r1
 80a11c4:	b21b      	sxth	r3, r3
 80a11c6:	930e      	str	r3, [sp, #56]	; 0x38
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a11c8:	9b07      	ldr	r3, [sp, #28]
 80a11ca:	429f      	cmp	r7, r3
 80a11cc:	d238      	bcs.n	80a1240 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x28c>
                if(!(bit++ & 7)) {
 80a11ce:	1c53      	adds	r3, r2, #1
 80a11d0:	b2db      	uxtb	r3, r3
 80a11d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80a11d4:	0753      	lsls	r3, r2, #29
 80a11d6:	d107      	bne.n	80a11e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80a11d8:	9b04      	ldr	r3, [sp, #16]
 80a11da:	9904      	ldr	r1, [sp, #16]
 80a11dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a11de:	3301      	adds	r3, #1
 80a11e0:	b29b      	uxth	r3, r3
 80a11e2:	f812 9001 	ldrb.w	r9, [r2, r1]
 80a11e6:	9304      	str	r3, [sp, #16]
                }
                if(bits & 0x80) {
 80a11e8:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a11ec:	d020      	beq.n	80a1230 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27c>
                    if(size_x == 1 && size_y == 1) {
 80a11ee:	2e01      	cmp	r6, #1
 80a11f0:	d10e      	bne.n	80a1210 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x25c>
 80a11f2:	2d01      	cmp	r5, #1
 80a11f4:	d10c      	bne.n	80a1210 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x25c>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a11f6:	9b08      	ldr	r3, [sp, #32]
 80a11f8:	9a03      	ldr	r2, [sp, #12]
 80a11fa:	4620      	mov	r0, r4
 80a11fc:	1899      	adds	r1, r3, r2
 80a11fe:	6823      	ldr	r3, [r4, #0]
 80a1200:	4439      	add	r1, r7
 80a1202:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a1206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a1208:	9b02      	ldr	r3, [sp, #8]
 80a120a:	b209      	sxth	r1, r1
 80a120c:	47d8      	blx	fp
 80a120e:	e00f      	b.n	80a1230 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27c>
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
                          size_x, size_y, color);
 80a1210:	9b06      	ldr	r3, [sp, #24]
 80a1212:	9a02      	ldr	r2, [sp, #8]
 80a1214:	19d9      	adds	r1, r3, r7
 80a1216:	9b03      	ldr	r3, [sp, #12]
 80a1218:	9201      	str	r2, [sp, #4]
 80a121a:	fb01 3106 	mla	r1, r1, r6, r3
 80a121e:	6823      	ldr	r3, [r4, #0]
 80a1220:	9500      	str	r5, [sp, #0]
 80a1222:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a1226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a1228:	4633      	mov	r3, r6
 80a122a:	b209      	sxth	r1, r1
 80a122c:	4620      	mov	r0, r4
 80a122e:	47d8      	blx	fp
                    }
                }
                bits <<= 1;
 80a1230:	ea4f 0949 	mov.w	r9, r9, lsl #1
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a1234:	3701      	adds	r7, #1
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
                          size_x, size_y, color);
                    }
                }
                bits <<= 1;
 80a1236:	fa5f f989 	uxtb.w	r9, r9
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a123a:	b2ff      	uxtb	r7, r7
                if(!(bit++ & 7)) {
 80a123c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a123e:	e7c3      	b.n	80a11c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x214>
 80a1240:	9b07      	ldr	r3, [sp, #28]
 80a1242:	f108 0801 	add.w	r8, r8, #1
 80a1246:	449a      	add	sl, r3
 80a1248:	fa5f fa8a 	uxtb.w	sl, sl
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
 80a124c:	e7aa      	b.n	80a11a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f0>
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
 80a124e:	4620      	mov	r0, r4
 80a1250:	6823      	ldr	r3, [r4, #0]
 80a1252:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    } // End classic vs custom font
}
 80a1254:	b011      	add	sp, #68	; 0x44
 80a1256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
 80a125a:	4718      	bx	r3

    } // End classic vs custom font
}
 80a125c:	b011      	add	sp, #68	; 0x44
 80a125e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1262:	bf00      	nop
 80a1264:	080a4cc8 	.word	0x080a4cc8

080a1268 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 80a1268:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 80a126a:	6a02      	ldr	r2, [r0, #32]
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 80a126c:	b085      	sub	sp, #20
 80a126e:	4604      	mov	r4, r0
 80a1270:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
 80a1272:	2a00      	cmp	r2, #0
 80a1274:	d12f      	bne.n	80a12d6 <_ZN12Adafruit_GFX5writeEh+0x6e>

        if(c == '\n') {                        // Newline?
 80a1276:	290a      	cmp	r1, #10
 80a1278:	d105      	bne.n	80a1286 <_ZN12Adafruit_GFX5writeEh+0x1e>
            cursor_x  = 0;                     // Reset x to zero,
 80a127a:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 80a127c:	8a43      	ldrh	r3, [r0, #18]
 80a127e:	7e42      	ldrb	r2, [r0, #25]
 80a1280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a1284:	e030      	b.n	80a12e8 <_ZN12Adafruit_GFX5writeEh+0x80>
        } else if(c != '\r') {                 // Ignore carriage returns
 80a1286:	290d      	cmp	r1, #13
 80a1288:	d06a      	beq.n	80a1360 <_ZN12Adafruit_GFX5writeEh+0xf8>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a128a:	7ec1      	ldrb	r1, [r0, #27]
 80a128c:	7e45      	ldrb	r5, [r0, #25]
 80a128e:	7e00      	ldrb	r0, [r0, #24]
 80a1290:	b169      	cbz	r1, 80a12ae <_ZN12Adafruit_GFX5writeEh+0x46>
 80a1292:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80a1296:	2106      	movs	r1, #6
 80a1298:	fb01 6100 	mla	r1, r1, r0, r6
 80a129c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a12a0:	42b1      	cmp	r1, r6
                cursor_x  = 0;                 // Reset x to zero,
 80a12a2:	bfc1      	itttt	gt
 80a12a4:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 80a12a6:	8a62      	ldrhgt	r2, [r4, #18]
 80a12a8:	eb02 02c5 	addgt.w	r2, r2, r5, lsl #3
 80a12ac:	8262      	strhgt	r2, [r4, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a12ae:	9002      	str	r0, [sp, #8]
 80a12b0:	8ae0      	ldrh	r0, [r4, #22]
 80a12b2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a12b6:	9001      	str	r0, [sp, #4]
 80a12b8:	8aa0      	ldrh	r0, [r4, #20]
 80a12ba:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a12be:	9000      	str	r0, [sp, #0]
 80a12c0:	9503      	str	r5, [sp, #12]
 80a12c2:	4620      	mov	r0, r4
 80a12c4:	f7ff fe76 	bl	80a0fb4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 80a12c8:	7e23      	ldrb	r3, [r4, #24]
 80a12ca:	8a22      	ldrh	r2, [r4, #16]
 80a12cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a12d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80a12d4:	e043      	b.n	80a135e <_ZN12Adafruit_GFX5writeEh+0xf6>
        }

    } else { // Custom font

        if(c == '\n') {
 80a12d6:	290a      	cmp	r1, #10
 80a12d8:	d108      	bne.n	80a12ec <_ZN12Adafruit_GFX5writeEh+0x84>
            cursor_x  = 0;
 80a12da:	2300      	movs	r3, #0
 80a12dc:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a12de:	7e41      	ldrb	r1, [r0, #25]
 80a12e0:	7a92      	ldrb	r2, [r2, #10]
 80a12e2:	8a43      	ldrh	r3, [r0, #18]
 80a12e4:	fb01 3302 	mla	r3, r1, r2, r3
 80a12e8:	8263      	strh	r3, [r4, #18]
 80a12ea:	e039      	b.n	80a1360 <_ZN12Adafruit_GFX5writeEh+0xf8>
        } else if(c != '\r') {
 80a12ec:	290d      	cmp	r1, #13
 80a12ee:	d037      	beq.n	80a1360 <_ZN12Adafruit_GFX5writeEh+0xf8>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80a12f0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a12f2:	42a9      	cmp	r1, r5
 80a12f4:	d334      	bcc.n	80a1360 <_ZN12Adafruit_GFX5writeEh+0xf8>
 80a12f6:	7a51      	ldrb	r1, [r2, #9]
 80a12f8:	4299      	cmp	r1, r3
 80a12fa:	d331      	bcc.n	80a1360 <_ZN12Adafruit_GFX5writeEh+0xf8>
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
#else
    // expression in __AVR__ section may generate "dereferencing type-punned pointer will break strict-aliasing rules" warning
    // In fact, on other platforms (such as STM32) there is no need to do this pointer magic as program memory may be read in a usual way
    // So expression may be simplified
    return gfxFont->glyph + c;
 80a12fc:	6851      	ldr	r1, [r2, #4]
 80a12fe:	1b5d      	subs	r5, r3, r5
 80a1300:	b2ed      	uxtb	r5, r5
 80a1302:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80a1306:	78a9      	ldrb	r1, [r5, #2]
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a1308:	b321      	cbz	r1, 80a1354 <_ZN12Adafruit_GFX5writeEh+0xec>
 80a130a:	78e8      	ldrb	r0, [r5, #3]
 80a130c:	b310      	cbz	r0, 80a1354 <_ZN12Adafruit_GFX5writeEh+0xec>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a130e:	7ee7      	ldrb	r7, [r4, #27]
 80a1310:	7e66      	ldrb	r6, [r4, #25]
 80a1312:	7e20      	ldrb	r0, [r4, #24]
 80a1314:	b18f      	cbz	r7, 80a133a <_ZN12Adafruit_GFX5writeEh+0xd2>
 80a1316:	f995 7005 	ldrsb.w	r7, [r5, #5]
 80a131a:	4439      	add	r1, r7
 80a131c:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 80a1320:	fb00 7101 	mla	r1, r0, r1, r7
 80a1324:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80a1328:	42b9      	cmp	r1, r7
 80a132a:	dd06      	ble.n	80a133a <_ZN12Adafruit_GFX5writeEh+0xd2>
                        cursor_x  = 0;
 80a132c:	2100      	movs	r1, #0
 80a132e:	8221      	strh	r1, [r4, #16]
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a1330:	7a92      	ldrb	r2, [r2, #10]
 80a1332:	8a61      	ldrh	r1, [r4, #18]
 80a1334:	fb06 1202 	mla	r2, r6, r2, r1
 80a1338:	8262      	strh	r2, [r4, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a133a:	9002      	str	r0, [sp, #8]
 80a133c:	8ae0      	ldrh	r0, [r4, #22]
 80a133e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a1342:	9001      	str	r0, [sp, #4]
 80a1344:	8aa0      	ldrh	r0, [r4, #20]
 80a1346:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a134a:	9000      	str	r0, [sp, #0]
 80a134c:	9603      	str	r6, [sp, #12]
 80a134e:	4620      	mov	r0, r4
 80a1350:	f7ff fe30 	bl	80a0fb4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a1354:	7929      	ldrb	r1, [r5, #4]
 80a1356:	7e22      	ldrb	r2, [r4, #24]
 80a1358:	8a23      	ldrh	r3, [r4, #16]
 80a135a:	fb01 3302 	mla	r3, r1, r2, r3
 80a135e:	8223      	strh	r3, [r4, #16]
            }
        }

    }
    return 1;
}
 80a1360:	2001      	movs	r0, #1
 80a1362:	b005      	add	sp, #20
 80a1364:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1366 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
 80a1366:	2900      	cmp	r1, #0
 80a1368:	bf08      	it	eq
 80a136a:	2101      	moveq	r1, #1
    textsize_y = (s_y > 0) ? s_y : 1;
 80a136c:	2a00      	cmp	r2, #0
 80a136e:	bf08      	it	eq
 80a1370:	2201      	moveq	r2, #1
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
 80a1372:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 80a1374:	7642      	strb	r2, [r0, #25]
 80a1376:	4770      	bx	lr

080a1378 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
 80a1378:	460a      	mov	r2, r1
 80a137a:	f7ff bff4 	b.w	80a1366 <_ZN12Adafruit_GFX11setTextSizeEhh>

080a137e <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a137e:	f000 bf27 	b.w	80a21d0 <HAL_Pin_Map>
	...

080a1384 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
 80a1384:	b510      	push	{r4, lr}
 80a1386:	4b06      	ldr	r3, [pc, #24]	; (80a13a0 <_ZN16OledWingAdafruitD1Ev+0x1c>)
 80a1388:	4604      	mov	r4, r0
 80a138a:	6003      	str	r3, [r0, #0]
	if (mutex) {
 80a138c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80a138e:	b108      	cbz	r0, 80a1394 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
 80a1390:	f000 ffc6 	bl	80a2320 <os_mutex_destroy>


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
 80a1394:	4620      	mov	r0, r4
 80a1396:	f000 f841 	bl	80a141c <_ZN16Adafruit_SSD1306D1Ev>
	if (mutex) {
		os_mutex_destroy(mutex);
	}
}
 80a139a:	4620      	mov	r0, r4
 80a139c:	bd10      	pop	{r4, pc}
 80a139e:	bf00      	nop
 80a13a0:	080a51d0 	.word	0x080a51d0

080a13a4 <_ZN16OledWingAdafruitD0Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
 80a13a4:	b510      	push	{r4, lr}
 80a13a6:	4604      	mov	r4, r0
	if (mutex) {
		os_mutex_destroy(mutex);
	}
}
 80a13a8:	f7ff ffec 	bl	80a1384 <_ZN16OledWingAdafruitD1Ev>
 80a13ac:	4620      	mov	r0, r4
 80a13ae:	2158      	movs	r1, #88	; 0x58
 80a13b0:	f002 fc0e 	bl	80a3bd0 <_ZdlPvj>
 80a13b4:	4620      	mov	r0, r4
 80a13b6:	bd10      	pop	{r4, pc}

080a13b8 <_ZN16OledWingAdafruitC1Ei>:
#include "oled-wing-adafruit.h"


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
 80a13b8:	b530      	push	{r4, r5, lr}
 80a13ba:	b085      	sub	sp, #20
 80a13bc:	4604      	mov	r4, r0
 80a13be:	460d      	mov	r5, r1
            SSD1306 OLED displays.
*/
class Adafruit_SSD1306 : public Adafruit_GFX {
 public:
  // NEW CONSTRUCTORS -- recommended for new projects
  Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi=&Wire, int8_t rst_pin=-1,
 80a13c0:	f002 fbd2 	bl	80a3b68 <_Z19__fetch_global_Wirev>
 80a13c4:	4a09      	ldr	r2, [pc, #36]	; (80a13ec <_ZN16OledWingAdafruitC1Ei+0x34>)
 80a13c6:	4b0a      	ldr	r3, [pc, #40]	; (80a13f0 <_ZN16OledWingAdafruitC1Ei+0x38>)
 80a13c8:	f04f 31ff 	mov.w	r1, #4294967295
 80a13cc:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80a13d0:	4603      	mov	r3, r0
 80a13d2:	2220      	movs	r2, #32
 80a13d4:	2180      	movs	r1, #128	; 0x80
 80a13d6:	4620      	mov	r0, r4
 80a13d8:	f000 f89a 	bl	80a1510 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>

}
 80a13dc:	4620      	mov	r0, r4
#include "oled-wing-adafruit.h"


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
 80a13de:	4b05      	ldr	r3, [pc, #20]	; (80a13f4 <_ZN16OledWingAdafruitC1Ei+0x3c>)
 80a13e0:	6565      	str	r5, [r4, #84]	; 0x54
 80a13e2:	6023      	str	r3, [r4, #0]
 80a13e4:	2300      	movs	r3, #0
 80a13e6:	6523      	str	r3, [r4, #80]	; 0x50

}
 80a13e8:	b005      	add	sp, #20
 80a13ea:	bd30      	pop	{r4, r5, pc}
 80a13ec:	00061a80 	.word	0x00061a80
 80a13f0:	000186a0 	.word	0x000186a0
 80a13f4:	080a51d0 	.word	0x080a51d0

080a13f8 <_ZN16OledWingAdafruit5setupEv>:
	if (mutex) {
		os_mutex_destroy(mutex);
	}
}

void OledWingAdafruit::setup() {
 80a13f8:	b513      	push	{r0, r1, r4, lr}
 80a13fa:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
 80a13fc:	3050      	adds	r0, #80	; 0x50
 80a13fe:	f000 ff87 	bl	80a2310 <os_mutex_create>
	if (useButtons & USE_BUTTON_C) {
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
	}
*/
	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
 80a1402:	2301      	movs	r3, #1
 80a1404:	9300      	str	r3, [sp, #0]
 80a1406:	223c      	movs	r2, #60	; 0x3c
 80a1408:	2102      	movs	r1, #2
 80a140a:	4620      	mov	r0, r4
 80a140c:	f000 f98c 	bl	80a1728 <_ZN16Adafruit_SSD13065beginEhhbb>
}
 80a1410:	b002      	add	sp, #8
 80a1412:	bd10      	pop	{r4, pc}

080a1414 <_GLOBAL__sub_I__ZN16OledWingAdafruitC2Ei>:
 80a1414:	f000 bedc 	b.w	80a21d0 <HAL_Pin_Map>

080a1418 <_GLOBAL__sub_I__ZN8DebounceC2Ev>:
 80a1418:	f000 beda 	b.w	80a21d0 <HAL_Pin_Map>

080a141c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a141c:	b510      	push	{r4, lr}
 80a141e:	4b04      	ldr	r3, [pc, #16]	; (80a1430 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 80a1420:	4604      	mov	r4, r0
 80a1422:	6003      	str	r3, [r0, #0]
  if(buffer) {
 80a1424:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a1426:	b108      	cbz	r0, 80a142c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 80a1428:	f001 f948 	bl	80a26bc <free>
    buffer = NULL;
  }
}
 80a142c:	4620      	mov	r0, r4
 80a142e:	bd10      	pop	{r4, pc}
 80a1430:	080a5268 	.word	0x080a5268

080a1434 <_ZN16Adafruit_SSD1306D0Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a1434:	b510      	push	{r4, lr}
 80a1436:	4604      	mov	r4, r0
  if(buffer) {
    free(buffer);
    buffer = NULL;
  }
}
 80a1438:	f7ff fff0 	bl	80a141c <_ZN16Adafruit_SSD1306D1Ev>
 80a143c:	4620      	mov	r0, r4
 80a143e:	2150      	movs	r1, #80	; 0x50
 80a1440:	f002 fbc6 	bl	80a3bd0 <_ZdlPvj>
 80a1444:	4620      	mov	r0, r4
 80a1446:	bd10      	pop	{r4, pc}

080a1448 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a1448:	2900      	cmp	r1, #0
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a144a:	b530      	push	{r4, r5, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a144c:	db5e      	blt.n	80a150c <_ZN16Adafruit_SSD13069drawPixelEsst+0xc4>
 80a144e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80a1452:	428c      	cmp	r4, r1
 80a1454:	dd5a      	ble.n	80a150c <_ZN16Adafruit_SSD13069drawPixelEsst+0xc4>
 80a1456:	2a00      	cmp	r2, #0
 80a1458:	db58      	blt.n	80a150c <_ZN16Adafruit_SSD13069drawPixelEsst+0xc4>
 80a145a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80a145e:	4294      	cmp	r4, r2
 80a1460:	dc00      	bgt.n	80a1464 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c>
 80a1462:	bd30      	pop	{r4, r5, pc}
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a1464:	7e84      	ldrb	r4, [r0, #26]
 80a1466:	2c02      	cmp	r4, #2
 80a1468:	d107      	bne.n	80a147a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      break;
     case 2:
      x = WIDTH  - x - 1;
 80a146a:	8904      	ldrh	r4, [r0, #8]
 80a146c:	3c01      	subs	r4, #1
 80a146e:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 80a1470:	8944      	ldrh	r4, [r0, #10]
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      break;
     case 2:
      x = WIDTH  - x - 1;
 80a1472:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 80a1474:	3c01      	subs	r4, #1
 80a1476:	1aa2      	subs	r2, r4, r2
 80a1478:	e006      	b.n	80a1488 <_ZN16Adafruit_SSD13069drawPixelEsst+0x40>
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a147a:	2c03      	cmp	r4, #3
 80a147c:	d13c      	bne.n	80a14f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xb0>
     case 2:
      x = WIDTH  - x - 1;
      y = HEIGHT - y - 1;
      break;
     case 3:
      ssd1306_swap(x, y);
 80a147e:	460d      	mov	r5, r1
      y = HEIGHT - y - 1;
 80a1480:	8944      	ldrh	r4, [r0, #10]
     case 2:
      x = WIDTH  - x - 1;
      y = HEIGHT - y - 1;
      break;
     case 3:
      ssd1306_swap(x, y);
 80a1482:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 80a1484:	3c01      	subs	r4, #1
 80a1486:	1b62      	subs	r2, r4, r5
 80a1488:	b212      	sxth	r2, r2
      break;
    }
    switch(color) {
 80a148a:	2b01      	cmp	r3, #1
 80a148c:	d003      	beq.n	80a1496 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4e>
 80a148e:	d311      	bcc.n	80a14b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
 80a1490:	2b02      	cmp	r3, #2
 80a1492:	d020      	beq.n	80a14d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8e>
 80a1494:	bd30      	pop	{r4, r5, pc}
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
 80a1496:	2408      	movs	r4, #8
 80a1498:	fb92 f4f4 	sdiv	r4, r2, r4
 80a149c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a14a0:	f002 0207 	and.w	r2, r2, #7
 80a14a4:	fb05 1104 	mla	r1, r5, r4, r1
 80a14a8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a14aa:	4093      	lsls	r3, r2
 80a14ac:	5c60      	ldrb	r0, [r4, r1]
 80a14ae:	4303      	orrs	r3, r0
 80a14b0:	5463      	strb	r3, [r4, r1]
 80a14b2:	bd30      	pop	{r4, r5, pc}
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
 80a14b4:	2308      	movs	r3, #8
 80a14b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80a14ba:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a14be:	f002 0207 	and.w	r2, r2, #7
 80a14c2:	fb04 1103 	mla	r1, r4, r3, r1
 80a14c6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a14c8:	2001      	movs	r0, #1
 80a14ca:	5c63      	ldrb	r3, [r4, r1]
 80a14cc:	fa00 f202 	lsl.w	r2, r0, r2
 80a14d0:	ea23 0202 	bic.w	r2, r3, r2
 80a14d4:	e00e      	b.n	80a14f4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xac>
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a14d6:	2308      	movs	r3, #8
 80a14d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80a14dc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a14e0:	f002 0207 	and.w	r2, r2, #7
 80a14e4:	fb04 1103 	mla	r1, r4, r3, r1
 80a14e8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a14ea:	2001      	movs	r0, #1
 80a14ec:	5c63      	ldrb	r3, [r4, r1]
 80a14ee:	fa00 f202 	lsl.w	r2, r0, r2
 80a14f2:	405a      	eors	r2, r3
 80a14f4:	5462      	strb	r2, [r4, r1]
    }
  }
}
 80a14f6:	bd30      	pop	{r4, r5, pc}
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a14f8:	2c01      	cmp	r4, #1
 80a14fa:	d1c6      	bne.n	80a148a <_ZN16Adafruit_SSD13069drawPixelEsst+0x42>
     case 1:
      ssd1306_swap(x, y);
 80a14fc:	4051      	eors	r1, r2
      x = WIDTH - x - 1;
 80a14fe:	8904      	ldrh	r4, [r0, #8]
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
     case 1:
      ssd1306_swap(x, y);
 80a1500:	404a      	eors	r2, r1
      x = WIDTH - x - 1;
 80a1502:	3c01      	subs	r4, #1
 80a1504:	4051      	eors	r1, r2
 80a1506:	1a61      	subs	r1, r4, r1
 80a1508:	b209      	sxth	r1, r1
 80a150a:	e7be      	b.n	80a148a <_ZN16Adafruit_SSD13069drawPixelEsst+0x42>
 80a150c:	bd30      	pop	{r4, r5, pc}
	...

080a1510 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
            software, which operates I2C at a fixed 100 KHz.)
    @return Adafruit_SSD1306 object.
    @note   Call the object's begin() function before use -- buffer
            allocation is performed there!
*/
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 80a1510:	b570      	push	{r4, r5, r6, lr}
 80a1512:	4604      	mov	r4, r0
 80a1514:	461e      	mov	r6, r3
  int8_t rst_pin, uint32_t clkDuring, uint32_t clkAfter) :
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
  mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin),
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a1516:	f7ff fbf3 	bl	80a0d00 <_ZN12Adafruit_GFXC1Ess>
 80a151a:	4b14      	ldr	r3, [pc, #80]	; (80a156c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x5c>)
 80a151c:	2500      	movs	r5, #0
 80a151e:	6023      	str	r3, [r4, #0]
 80a1520:	6265      	str	r5, [r4, #36]	; 0x24
 80a1522:	b916      	cbnz	r6, 80a152a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 80a1524:	f002 fb20 	bl	80a3b68 <_Z19__fetch_global_Wirev>
 80a1528:	e000      	b.n	80a152c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1c>
 80a152a:	4630      	mov	r0, r6
 80a152c:	23ff      	movs	r3, #255	; 0xff
 80a152e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80a1532:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80a1536:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a153a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a153e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80a1542:	62a0      	str	r0, [r4, #40]	; 0x28
 80a1544:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a1548:	4b09      	ldr	r3, [pc, #36]	; (80a1570 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x60>)
 80a154a:	62e5      	str	r5, [r4, #44]	; 0x2c
 80a154c:	63a3      	str	r3, [r4, #56]	; 0x38
 80a154e:	2301      	movs	r3, #1
 80a1550:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a1554:	9b05      	ldr	r3, [sp, #20]
 80a1556:	6425      	str	r5, [r4, #64]	; 0x40
 80a1558:	64a3      	str	r3, [r4, #72]	; 0x48
 80a155a:	9b06      	ldr	r3, [sp, #24]
 80a155c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 80a1560:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80a1564:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80a1566:	4620      	mov	r0, r4
 80a1568:	bd70      	pop	{r4, r5, r6, pc}
 80a156a:	bf00      	nop
 80a156c:	080a5268 	.word	0x080a5268
 80a1570:	080a5228 	.word	0x080a5228

080a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:

// Issue single command to SSD1306, using I2C or hard/soft SPI as needed.
// Because command calls are often grouped, SPI transaction and selection
// must be started/ended in calling function for efficiency.
// This is a private function, not exposed (see ssd1306_command() instead).
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a1574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1576:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a1578:	6a80      	ldr	r0, [r0, #40]	; 0x28

// Issue single command to SSD1306, using I2C or hard/soft SPI as needed.
// Because command calls are often grouped, SPI transaction and selection
// must be started/ended in calling function for efficiency.
// This is a private function, not exposed (see ssd1306_command() instead).
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a157a:	460f      	mov	r7, r1
  if(wire) { // I2C
 80a157c:	b190      	cbz	r0, 80a15a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 80a157e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1582:	f002 f94f 	bl	80a3824 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a1586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1588:	2100      	movs	r1, #0
 80a158a:	6803      	ldr	r3, [r0, #0]
 80a158c:	689b      	ldr	r3, [r3, #8]
 80a158e:	4798      	blx	r3
    WIRE_WRITE(c);
 80a1590:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1592:	4639      	mov	r1, r7
 80a1594:	6803      	ldr	r3, [r0, #0]
 80a1596:	689b      	ldr	r3, [r3, #8]
 80a1598:	4798      	blx	r3
    wire->endTransmission();
 80a159a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
 80a159c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    WIRE_WRITE(c);
    wire->endTransmission();
 80a15a0:	f002 b947 	b.w	80a3832 <_ZN7TwoWire15endTransmissionEv>
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
 80a15a4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a15a8:	4601      	mov	r1, r0
 80a15aa:	b298      	uxth	r0, r3
 80a15ac:	f002 fa57 	bl	80a3a5e <digitalWrite>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a15b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a15b2:	b120      	cbz	r0, 80a15be <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
 80a15b4:	4639      	mov	r1, r7
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
 80a15b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
 80a15ba:	f001 b94e 	b.w	80a285a <_ZN8SPIClass8transferEh>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a15be:	2508      	movs	r5, #8
 80a15c0:	2680      	movs	r6, #128	; 0x80
      if(d & bit) *mosiPort |=  mosiPinMask;
      else        *mosiPort &= ~mosiPinMask;
      *clkPort |=  clkPinMask; // Clock high
      *clkPort &= ~clkPinMask; // Clock low
#else
      digitalWrite(mosiPin, d & bit);
 80a15c2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a15c6:	ea07 0106 	and.w	r1, r7, r6
 80a15ca:	b280      	uxth	r0, r0
 80a15cc:	f002 fa47 	bl	80a3a5e <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a15d0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a15d4:	2101      	movs	r1, #1
 80a15d6:	b280      	uxth	r0, r0
 80a15d8:	f002 fa41 	bl	80a3a5e <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a15dc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a15e0:	2100      	movs	r1, #0
 80a15e2:	b280      	uxth	r0, r0
 80a15e4:	f002 fa3b 	bl	80a3a5e <digitalWrite>
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a15e8:	3d01      	subs	r5, #1
 80a15ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80a15ee:	d1e8      	bne.n	80a15c2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
 80a15f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a15f2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a15f2:	b538      	push	{r3, r4, r5, lr}
 80a15f4:	4604      	mov	r4, r0
  TRANSACTION_START
 80a15f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a15f8:	460d      	mov	r5, r1
  TRANSACTION_START
 80a15fa:	b118      	cbz	r0, 80a1604 <_ZN16Adafruit_SSD130613invertDisplayEb+0x12>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a15fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a15fe:	f002 f903 	bl	80a3808 <_ZN7TwoWire8setSpeedEm>
 80a1602:	e00b      	b.n	80a161c <_ZN16Adafruit_SSD130613invertDisplayEb+0x2a>
 80a1604:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1606:	b118      	cbz	r0, 80a1610 <_ZN16Adafruit_SSD130613invertDisplayEb+0x1e>
 80a1608:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a160c:	f001 f8b6 	bl	80a277c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
 80a1610:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1614:	2100      	movs	r1, #0
 80a1616:	b280      	uxth	r0, r0
 80a1618:	f002 fa21 	bl	80a3a5e <digitalWrite>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 80a161c:	2d00      	cmp	r5, #0
 80a161e:	4620      	mov	r0, r4
 80a1620:	bf14      	ite	ne
 80a1622:	21a7      	movne	r1, #167	; 0xa7
 80a1624:	21a6      	moveq	r1, #166	; 0xa6
 80a1626:	f7ff ffa5 	bl	80a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 80a162a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a162c:	b120      	cbz	r0, 80a1638 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 80a162e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a1630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1634:	f002 b8e8 	b.w	80a3808 <_ZN7TwoWire8setSpeedEm>
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
 80a1638:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a163c:	2101      	movs	r1, #1
 80a163e:	b280      	uxth	r0, r0
 80a1640:	f002 fa0d 	bl	80a3a5e <digitalWrite>
 80a1644:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1646:	b118      	cbz	r0, 80a1650 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
 80a1648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
 80a164c:	f001 b87b 	b.w	80a2746 <_ZN8SPIClass14endTransactionEv>
 80a1650:	bd38      	pop	{r3, r4, r5, pc}

080a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
  }
}

// Issue list of commands to SSD1306, same rules as above re: transactions.
// This is a private function, not exposed.
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a1652:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1656:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a1658:	6a80      	ldr	r0, [r0, #40]	; 0x28
  }
}

// Issue list of commands to SSD1306, same rules as above re: transactions.
// This is a private function, not exposed.
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a165a:	460d      	mov	r5, r1
 80a165c:	eb01 0802 	add.w	r8, r1, r2
  if(wire) { // I2C
 80a1660:	b348      	cbz	r0, 80a16b6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x64>
    wire->beginTransmission(i2caddr);
 80a1662:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1666:	f002 f8dd 	bl	80a3824 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a166a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a166c:	2100      	movs	r1, #0
 80a166e:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a1670:	2601      	movs	r6, #1
// Issue list of commands to SSD1306, same rules as above re: transactions.
// This is a private function, not exposed.
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a1672:	689b      	ldr	r3, [r3, #8]
 80a1674:	4798      	blx	r3
    uint8_t bytesOut = 1;
    while(n--) {
 80a1676:	4545      	cmp	r5, r8
 80a1678:	d018      	beq.n	80a16ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5a>
      if(bytesOut >= WIRE_MAX) {
 80a167a:	2e1f      	cmp	r6, #31
 80a167c:	d90d      	bls.n	80a169a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x48>
        wire->endTransmission();
 80a167e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1680:	f002 f8d7 	bl	80a3832 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a1684:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1688:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a168a:	f002 f8cb 	bl	80a3824 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a168e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1690:	2100      	movs	r1, #0
 80a1692:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a1694:	2601      	movs	r6, #1
    uint8_t bytesOut = 1;
    while(n--) {
      if(bytesOut >= WIRE_MAX) {
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a1696:	689b      	ldr	r3, [r3, #8]
 80a1698:	4798      	blx	r3
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
 80a169a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a169c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a16a0:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a16a2:	3601      	adds	r6, #1
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
 80a16a4:	689b      	ldr	r3, [r3, #8]
 80a16a6:	4798      	blx	r3
      bytesOut++;
 80a16a8:	b2f6      	uxtb	r6, r6
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    uint8_t bytesOut = 1;
    while(n--) {
 80a16aa:	e7e4      	b.n	80a1676 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
      bytesOut++;
    }
    wire->endTransmission();
 80a16ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while(n--) SPIwrite(pgm_read_byte(c++));
  }
}
 80a16ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
      bytesOut++;
    }
    wire->endTransmission();
 80a16b2:	f002 b8be 	b.w	80a3832 <_ZN7TwoWire15endTransmissionEv>
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
 80a16b6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a16ba:	4601      	mov	r1, r0
 80a16bc:	b298      	uxth	r0, r3
 80a16be:	f002 f9ce 	bl	80a3a5e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a16c2:	4545      	cmp	r5, r8
 80a16c4:	d021      	beq.n	80a170a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb8>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a16c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a16c8:	f815 9b01 	ldrb.w	r9, [r5], #1
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a16cc:	b118      	cbz	r0, 80a16d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x84>
    (void)spi->transfer(d);
 80a16ce:	4649      	mov	r1, r9
 80a16d0:	f001 f8c3 	bl	80a285a <_ZN8SPIClass8transferEh>
 80a16d4:	e7f5      	b.n	80a16c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x70>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a16d6:	2608      	movs	r6, #8
 80a16d8:	2780      	movs	r7, #128	; 0x80
      if(d & bit) *mosiPort |=  mosiPinMask;
      else        *mosiPort &= ~mosiPinMask;
      *clkPort |=  clkPinMask; // Clock high
      *clkPort &= ~clkPinMask; // Clock low
#else
      digitalWrite(mosiPin, d & bit);
 80a16da:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a16de:	ea09 0107 	and.w	r1, r9, r7
 80a16e2:	b280      	uxth	r0, r0
 80a16e4:	f002 f9bb 	bl	80a3a5e <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a16e8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a16ec:	2101      	movs	r1, #1
 80a16ee:	b280      	uxth	r0, r0
 80a16f0:	f002 f9b5 	bl	80a3a5e <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a16f4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a16f8:	2100      	movs	r1, #0
 80a16fa:	b280      	uxth	r0, r0
 80a16fc:	f002 f9af 	bl	80a3a5e <digitalWrite>
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a1700:	3e01      	subs	r6, #1
 80a1702:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80a1706:	d1e8      	bne.n	80a16da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x88>
 80a1708:	e7db      	b.n	80a16c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x70>
 80a170a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a170e <_ZN16Adafruit_SSD130612clearDisplayEv>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 80a170e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a1712:	2208      	movs	r2, #8
 80a1714:	3307      	adds	r3, #7
 80a1716:	fb93 f3f2 	sdiv	r3, r3, r2
 80a171a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80a171e:	2100      	movs	r1, #0
 80a1720:	435a      	muls	r2, r3
 80a1722:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a1724:	f003 b9d9 	b.w	80a4ada <memset>

080a1728 <_ZN16Adafruit_SSD13065beginEhhbb>:
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
boolean Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, boolean reset,
  boolean periphBegin) {
 80a1728:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a172c:	461e      	mov	r6, r3

  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a172e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
boolean Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, boolean reset,
  boolean periphBegin) {
 80a1730:	4604      	mov	r4, r0
 80a1732:	4688      	mov	r8, r1
 80a1734:	4615      	mov	r5, r2
 80a1736:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28

  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a173a:	b973      	cbnz	r3, 80a175a <_ZN16Adafruit_SSD13065beginEhhbb+0x32>
 80a173c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a1740:	2008      	movs	r0, #8
 80a1742:	3307      	adds	r3, #7
 80a1744:	fb93 f3f0 	sdiv	r3, r3, r0
 80a1748:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80a174c:	4358      	muls	r0, r3
 80a174e:	f000 ffad 	bl	80a26ac <malloc>
 80a1752:	62e0      	str	r0, [r4, #44]	; 0x2c
 80a1754:	2800      	cmp	r0, #0
 80a1756:	f000 810e 	beq.w	80a1976 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    return false;

  clearDisplay();
 80a175a:	4620      	mov	r0, r4
 80a175c:	f7ff ffd7 	bl	80a170e <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
 80a1760:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80a1764:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a1768:	2a20      	cmp	r2, #32
 80a176a:	f04f 0102 	mov.w	r1, #2
 80a176e:	dd0d      	ble.n	80a178c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
      splash1_data, splash1_width, splash1_height, 1);
 80a1770:	3b52      	subs	r3, #82	; 0x52
 80a1772:	3a40      	subs	r2, #64	; 0x40
 80a1774:	fb92 f2f1 	sdiv	r2, r2, r1
 80a1778:	2052      	movs	r0, #82	; 0x52
 80a177a:	fb93 f1f1 	sdiv	r1, r3, r1
 80a177e:	f04f 0c01 	mov.w	ip, #1
 80a1782:	2340      	movs	r3, #64	; 0x40
 80a1784:	e88d 1009 	stmia.w	sp, {r0, r3, ip}
 80a1788:	4b7c      	ldr	r3, [pc, #496]	; (80a197c <_ZN16Adafruit_SSD13065beginEhhbb+0x254>)
 80a178a:	e00c      	b.n	80a17a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x7e>
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
      splash2_data, splash2_width, splash2_height, 1);
 80a178c:	3b73      	subs	r3, #115	; 0x73
 80a178e:	3a20      	subs	r2, #32
 80a1790:	fb92 f2f1 	sdiv	r2, r2, r1
 80a1794:	2073      	movs	r0, #115	; 0x73
 80a1796:	fb93 f1f1 	sdiv	r1, r3, r1
 80a179a:	f04f 0e01 	mov.w	lr, #1
 80a179e:	2320      	movs	r3, #32
 80a17a0:	e88d 4009 	stmia.w	sp, {r0, r3, lr}
 80a17a4:	4b76      	ldr	r3, [pc, #472]	; (80a1980 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
 80a17a6:	4620      	mov	r0, r4
 80a17a8:	b212      	sxth	r2, r2
 80a17aa:	b209      	sxth	r1, r1
 80a17ac:	f7ff fbf5 	bl	80a0f9a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  }

  vccstate = vcs;

  // Setup pin directions
  if(wire) { // Using I2C
 80a17b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
      splash2_data, splash2_width, splash2_height, 1);
  }

  vccstate = vcs;
 80a17b2:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31

  // Setup pin directions
  if(wire) { // Using I2C
 80a17b6:	b180      	cbz	r0, 80a17da <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    // If I2C address is unspecified, use default
    // (0x3C for 32-pixel-tall displays, 0x3D for all others).
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a17b8:	b935      	cbnz	r5, 80a17c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xa0>
 80a17ba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a17be:	2b20      	cmp	r3, #32
 80a17c0:	bf14      	ite	ne
 80a17c2:	253d      	movne	r5, #61	; 0x3d
 80a17c4:	253c      	moveq	r5, #60	; 0x3c
 80a17c6:	e000      	b.n	80a17ca <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
 80a17c8:	b26d      	sxtb	r5, r5
 80a17ca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    // TwoWire begin() function might be already performed by the calling
    // function if it has unusual circumstances (e.g. TWI variants that
    // can accept different SDA/SCL pins, or if two SSD1306 instances
    // with different addresses -- only a single begin() is needed).
    if(periphBegin) wire->begin();
 80a17ce:	2f00      	cmp	r7, #0
 80a17d0:	f000 80cd 	beq.w	80a196e <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
 80a17d4:	f002 f81c 	bl	80a3810 <_ZN7TwoWire5beginEv>
 80a17d8:	e02a      	b.n	80a1830 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
  } else { // Using one of the SPI modes, either soft or hardware
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 80a17da:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a17de:	2101      	movs	r1, #1
 80a17e0:	b280      	uxth	r0, r0
 80a17e2:	f002 f92b 	bl	80a3a3c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 80a17e6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a17ea:	2101      	movs	r1, #1
 80a17ec:	b280      	uxth	r0, r0
 80a17ee:	f002 f925 	bl	80a3a3c <pinMode>
    dcPort    = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    dcPinMask = digitalPinToBitMask(dcPin);
    csPort    = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    csPinMask = digitalPinToBitMask(csPin);
#endif
    SSD1306_DESELECT
 80a17f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a17f6:	2101      	movs	r1, #1
 80a17f8:	b280      	uxth	r0, r0
 80a17fa:	f002 f930 	bl	80a3a5e <digitalWrite>
    if(spi) { // Hardware SPI
 80a17fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a1800:	b125      	cbz	r5, 80a180c <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
      // SPI peripheral begin same as wire check above.
      if(periphBegin) spi->begin();
 80a1802:	b1af      	cbz	r7, 80a1830 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
 80a1804:	4628      	mov	r0, r5
 80a1806:	f000 ff8e 	bl	80a2726 <_ZN8SPIClass5beginEv>
 80a180a:	e011      	b.n	80a1830 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    } else {  // Soft SPI
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 80a180c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a1810:	2101      	movs	r1, #1
 80a1812:	b280      	uxth	r0, r0
 80a1814:	f002 f912 	bl	80a3a3c <pinMode>
      pinMode(clkPin , OUTPUT);
 80a1818:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a181c:	2101      	movs	r1, #1
 80a181e:	b280      	uxth	r0, r0
 80a1820:	f002 f90c 	bl	80a3a3c <pinMode>
      mosiPinMask = digitalPinToBitMask(mosiPin);
      clkPort     = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
      clkPinMask  = digitalPinToBitMask(clkPin);
      *clkPort   &= ~clkPinMask; // Clock low
#else
      digitalWrite(clkPin, LOW); // Clock low
 80a1824:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a1828:	4629      	mov	r1, r5
 80a182a:	b280      	uxth	r0, r0
 80a182c:	f002 f917 	bl	80a3a5e <digitalWrite>
#endif
    }
  }

  // Reset SSD1306 if requested and reset pin specified in constructor
  if(reset && (rstPin >= 0)) {
 80a1830:	b1fe      	cbz	r6, 80a1872 <_ZN16Adafruit_SSD13065beginEhhbb+0x14a>
 80a1832:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a1836:	2800      	cmp	r0, #0
 80a1838:	db1b      	blt.n	80a1872 <_ZN16Adafruit_SSD13065beginEhhbb+0x14a>
    pinMode(     rstPin, OUTPUT);
 80a183a:	2101      	movs	r1, #1
 80a183c:	b280      	uxth	r0, r0
 80a183e:	f002 f8fd 	bl	80a3a3c <pinMode>
    digitalWrite(rstPin, HIGH);
 80a1842:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a1846:	2101      	movs	r1, #1
 80a1848:	b280      	uxth	r0, r0
 80a184a:	f002 f908 	bl	80a3a5e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 80a184e:	2001      	movs	r0, #1
 80a1850:	f001 f9bc 	bl	80a2bcc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 80a1854:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a1858:	2100      	movs	r1, #0
 80a185a:	b280      	uxth	r0, r0
 80a185c:	f002 f8ff 	bl	80a3a5e <digitalWrite>
    delay(10);                  // Wait 10 ms
 80a1860:	200a      	movs	r0, #10
 80a1862:	f001 f9b3 	bl	80a2bcc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 80a1866:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a186a:	2101      	movs	r1, #1
 80a186c:	b280      	uxth	r0, r0
 80a186e:	f002 f8f6 	bl	80a3a5e <digitalWrite>
  }

  TRANSACTION_START
 80a1872:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1874:	b118      	cbz	r0, 80a187e <_ZN16Adafruit_SSD13065beginEhhbb+0x156>
 80a1876:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a1878:	f001 ffc6 	bl	80a3808 <_ZN7TwoWire8setSpeedEm>
 80a187c:	e00b      	b.n	80a1896 <_ZN16Adafruit_SSD13065beginEhhbb+0x16e>
 80a187e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1880:	b118      	cbz	r0, 80a188a <_ZN16Adafruit_SSD13065beginEhhbb+0x162>
 80a1882:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a1886:	f000 ff79 	bl	80a277c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
 80a188a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a188e:	2100      	movs	r1, #0
 80a1890:	b280      	uxth	r0, r0
 80a1892:	f002 f8e4 	bl	80a3a5e <digitalWrite>
  static const uint8_t PROGMEM init1[] = {
    SSD1306_DISPLAYOFF,                   // 0xAE
    SSD1306_SETDISPLAYCLOCKDIV,           // 0xD5
    0x80,                                 // the suggested ratio 0x80
    SSD1306_SETMULTIPLEX };               // 0xA8
  ssd1306_commandList(init1, sizeof(init1));
 80a1896:	2204      	movs	r2, #4
 80a1898:	493a      	ldr	r1, [pc, #232]	; (80a1984 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
 80a189a:	4620      	mov	r0, r4
 80a189c:	f7ff fed9 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 80a18a0:	7aa1      	ldrb	r1, [r4, #10]
 80a18a2:	4620      	mov	r0, r4
 80a18a4:	3901      	subs	r1, #1
 80a18a6:	b2c9      	uxtb	r1, r1
 80a18a8:	f7ff fe64 	bl	80a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM init2[] = {
    SSD1306_SETDISPLAYOFFSET,             // 0xD3
    0x0,                                  // no offset
    SSD1306_SETSTARTLINE | 0x0,           // line #0
    SSD1306_CHARGEPUMP };                 // 0x8D
  ssd1306_commandList(init2, sizeof(init2));
 80a18ac:	4936      	ldr	r1, [pc, #216]	; (80a1988 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
 80a18ae:	2204      	movs	r2, #4
 80a18b0:	4620      	mov	r0, r4
 80a18b2:	f7ff fece 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>

  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80a18b6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a18ba:	4620      	mov	r0, r4
 80a18bc:	2b01      	cmp	r3, #1
 80a18be:	bf14      	ite	ne
 80a18c0:	2114      	movne	r1, #20
 80a18c2:	2110      	moveq	r1, #16
 80a18c4:	f7ff fe56 	bl	80a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM init3[] = {
    SSD1306_MEMORYMODE,                   // 0x20
    0x00,                                 // 0x0 act like ks0108
    SSD1306_SEGREMAP | 0x1,
    SSD1306_COMSCANDEC };
  ssd1306_commandList(init3, sizeof(init3));
 80a18c8:	2204      	movs	r2, #4
 80a18ca:	4930      	ldr	r1, [pc, #192]	; (80a198c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
 80a18cc:	4620      	mov	r0, r4
 80a18ce:	f7ff fec0 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>

  if((WIDTH == 128) && (HEIGHT == 32)) {
 80a18d2:	68a3      	ldr	r3, [r4, #8]
 80a18d4:	4a2e      	ldr	r2, [pc, #184]	; (80a1990 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
 80a18d6:	4293      	cmp	r3, r2
 80a18d8:	d105      	bne.n	80a18e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1be>
    static const uint8_t PROGMEM init4a[] = {
      SSD1306_SETCOMPINS,                 // 0xDA
      0x02,
      SSD1306_SETCONTRAST,                // 0x81
      0x8F };
    ssd1306_commandList(init4a, sizeof(init4a));
 80a18da:	2204      	movs	r2, #4
 80a18dc:	492d      	ldr	r1, [pc, #180]	; (80a1994 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
 80a18de:	4620      	mov	r0, r4
 80a18e0:	f7ff feb7 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
 80a18e4:	e01f      	b.n	80a1926 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
 80a18e6:	4a2c      	ldr	r2, [pc, #176]	; (80a1998 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
 80a18e8:	4293      	cmp	r3, r2
 80a18ea:	d10b      	bne.n	80a1904 <_ZN16Adafruit_SSD13065beginEhhbb+0x1dc>
    static const uint8_t PROGMEM init4b[] = {
      SSD1306_SETCOMPINS,                 // 0xDA
      0x12,
      SSD1306_SETCONTRAST };              // 0x81
    ssd1306_commandList(init4b, sizeof(init4b));
 80a18ec:	492b      	ldr	r1, [pc, #172]	; (80a199c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
 80a18ee:	2203      	movs	r2, #3
 80a18f0:	4620      	mov	r0, r4
 80a18f2:	f7ff feae 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
 80a18f6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a18fa:	2b01      	cmp	r3, #1
 80a18fc:	bf14      	ite	ne
 80a18fe:	21cf      	movne	r1, #207	; 0xcf
 80a1900:	219f      	moveq	r1, #159	; 0x9f
 80a1902:	e00d      	b.n	80a1920 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f8>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
 80a1904:	4a26      	ldr	r2, [pc, #152]	; (80a19a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
 80a1906:	4293      	cmp	r3, r2
 80a1908:	d10d      	bne.n	80a1926 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fe>
    static const uint8_t PROGMEM init4c[] = {
      SSD1306_SETCOMPINS,                 // 0xDA
      0x2,    // ada x12
      SSD1306_SETCONTRAST };              // 0x81
    ssd1306_commandList(init4c, sizeof(init4c));
 80a190a:	4926      	ldr	r1, [pc, #152]	; (80a19a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
 80a190c:	2203      	movs	r2, #3
 80a190e:	4620      	mov	r0, r4
 80a1910:	f7ff fe9f 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a1914:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a1918:	2b01      	cmp	r3, #1
 80a191a:	bf14      	ite	ne
 80a191c:	21af      	movne	r1, #175	; 0xaf
 80a191e:	2110      	moveq	r1, #16
 80a1920:	4620      	mov	r0, r4
 80a1922:	f7ff fe27 	bl	80a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  } else {
    // Other screen varieties -- TBD
  }

  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 80a1926:	21d9      	movs	r1, #217	; 0xd9
 80a1928:	4620      	mov	r0, r4
 80a192a:	f7ff fe23 	bl	80a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80a192e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a1932:	4620      	mov	r0, r4
 80a1934:	2b01      	cmp	r3, #1
 80a1936:	bf14      	ite	ne
 80a1938:	21f1      	movne	r1, #241	; 0xf1
 80a193a:	2122      	moveq	r1, #34	; 0x22
 80a193c:	f7ff fe1a 	bl	80a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    0x40,
    SSD1306_DISPLAYALLON_RESUME,         // 0xA4
    SSD1306_NORMALDISPLAY,               // 0xA6
    SSD1306_DEACTIVATE_SCROLL,
    SSD1306_DISPLAYON };                 // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));
 80a1940:	4620      	mov	r0, r4
 80a1942:	2206      	movs	r2, #6
 80a1944:	4918      	ldr	r1, [pc, #96]	; (80a19a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
 80a1946:	f7ff fe84 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>

  TRANSACTION_END
 80a194a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a194c:	b118      	cbz	r0, 80a1956 <_ZN16Adafruit_SSD13065beginEhhbb+0x22e>
 80a194e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80a1950:	f001 ff5a 	bl	80a3808 <_ZN7TwoWire8setSpeedEm>
 80a1954:	e009      	b.n	80a196a <_ZN16Adafruit_SSD13065beginEhhbb+0x242>
 80a1956:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a195a:	2101      	movs	r1, #1
 80a195c:	b280      	uxth	r0, r0
 80a195e:	f002 f87e 	bl	80a3a5e <digitalWrite>
 80a1962:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1964:	b108      	cbz	r0, 80a196a <_ZN16Adafruit_SSD13065beginEhhbb+0x242>
 80a1966:	f000 feee 	bl	80a2746 <_ZN8SPIClass14endTransactionEv>

  return true; // Success
 80a196a:	2001      	movs	r0, #1
 80a196c:	e003      	b.n	80a1976 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
#endif
    }
  }

  // Reset SSD1306 if requested and reset pin specified in constructor
  if(reset && (rstPin >= 0)) {
 80a196e:	2e00      	cmp	r6, #0
 80a1970:	f47f af5f 	bne.w	80a1832 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
 80a1974:	e77f      	b.n	80a1876 <_ZN16Adafruit_SSD13065beginEhhbb+0x14e>
  ssd1306_commandList(init5, sizeof(init5));

  TRANSACTION_END

  return true; // Success
}
 80a1976:	b004      	add	sp, #16
 80a1978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a197c:	080a52b8 	.word	0x080a52b8
 80a1980:	080a5578 	.word	0x080a5578
 80a1984:	080a523e 	.word	0x080a523e
 80a1988:	080a5242 	.word	0x080a5242
 80a198c:	080a5246 	.word	0x080a5246
 80a1990:	00200080 	.word	0x00200080
 80a1994:	080a5237 	.word	0x080a5237
 80a1998:	00400080 	.word	0x00400080
 80a199c:	080a523b 	.word	0x080a523b
 80a19a0:	00100060 	.word	0x00100060
 80a19a4:	080a5234 	.word	0x080a5234
 80a19a8:	080a524a 	.word	0x080a524a

080a19ac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  if(bSwap) drawFastVLineInternal(x, y, w, color);
  else      drawFastHLineInternal(x, y, w, color);
}

void Adafruit_SSD1306::drawFastHLineInternal(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a19ac:	b570      	push	{r4, r5, r6, lr}

  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a19ae:	2a00      	cmp	r2, #0
  if(bSwap) drawFastVLineInternal(x, y, w, color);
  else      drawFastHLineInternal(x, y, w, color);
}

void Adafruit_SSD1306::drawFastHLineInternal(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a19b0:	f8bd 5010 	ldrh.w	r5, [sp, #16]

  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a19b4:	db44      	blt.n	80a1a40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a19b6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a19ba:	4294      	cmp	r4, r2
 80a19bc:	dd40      	ble.n	80a1a40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
    if(x < 0) { // Clip left
 80a19be:	2900      	cmp	r1, #0
      w += x;
 80a19c0:	bfbe      	ittt	lt
 80a19c2:	185b      	addlt	r3, r3, r1
 80a19c4:	b21b      	sxthlt	r3, r3
      x  = 0;
 80a19c6:	2100      	movlt	r1, #0
    }
    if((x + w) > WIDTH) { // Clip right
 80a19c8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80a19cc:	185c      	adds	r4, r3, r1
 80a19ce:	42b4      	cmp	r4, r6
      w = (WIDTH - x);
 80a19d0:	bfc4      	itt	gt
 80a19d2:	1a73      	subgt	r3, r6, r1
 80a19d4:	b21b      	sxthgt	r3, r3
    }
    if(w > 0) { // Proceed only if width is positive
 80a19d6:	2b00      	cmp	r3, #0
 80a19d8:	dd32      	ble.n	80a1a40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a19da:	2408      	movs	r4, #8
 80a19dc:	fb92 f4f4 	sdiv	r4, r2, r4
 80a19e0:	fb06 1104 	mla	r1, r6, r4, r1
 80a19e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
               mask = 1 << (y & 7);
 80a19e6:	f002 0207 	and.w	r2, r2, #7
    }
    if((x + w) > WIDTH) { // Clip right
      w = (WIDTH - x);
    }
    if(w > 0) { // Proceed only if width is positive
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a19ea:	4408      	add	r0, r1
               mask = 1 << (y & 7);
 80a19ec:	2101      	movs	r1, #1
 80a19ee:	fa01 f202 	lsl.w	r2, r1, r2
      switch(color) {
 80a19f2:	428d      	cmp	r5, r1
    if((x + w) > WIDTH) { // Clip right
      w = (WIDTH - x);
    }
    if(w > 0) { // Proceed only if width is positive
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
               mask = 1 << (y & 7);
 80a19f4:	b2d2      	uxtb	r2, r2
      switch(color) {
 80a19f6:	d003      	beq.n	80a1a00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x54>
 80a19f8:	d30c      	bcc.n	80a1a14 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 80a19fa:	2d02      	cmp	r5, #2
 80a19fc:	d016      	beq.n	80a1a2c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x80>
 80a19fe:	bd70      	pop	{r4, r5, r6, pc}
 80a1a00:	3b01      	subs	r3, #1
 80a1a02:	b21b      	sxth	r3, r3
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
 80a1a04:	1c5d      	adds	r5, r3, #1
 80a1a06:	d01b      	beq.n	80a1a40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a1a08:	f810 1b01 	ldrb.w	r1, [r0], #1
 80a1a0c:	4311      	orrs	r1, r2
 80a1a0e:	f800 1c01 	strb.w	r1, [r0, #-1]
 80a1a12:	e7f5      	b.n	80a1a00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x54>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
 80a1a14:	43d2      	mvns	r2, r2
 80a1a16:	b2d2      	uxtb	r2, r2
 80a1a18:	3b01      	subs	r3, #1
 80a1a1a:	b21b      	sxth	r3, r3
 80a1a1c:	1c5c      	adds	r4, r3, #1
 80a1a1e:	d00f      	beq.n	80a1a40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a1a20:	f810 1b01 	ldrb.w	r1, [r0], #1
 80a1a24:	4011      	ands	r1, r2
 80a1a26:	f800 1c01 	strb.w	r1, [r0, #-1]
 80a1a2a:	e7f5      	b.n	80a1a18 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x6c>
 80a1a2c:	3b01      	subs	r3, #1
 80a1a2e:	b21b      	sxth	r3, r3
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
 80a1a30:	1c59      	adds	r1, r3, #1
 80a1a32:	d005      	beq.n	80a1a40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a1a34:	f810 1b01 	ldrb.w	r1, [r0], #1
 80a1a38:	4051      	eors	r1, r2
 80a1a3a:	f800 1c01 	strb.w	r1, [r0, #-1]
 80a1a3e:	e7f5      	b.n	80a1a2c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x80>
 80a1a40:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1a44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  if(bSwap) drawFastHLineInternal(x, y, h, color);
  else      drawFastVLineInternal(x, y, h, color);
}

void Adafruit_SSD1306::drawFastVLineInternal(
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a1a44:	b5f0      	push	{r4, r5, r6, r7, lr}

  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a1a46:	2900      	cmp	r1, #0
  if(bSwap) drawFastHLineInternal(x, y, h, color);
  else      drawFastVLineInternal(x, y, h, color);
}

void Adafruit_SSD1306::drawFastVLineInternal(
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a1a48:	f8bd 5014 	ldrh.w	r5, [sp, #20]

  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a1a4c:	f2c0 8088 	blt.w	80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
 80a1a50:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
 80a1a54:	4571      	cmp	r1, lr
 80a1a56:	f280 8083 	bge.w	80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
    if(__y < 0) { // Clip top
 80a1a5a:	2a00      	cmp	r2, #0
      __h += __y;
 80a1a5c:	bfbe      	ittt	lt
 80a1a5e:	189b      	addlt	r3, r3, r2
 80a1a60:	b21b      	sxthlt	r3, r3
      __y = 0;
 80a1a62:	2200      	movlt	r2, #0
    }
    if((__y + __h) > HEIGHT) { // Clip bottom
 80a1a64:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a1a68:	18d6      	adds	r6, r2, r3
 80a1a6a:	42a6      	cmp	r6, r4
      __h = (HEIGHT - __y);
 80a1a6c:	bfc4      	itt	gt
 80a1a6e:	1aa3      	subgt	r3, r4, r2
 80a1a70:	b21b      	sxthgt	r3, r3
    }
    if(__h > 0) { // Proceed only if height is now positive
 80a1a72:	2b00      	cmp	r3, #0
 80a1a74:	dd74      	ble.n	80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t  y = __y, h = __h;
 80a1a76:	b2d2      	uxtb	r2, r2
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a1a78:	08d4      	lsrs	r4, r2, #3
 80a1a7a:	fb0e 1104 	mla	r1, lr, r4, r1
 80a1a7e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
      if(mod) {
 80a1a80:	f012 0207 	ands.w	r2, r2, #7
      __h = (HEIGHT - __y);
    }
    if(__h > 0) { // Proceed only if height is now positive
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t  y = __y, h = __h;
 80a1a84:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a1a86:	eb06 0401 	add.w	r4, r6, r1

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
      if(mod) {
 80a1a8a:	d02b      	beq.n	80a1ae4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xa0>
        // mask off the high n bits we want to set
        mod = 8 - mod;
 80a1a8c:	f1c2 0208 	rsb	r2, r2, #8
 80a1a90:	b2d2      	uxtb	r2, r2
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] =
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a1a92:	4f34      	ldr	r7, [pc, #208]	; (80a1b64 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x120>)
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a1a94:	4293      	cmp	r3, r2
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] =
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a1a96:	5cbf      	ldrb	r7, [r7, r2]
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a1a98:	d20d      	bcs.n	80a1ab6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x72>
 80a1a9a:	ebc3 0c02 	rsb	ip, r3, r2
 80a1a9e:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80a1aa2:	fa4e fe0c 	asr.w	lr, lr, ip

        switch(color) {
 80a1aa6:	2d01      	cmp	r5, #1
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] =
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a1aa8:	ea0e 0707 	and.w	r7, lr, r7

        switch(color) {
 80a1aac:	d005      	beq.n	80a1aba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x76>
 80a1aae:	d30a      	bcc.n	80a1ac6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
 80a1ab0:	2d02      	cmp	r5, #2
 80a1ab2:	d155      	bne.n	80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
 80a1ab4:	e00c      	b.n	80a1ad0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
 80a1ab6:	2d01      	cmp	r5, #1
 80a1ab8:	d104      	bne.n	80a1ac4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
 80a1aba:	f816 e001 	ldrb.w	lr, [r6, r1]
 80a1abe:	ea47 070e 	orr.w	r7, r7, lr
 80a1ac2:	e009      	b.n	80a1ad8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x94>
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));

        switch(color) {
 80a1ac4:	d248      	bcs.n	80a1b58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x114>
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
 80a1ac6:	f816 e001 	ldrb.w	lr, [r6, r1]
 80a1aca:	ea2e 0707 	bic.w	r7, lr, r7
 80a1ace:	e003      	b.n	80a1ad8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x94>
         case INVERSE: *pBuf ^=  mask; break;
 80a1ad0:	f816 e001 	ldrb.w	lr, [r6, r1]
 80a1ad4:	ea87 070e 	eor.w	r7, r7, lr
        }
        pBuf += WIDTH;
      }

      if(h >= mod) { // More to go?
 80a1ad8:	4293      	cmp	r3, r2
        if(h < mod) mask &= (0XFF >> (mod - h));

        switch(color) {
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
         case INVERSE: *pBuf ^=  mask; break;
 80a1ada:	5477      	strb	r7, [r6, r1]
        }
        pBuf += WIDTH;
      }

      if(h >= mod) { // More to go?
 80a1adc:	d340      	bcc.n	80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
        switch(color) {
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
         case INVERSE: *pBuf ^=  mask; break;
        }
        pBuf += WIDTH;
 80a1ade:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80a1ae2:	440c      	add	r4, r1
      }

      if(h >= mod) { // More to go?
        h -= mod;
 80a1ae4:	1a9b      	subs	r3, r3, r2
 80a1ae6:	b2db      	uxtb	r3, r3
        // Write solid bytes while we can - effectively 8 rows at a time
        if(h >= 8) {
 80a1ae8:	2b07      	cmp	r3, #7
 80a1aea:	d91c      	bls.n	80a1b26 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe2>
          if(color == INVERSE) {
 80a1aec:	2d02      	cmp	r5, #2
 80a1aee:	d10b      	bne.n	80a1b08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xc4>
 80a1af0:	461a      	mov	r2, r3
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF;  // Invert byte
 80a1af2:	7821      	ldrb	r1, [r4, #0]
              pBuf  += WIDTH; // Advance pointer 8 rows
              h     -= 8;     // Subtract 8 rows from height
 80a1af4:	3a08      	subs	r2, #8
        if(h >= 8) {
          if(color == INVERSE) {
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF;  // Invert byte
 80a1af6:	43c9      	mvns	r1, r1
 80a1af8:	7021      	strb	r1, [r4, #0]
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a1afa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
 80a1afe:	b2d2      	uxtb	r2, r2
            } while(h >= 8);
 80a1b00:	2a07      	cmp	r2, #7
          if(color == INVERSE) {
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF;  // Invert byte
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a1b02:	440c      	add	r4, r1
              h     -= 8;     // Subtract 8 rows from height
            } while(h >= 8);
 80a1b04:	d8f5      	bhi.n	80a1af2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
 80a1b06:	e01e      	b.n	80a1b46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x102>
          } else {
            // store a local value to work with
            uint8_t val = (color != BLACK) ? 255 : 0;
 80a1b08:	2d00      	cmp	r5, #0
 80a1b0a:	bf14      	ite	ne
 80a1b0c:	26ff      	movne	r6, #255	; 0xff
 80a1b0e:	2600      	moveq	r6, #0
 80a1b10:	461a      	mov	r2, r3
            do {
              *pBuf = val;    // Set byte
 80a1b12:	7026      	strb	r6, [r4, #0]
              pBuf += WIDTH;  // Advance pointer 8 rows
              h    -= 8;      // Subtract 8 rows from height
 80a1b14:	3a08      	subs	r2, #8
          } else {
            // store a local value to work with
            uint8_t val = (color != BLACK) ? 255 : 0;
            do {
              *pBuf = val;    // Set byte
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a1b16:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
 80a1b1a:	b2d2      	uxtb	r2, r2
            } while(h >= 8);
 80a1b1c:	2a07      	cmp	r2, #7
          } else {
            // store a local value to work with
            uint8_t val = (color != BLACK) ? 255 : 0;
            do {
              *pBuf = val;    // Set byte
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a1b1e:	440c      	add	r4, r1
              h    -= 8;      // Subtract 8 rows from height
            } while(h >= 8);
 80a1b20:	d8f7      	bhi.n	80a1b12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xce>
 80a1b22:	f003 0307 	and.w	r3, r3, #7
          }
        }

        if(h) { // Do the final partial byte, if necessary
 80a1b26:	b1db      	cbz	r3, 80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] =
            { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a1b28:	4a0f      	ldr	r2, [pc, #60]	; (80a1b68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x124>)
          switch(color) {
 80a1b2a:	2d01      	cmp	r5, #1
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] =
            { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a1b2c:	5cd3      	ldrb	r3, [r2, r3]
          switch(color) {
 80a1b2e:	d003      	beq.n	80a1b38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf4>
 80a1b30:	d305      	bcc.n	80a1b3e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 80a1b32:	2d02      	cmp	r5, #2
 80a1b34:	d114      	bne.n	80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
 80a1b36:	e00b      	b.n	80a1b50 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x10c>
           case WHITE:   *pBuf |=  mask; break;
 80a1b38:	7822      	ldrb	r2, [r4, #0]
 80a1b3a:	4313      	orrs	r3, r2
 80a1b3c:	e00a      	b.n	80a1b54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x110>
           case BLACK:   *pBuf &= ~mask; break;
 80a1b3e:	7822      	ldrb	r2, [r4, #0]
 80a1b40:	ea22 0303 	bic.w	r3, r2, r3
 80a1b44:	e006      	b.n	80a1b54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x110>
              h    -= 8;      // Subtract 8 rows from height
            } while(h >= 8);
          }
        }

        if(h) { // Do the final partial byte, if necessary
 80a1b46:	f013 0307 	ands.w	r3, r3, #7
 80a1b4a:	d009      	beq.n	80a1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] =
            { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a1b4c:	4a06      	ldr	r2, [pc, #24]	; (80a1b68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x124>)
 80a1b4e:	5cd3      	ldrb	r3, [r2, r3]
          switch(color) {
           case WHITE:   *pBuf |=  mask; break;
           case BLACK:   *pBuf &= ~mask; break;
           case INVERSE: *pBuf ^=  mask; break;
 80a1b50:	7822      	ldrb	r2, [r4, #0]
 80a1b52:	4053      	eors	r3, r2
 80a1b54:	7023      	strb	r3, [r4, #0]
          }
        }
      }
    } // endif positive height
  } // endif x in bounds
}
 80a1b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));

        switch(color) {
 80a1b58:	2d02      	cmp	r5, #2
 80a1b5a:	d0b9      	beq.n	80a1ad0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
         case INVERSE: *pBuf ^=  mask; break;
        }
        pBuf += WIDTH;
 80a1b5c:	4474      	add	r4, lr
 80a1b5e:	e7c1      	b.n	80a1ae4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xa0>
 80a1b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1b62:	bf00      	nop
 80a1b64:	080a5250 	.word	0x080a5250
 80a1b68:	080a522c 	.word	0x080a522c

080a1b6c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1b6c:	b470      	push	{r4, r5, r6}
  boolean bSwap = false;
  switch(rotation) {
 80a1b6e:	7e84      	ldrb	r4, [r0, #26]
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1b70:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  boolean bSwap = false;
  switch(rotation) {
 80a1b74:	2c02      	cmp	r4, #2
 80a1b76:	d008      	beq.n	80a1b8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a1b78:	2c03      	cmp	r4, #3
 80a1b7a:	d00f      	beq.n	80a1b9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a1b7c:	2c01      	cmp	r4, #1
 80a1b7e:	d118      	bne.n	80a1bb2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x46>
   case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
 80a1b80:	8905      	ldrh	r5, [r0, #8]
 80a1b82:	3d01      	subs	r5, #1
 80a1b84:	1aac      	subs	r4, r5, r2
 80a1b86:	b224      	sxth	r4, r4
    break;
 80a1b88:	e00d      	b.n	80a1ba6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
   case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x  = WIDTH  - x - 1;
    y  = HEIGHT - y - 1;
 80a1b8a:	8944      	ldrh	r4, [r0, #10]
 80a1b8c:	3c01      	subs	r4, #1
 80a1b8e:	1aa4      	subs	r4, r4, r2
 80a1b90:	b222      	sxth	r2, r4
    x -= (w-1);
 80a1b92:	8904      	ldrh	r4, [r0, #8]
 80a1b94:	1a61      	subs	r1, r4, r1
 80a1b96:	1ac9      	subs	r1, r1, r3
 80a1b98:	b209      	sxth	r1, r1
    break;
 80a1b9a:	e00a      	b.n	80a1bb2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x46>
   case 3:
    // 270 degree rotation, swap x & y for rotation,
    // then invert y and adjust y for w (not to become h)
    bSwap = true;
    ssd1306_swap(x, y);
 80a1b9c:	4614      	mov	r4, r2
    y  = HEIGHT - y - 1;
    y -= (w-1);
 80a1b9e:	8942      	ldrh	r2, [r0, #10]
 80a1ba0:	1ad2      	subs	r2, r2, r3
 80a1ba2:	1a51      	subs	r1, r2, r1
 80a1ba4:	b209      	sxth	r1, r1
    break;
  }

  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a1ba6:	9603      	str	r6, [sp, #12]
 80a1ba8:	460a      	mov	r2, r1
 80a1baa:	4621      	mov	r1, r4
  else      drawFastHLineInternal(x, y, w, color);
}
 80a1bac:	bc70      	pop	{r4, r5, r6}
    y  = HEIGHT - y - 1;
    y -= (w-1);
    break;
  }

  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a1bae:	f7ff bf49 	b.w	80a1a44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
  else      drawFastHLineInternal(x, y, w, color);
 80a1bb2:	9603      	str	r6, [sp, #12]
}
 80a1bb4:	bc70      	pop	{r4, r5, r6}
    y -= (w-1);
    break;
  }

  if(bSwap) drawFastVLineInternal(x, y, w, color);
  else      drawFastHLineInternal(x, y, w, color);
 80a1bb6:	f7ff bef9 	b.w	80a19ac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>

080a1bba <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a1bba:	b430      	push	{r4, r5}
  boolean bSwap = false;
  switch(rotation) {
 80a1bbc:	7e84      	ldrb	r4, [r0, #26]
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a1bbe:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  boolean bSwap = false;
  switch(rotation) {
 80a1bc2:	2c02      	cmp	r4, #2
 80a1bc4:	d008      	beq.n	80a1bd8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a1bc6:	2c03      	cmp	r4, #3
 80a1bc8:	d00f      	beq.n	80a1bea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a1bca:	2c01      	cmp	r4, #1
 80a1bcc:	d118      	bne.n	80a1c00 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x46>
    // 90 degree rotation, swap x & y for rotation,
    // then invert x and adjust x for h (now to become w)
    bSwap = true;
    ssd1306_swap(x, y);
    x  = WIDTH - x - 1;
    x -= (h-1);
 80a1bce:	8904      	ldrh	r4, [r0, #8]
 80a1bd0:	1ae4      	subs	r4, r4, r3
 80a1bd2:	1aa2      	subs	r2, r4, r2
 80a1bd4:	b214      	sxth	r4, r2
    break;
 80a1bd6:	e00d      	b.n	80a1bf4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
   case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH  - x - 1;
 80a1bd8:	8904      	ldrh	r4, [r0, #8]
 80a1bda:	3c01      	subs	r4, #1
 80a1bdc:	1a61      	subs	r1, r4, r1
    y = HEIGHT - y - 1;
    y -= (h-1);
 80a1bde:	8944      	ldrh	r4, [r0, #10]
    x  = WIDTH - x - 1;
    x -= (h-1);
    break;
   case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH  - x - 1;
 80a1be0:	b209      	sxth	r1, r1
    y = HEIGHT - y - 1;
    y -= (h-1);
 80a1be2:	1aa2      	subs	r2, r4, r2
 80a1be4:	1ad2      	subs	r2, r2, r3
 80a1be6:	b212      	sxth	r2, r2
    break;
 80a1be8:	e00a      	b.n	80a1c00 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x46>
   case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y
    bSwap = true;
    ssd1306_swap(x, y);
 80a1bea:	4614      	mov	r4, r2
    y = HEIGHT - y - 1;
 80a1bec:	8942      	ldrh	r2, [r0, #10]
 80a1bee:	3a01      	subs	r2, #1
 80a1bf0:	1a51      	subs	r1, r2, r1
 80a1bf2:	b209      	sxth	r1, r1
    break;
  }

  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a1bf4:	9502      	str	r5, [sp, #8]
 80a1bf6:	460a      	mov	r2, r1
 80a1bf8:	4621      	mov	r1, r4
  else      drawFastVLineInternal(x, y, h, color);
}
 80a1bfa:	bc30      	pop	{r4, r5}
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    break;
  }

  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a1bfc:	f7ff bed6 	b.w	80a19ac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
  else      drawFastVLineInternal(x, y, h, color);
 80a1c00:	9502      	str	r5, [sp, #8]
}
 80a1c02:	bc30      	pop	{r4, r5}
    y = HEIGHT - y - 1;
    break;
  }

  if(bSwap) drawFastHLineInternal(x, y, h, color);
  else      drawFastVLineInternal(x, y, h, color);
 80a1c04:	f7ff bf1e 	b.w	80a1a44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>

080a1c08 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
 80a1c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1c0c:	4604      	mov	r4, r0
  TRANSACTION_START
 80a1c0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a1c10:	b118      	cbz	r0, 80a1c1a <_ZN16Adafruit_SSD13067displayEv+0x12>
 80a1c12:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a1c14:	f001 fdf8 	bl	80a3808 <_ZN7TwoWire8setSpeedEm>
 80a1c18:	e00b      	b.n	80a1c32 <_ZN16Adafruit_SSD13067displayEv+0x2a>
 80a1c1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1c1c:	b118      	cbz	r0, 80a1c26 <_ZN16Adafruit_SSD13067displayEv+0x1e>
 80a1c1e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a1c22:	f000 fdab 	bl	80a277c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
 80a1c26:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1c2a:	2100      	movs	r1, #0
 80a1c2c:	b280      	uxth	r0, r0
 80a1c2e:	f001 ff16 	bl	80a3a5e <digitalWrite>
    SSD1306_PAGEADDR,
    0,                         // Page start address
    0xFF,                      // Page end (not really, but works here)
    SSD1306_COLUMNADDR,
    0 };                       // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
 80a1c32:	2205      	movs	r2, #5
 80a1c34:	493f      	ldr	r1, [pc, #252]	; (80a1d34 <_ZN16Adafruit_SSD13067displayEv+0x12c>)
 80a1c36:	4620      	mov	r0, r4
 80a1c38:	f7ff fd0b 	bl	80a1652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 80a1c3c:	7a21      	ldrb	r1, [r4, #8]
 80a1c3e:	4620      	mov	r0, r4
 80a1c40:	3901      	subs	r1, #1
 80a1c42:	b2c9      	uxtb	r1, r1
 80a1c44:	f7ff fc96 	bl	80a1574 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a1c48:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 80a1c4c:	2308      	movs	r3, #8
 80a1c4e:	3507      	adds	r5, #7
 80a1c50:	fb95 f5f3 	sdiv	r5, r5, r3
 80a1c54:	8923      	ldrh	r3, [r4, #8]
  uint8_t *ptr   = buffer;
 80a1c56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a1c58:	435d      	muls	r5, r3
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
 80a1c5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a1c5c:	b2ad      	uxth	r5, r5
 80a1c5e:	4435      	add	r5, r6
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
 80a1c60:	b340      	cbz	r0, 80a1cb4 <_ZN16Adafruit_SSD13067displayEv+0xac>
    wire->beginTransmission(i2caddr);
 80a1c62:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1c66:	f001 fddd 	bl	80a3824 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 80a1c6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1c6c:	2140      	movs	r1, #64	; 0x40
 80a1c6e:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a1c70:	2701      	movs	r7, #1
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
 80a1c72:	689b      	ldr	r3, [r3, #8]
 80a1c74:	4798      	blx	r3
    uint8_t bytesOut = 1;
    while(count--) {
 80a1c76:	42ae      	cmp	r6, r5
 80a1c78:	d018      	beq.n	80a1cac <_ZN16Adafruit_SSD13067displayEv+0xa4>
      if(bytesOut >= WIRE_MAX) {
 80a1c7a:	2f1f      	cmp	r7, #31
 80a1c7c:	d90d      	bls.n	80a1c9a <_ZN16Adafruit_SSD13067displayEv+0x92>
        wire->endTransmission();
 80a1c7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1c80:	f001 fdd7 	bl	80a3832 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a1c84:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1c88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1c8a:	f001 fdcb 	bl	80a3824 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 80a1c8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1c90:	2140      	movs	r1, #64	; 0x40
 80a1c92:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a1c94:	2701      	movs	r7, #1
    uint8_t bytesOut = 1;
    while(count--) {
      if(bytesOut >= WIRE_MAX) {
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x40);
 80a1c96:	689b      	ldr	r3, [r3, #8]
 80a1c98:	4798      	blx	r3
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
 80a1c9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1c9c:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a1ca0:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a1ca2:	3701      	adds	r7, #1
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x40);
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
 80a1ca4:	689b      	ldr	r3, [r3, #8]
 80a1ca6:	4798      	blx	r3
      bytesOut++;
 80a1ca8:	b2ff      	uxtb	r7, r7
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint8_t bytesOut = 1;
    while(count--) {
 80a1caa:	e7e4      	b.n	80a1c76 <_ZN16Adafruit_SSD13067displayEv+0x6e>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
 80a1cac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1cae:	f001 fdc0 	bl	80a3832 <_ZN7TwoWire15endTransmissionEv>
 80a1cb2:	e02a      	b.n	80a1d0a <_ZN16Adafruit_SSD13067displayEv+0x102>
  } else { // SPI
    SSD1306_MODE_DATA
 80a1cb4:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a1cb8:	2101      	movs	r1, #1
 80a1cba:	b280      	uxth	r0, r0
 80a1cbc:	f001 fecf 	bl	80a3a5e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
 80a1cc0:	42ae      	cmp	r6, r5
 80a1cc2:	d022      	beq.n	80a1d0a <_ZN16Adafruit_SSD13067displayEv+0x102>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a1cc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
 80a1cc6:	f816 9b01 	ldrb.w	r9, [r6], #1
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a1cca:	b118      	cbz	r0, 80a1cd4 <_ZN16Adafruit_SSD13067displayEv+0xcc>
    (void)spi->transfer(d);
 80a1ccc:	4649      	mov	r1, r9
 80a1cce:	f000 fdc4 	bl	80a285a <_ZN8SPIClass8transferEh>
 80a1cd2:	e7f5      	b.n	80a1cc0 <_ZN16Adafruit_SSD13067displayEv+0xb8>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a1cd4:	2708      	movs	r7, #8
 80a1cd6:	f04f 0880 	mov.w	r8, #128	; 0x80
      if(d & bit) *mosiPort |=  mosiPinMask;
      else        *mosiPort &= ~mosiPinMask;
      *clkPort |=  clkPinMask; // Clock high
      *clkPort &= ~clkPinMask; // Clock low
#else
      digitalWrite(mosiPin, d & bit);
 80a1cda:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a1cde:	ea09 0108 	and.w	r1, r9, r8
 80a1ce2:	b280      	uxth	r0, r0
 80a1ce4:	f001 febb 	bl	80a3a5e <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a1ce8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a1cec:	2101      	movs	r1, #1
 80a1cee:	b280      	uxth	r0, r0
 80a1cf0:	f001 feb5 	bl	80a3a5e <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a1cf4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a1cf8:	2100      	movs	r1, #0
 80a1cfa:	b280      	uxth	r0, r0
 80a1cfc:	f001 feaf 	bl	80a3a5e <digitalWrite>
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a1d00:	3f01      	subs	r7, #1
 80a1d02:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a1d06:	d1e8      	bne.n	80a1cda <_ZN16Adafruit_SSD13067displayEv+0xd2>
 80a1d08:	e7da      	b.n	80a1cc0 <_ZN16Adafruit_SSD13067displayEv+0xb8>
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
 80a1d0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1d0c:	b120      	cbz	r0, 80a1d18 <_ZN16Adafruit_SSD13067displayEv+0x110>
 80a1d0e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
#if defined(ESP8266)
  yield();
#endif
}
 80a1d10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1d14:	f001 bd78 	b.w	80a3808 <_ZN7TwoWire8setSpeedEm>
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
 80a1d18:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1d1c:	2101      	movs	r1, #1
 80a1d1e:	b280      	uxth	r0, r0
 80a1d20:	f001 fe9d 	bl	80a3a5e <digitalWrite>
 80a1d24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1d26:	b118      	cbz	r0, 80a1d30 <_ZN16Adafruit_SSD13067displayEv+0x128>
#if defined(ESP8266)
  yield();
#endif
}
 80a1d28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
 80a1d2c:	f000 bd0b 	b.w	80a2746 <_ZN8SPIClass14endTransactionEv>
 80a1d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1d34:	080a5258 	.word	0x080a5258

080a1d38 <_GLOBAL__sub_I__ZN16Adafruit_SSD1306C2EhhP7TwoWireamm>:
 80a1d38:	f000 ba4a 	b.w	80a21d0 <HAL_Pin_Map>

080a1d3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1d3c:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a1d3e:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1d40:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a1d42:	f012 0f01 	tst.w	r2, #1
 80a1d46:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a1d4a:	bf18      	it	ne
 80a1d4c:	5881      	ldrne	r1, [r0, r2]
 80a1d4e:	681b      	ldr	r3, [r3, #0]
 80a1d50:	4410      	add	r0, r2
 80a1d52:	bf18      	it	ne
 80a1d54:	58cb      	ldrne	r3, [r1, r3]
 80a1d56:	4718      	bx	r3

080a1d58 <_ZN14PietteTech_DHT12_isrCallbackEv>:
// NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a1d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // so we'll set _detachISR inside the ISR when we're done
  // and count on code on the main thread to detach it via detachISRIfRequested().
  // Getting another interrupt after we've already requested a detach is benign
  // so we'll just ignore this interrupt and return.

  if (_detachISR) return;
 80a1d5a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
// NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a1d5e:	4604      	mov	r4, r0
  // so we'll set _detachISR inside the ISR when we're done
  // and count on code on the main thread to detach it via detachISRIfRequested().
  // Getting another interrupt after we've already requested a detach is benign
  // so we'll just ignore this interrupt and return.

  if (_detachISR) return;
 80a1d60:	2b00      	cmp	r3, #0
 80a1d62:	f040 8099 	bne.w	80a1e98 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a1d66:	f000 fac3 	bl	80a22f0 <HAL_Timer_Get_Micro_Seconds>

  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 80a1d6a:	f241 7270 	movw	r2, #6000	; 0x1770

  if (_detachISR) return;
#endif

  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a1d6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _us = newUs;
 80a1d70:	63a0      	str	r0, [r4, #56]	; 0x38

  if (_detachISR) return;
#endif

  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a1d72:	1ac3      	subs	r3, r0, r3
  _us = newUs;

  if (delta > 6000) {
 80a1d74:	4293      	cmp	r3, r2
 80a1d76:	d909      	bls.n	80a1d8c <_ZN14PietteTech_DHT12_isrCallbackEv+0x34>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 80a1d78:	f06f 0301 	mvn.w	r3, #1
 80a1d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 80a1d7e:	2303      	movs	r3, #3
 80a1d80:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
    detachInterrupt(_sigPin);
#else
    _detachISR = true;
 80a1d84:	2301      	movs	r3, #1
 80a1d86:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80a1d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
    return;
  }
  switch (_state) {
 80a1d8c:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 80a1d90:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 80a1d94:	b111      	cbz	r1, 80a1d9c <_ZN14PietteTech_DHT12_isrCallbackEv+0x44>
 80a1d96:	2a01      	cmp	r2, #1
 80a1d98:	d01e      	beq.n	80a1dd8 <_ZN14PietteTech_DHT12_isrCallbackEv+0x80>
 80a1d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  case RESPONSE:            // Spec: 80us LOW followed by 80us HIGH
    if (delta < 65) {       // Spec: 20-200us to first falling edge of response
 80a1d9c:	2b40      	cmp	r3, #64	; 0x40
 80a1d9e:	d803      	bhi.n	80a1da8 <_ZN14PietteTech_DHT12_isrCallbackEv+0x50>
      _us -= delta;
 80a1da0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a1da2:	1ad3      	subs	r3, r2, r3
 80a1da4:	63a3      	str	r3, [r4, #56]	; 0x38
 80a1da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      break; //do nothing, it started the response signal
      
// --------------- issue: https://github.com/particle-iot/device-os/issues/1654 -----------------
//    } if (125 < delta && delta < 200) { // originally 
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80a1da8:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 80a1dac:	2a5d      	cmp	r2, #93	; 0x5d
 80a1dae:	b2db      	uxtb	r3, r3
 80a1db0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a1db2:	d804      	bhi.n	80a1dbe <_ZN14PietteTech_DHT12_isrCallbackEv+0x66>
// ----------------------------------------------------------------------------------------------

#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a1db4:	1c51      	adds	r1, r2, #1
 80a1db6:	6421      	str	r1, [r4, #64]	; 0x40
 80a1db8:	7013      	strb	r3, [r2, #0]
#endif
      _state = DATA;
 80a1dba:	2301      	movs	r3, #1
 80a1dbc:	e06a      	b.n	80a1e94 <_ZN14PietteTech_DHT12_isrCallbackEv+0x13c>
    }
    else {
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
      detachInterrupt(_sigPin);
#else
      _detachISR = true;
 80a1dbe:	2101      	movs	r1, #1
 80a1dc0:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
#endif
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a1dc4:	f06f 0102 	mvn.w	r1, #2
 80a1dc8:	62e1      	str	r1, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a1dca:	2103      	movs	r1, #3
 80a1dcc:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a1dd0:	1c51      	adds	r1, r2, #1
 80a1dd2:	6421      	str	r1, [r4, #64]	; 0x40
 80a1dd4:	7013      	strb	r3, [r2, #0]
 80a1dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
 80a1dd8:	f1a3 013d 	sub.w	r1, r3, #61	; 0x3d
 80a1ddc:	295d      	cmp	r1, #93	; 0x5d
 80a1dde:	d84f      	bhi.n	80a1e80 <_ZN14PietteTech_DHT12_isrCallbackEv+0x128>
      _bits[_idx] <<= 1; // shift the data
 80a1de0:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 80a1de4:	2b6e      	cmp	r3, #110	; 0x6e
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
      _bits[_idx] <<= 1; // shift the data
 80a1de6:	4421      	add	r1, r4
 80a1de8:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80a1dec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a1df0:	b2d2      	uxtb	r2, r2
 80a1df2:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80a1df6:	d908      	bls.n	80a1e0a <_ZN14PietteTech_DHT12_isrCallbackEv+0xb2>
        _bits[_idx] |= 1;
 80a1df8:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80a1dfc:	4422      	add	r2, r4
 80a1dfe:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80a1e02:	f041 0101 	orr.w	r1, r1, #1
 80a1e06:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a1e0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a1e0c:	b2db      	uxtb	r3, r3
 80a1e0e:	1c51      	adds	r1, r2, #1
 80a1e10:	6421      	str	r1, [r4, #64]	; 0x40
 80a1e12:	7013      	strb	r3, [r2, #0]
#endif
      if (_cnt == 0) { // we have completed the byte, go to next
 80a1e14:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a1e18:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80a1e1c:	bb4b      	cbnz	r3, 80a1e72 <_ZN14PietteTech_DHT12_isrCallbackEv+0x11a>
        _cnt = 7; // restart at MSB
 80a1e1e:	2307      	movs	r3, #7
 80a1e20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80a1e24:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80a1e28:	3301      	adds	r3, #1
 80a1e2a:	b2db      	uxtb	r3, r3
 80a1e2c:	2b05      	cmp	r3, #5
 80a1e2e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a1e32:	d131      	bne.n	80a1e98 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
          detachInterrupt(_sigPin);
#else
          _detachISR = true;
 80a1e34:	2101      	movs	r1, #1
 80a1e36:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
#endif
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a1e3a:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
 80a1e3e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80a1e42:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
          if (_bits[4] != sum) {
 80a1e46:	443a      	add	r2, r7
          detachInterrupt(_sigPin);
#else
          _detachISR = true;
#endif
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a1e48:	f894 6033 	ldrb.w	r6, [r4, #51]	; 0x33
          if (_bits[4] != sum) {
 80a1e4c:	4413      	add	r3, r2
 80a1e4e:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 80a1e52:	4433      	add	r3, r6
 80a1e54:	b2db      	uxtb	r3, r3
 80a1e56:	42ab      	cmp	r3, r5
 80a1e58:	d004      	beq.n	80a1e64 <_ZN14PietteTech_DHT12_isrCallbackEv+0x10c>
            _status = DHTLIB_ERROR_CHECKSUM;
 80a1e5a:	f04f 33ff 	mov.w	r3, #4294967295
 80a1e5e:	62e3      	str	r3, [r4, #44]	; 0x2c
            _state = STOPPED;
 80a1e60:	2303      	movs	r3, #3
 80a1e62:	e017      	b.n	80a1e94 <_ZN14PietteTech_DHT12_isrCallbackEv+0x13c>
          }
          else {
            _status = DHTLIB_OK;
            _state = ACQUIRED;
 80a1e64:	2302      	movs	r3, #2
          if (_bits[4] != sum) {
            _status = DHTLIB_ERROR_CHECKSUM;
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
 80a1e66:	62e0      	str	r0, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 80a1e68:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            _convert = true;
 80a1e6c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 80a1e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
          break;
        }
      }
      else _cnt--;
 80a1e72:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a1e76:	3b01      	subs	r3, #1
 80a1e78:	b2db      	uxtb	r3, r3
 80a1e7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a1e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else if (delta < 10) {
 80a1e80:	2b09      	cmp	r3, #9
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
      detachInterrupt(_sigPin);
#else
      _detachISR = true;
 80a1e82:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
#endif
      _status = DHTLIB_ERROR_DELTA;
 80a1e86:	bf94      	ite	ls
 80a1e88:	f06f 0205 	mvnls.w	r2, #5
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
      detachInterrupt(_sigPin);
#else
      _detachISR = true;
#endif
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a1e8c:	f06f 0203 	mvnhi.w	r2, #3
 80a1e90:	2303      	movs	r3, #3
 80a1e92:	62e2      	str	r2, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a1e94:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80a1e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1e9a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1e9c:	b538      	push	{r3, r4, r5, lr}
 80a1e9e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1ea0:	d005      	beq.n	80a1eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a1ea2:	2a03      	cmp	r2, #3
 80a1ea4:	d00f      	beq.n	80a1ec6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a1ea6:	2a01      	cmp	r2, #1
 80a1ea8:	d111      	bne.n	80a1ece <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1eaa:	680b      	ldr	r3, [r1, #0]
 80a1eac:	e009      	b.n	80a1ec2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1eae:	200c      	movs	r0, #12
 80a1eb0:	680d      	ldr	r5, [r1, #0]
 80a1eb2:	f7fe f8f4 	bl	80a009e <_Znwj>
 80a1eb6:	4603      	mov	r3, r0
 80a1eb8:	b118      	cbz	r0, 80a1ec2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a1eba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a1ebe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a1ec2:	6023      	str	r3, [r4, #0]
 80a1ec4:	e003      	b.n	80a1ece <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ec6:	210c      	movs	r1, #12
 80a1ec8:	6800      	ldr	r0, [r0, #0]
 80a1eca:	f001 fe81 	bl	80a3bd0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1ece:	2000      	movs	r0, #0
 80a1ed0:	bd38      	pop	{r3, r4, r5, pc}

080a1ed2 <_ZN14PietteTech_DHTC1EhhPFvvE>:
// 
PietteTech_DHT::PietteTech_DHT() {
}

PietteTech_DHT::PietteTech_DHT(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
  _sigPin = sigPin;
 80a1ed2:	6441      	str	r1, [r0, #68]	; 0x44
  _type = dht_type;
 80a1ed4:	6482      	str	r2, [r0, #72]	; 0x48
}
 80a1ed6:	4770      	bx	lr

080a1ed8 <_ZN14PietteTech_DHT5beginEv>:

// 
// NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::begin() {
 80a1ed8:	b538      	push	{r3, r4, r5, lr}
 80a1eda:	4604      	mov	r4, r0
  _firstreading = true;
  _lastreadtime = 0;
  _state = STOPPED;
 80a1edc:	2203      	movs	r2, #3
// NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::begin() {
  _firstreading = true;
  _lastreadtime = 0;
 80a1ede:	2300      	movs	r3, #0
  _state = STOPPED;
 80a1ee0:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
// 
// NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a1ee4:	2501      	movs	r5, #1
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a1ee6:	f06f 0206 	mvn.w	r2, #6
// NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::begin() {
  _firstreading = true;
  _lastreadtime = 0;
 80a1eea:	64c3      	str	r3, [r0, #76]	; 0x4c
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a1eec:	62c2      	str	r2, [r0, #44]	; 0x2c
// 
// NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a1eee:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
  // no extra steps required
#else
  _detachISR = false;
 80a1ef2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
#endif

  pinMode(_sigPin, OUTPUT);
 80a1ef6:	4629      	mov	r1, r5
 80a1ef8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80a1efc:	f001 fd9e 	bl	80a3a3c <pinMode>
  digitalWrite(_sigPin, HIGH);
 80a1f00:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a1f04:	4629      	mov	r1, r5
 80a1f06:	f001 fdaa 	bl	80a3a5e <digitalWrite>
  
  delay(1000); // allow for sensor to settle after startup
}
 80a1f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

  pinMode(_sigPin, OUTPUT);
  digitalWrite(_sigPin, HIGH);
  
  delay(1000); // allow for sensor to settle after startup
 80a1f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1f12:	f000 be5b 	b.w	80a2bcc <delay>
	...

080a1f18 <_ZN14PietteTech_DHT7acquireEv>:
  _sigPin = sigPin;
  _type = dht_type;
  this->begin();
}

int PietteTech_DHT::acquire() {
 80a1f18:	b570      	push	{r4, r5, r6, lr}
 80a1f1a:	4604      	mov	r4, r0
 80a1f1c:	b086      	sub	sp, #24

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1f1e:	f000 f9ef 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a1f22:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a1f26:	b923      	cbnz	r3, 80a1f32 <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80a1f28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a1f2a:	1ac3      	subs	r3, r0, r3
 80a1f2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a1f30:	d30a      	bcc.n	80a1f48 <_ZN14PietteTech_DHT7acquireEv+0x30>
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
  }

  if (_state == STOPPED || _state == ACQUIRED) {
 80a1f32:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a1f36:	2b03      	cmp	r3, #3
 80a1f38:	d008      	beq.n	80a1f4c <_ZN14PietteTech_DHT7acquireEv+0x34>
 80a1f3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a1f3e:	2b02      	cmp	r3, #2
 80a1f40:	d004      	beq.n	80a1f4c <_ZN14PietteTech_DHT7acquireEv+0x34>
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
 80a1f42:	f06f 0004 	mvn.w	r0, #4
 80a1f46:	e061      	b.n	80a200c <_ZN14PietteTech_DHT7acquireEv+0xf4>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
 80a1f48:	2002      	movs	r0, #2
 80a1f4a:	e05f      	b.n	80a200c <_ZN14PietteTech_DHT7acquireEv+0xf4>

  if (_state == STOPPED || _state == ACQUIRED) {
    // 
    // Setup the initial state machine
    // 
    _firstreading = false;
 80a1f4c:	2300      	movs	r3, #0

#if defined(DHT_DEBUG_TIMING)
    // 
    // Clear the debug timings array
    // 
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a1f4e:	461a      	mov	r2, r3

  if (_state == STOPPED || _state == ACQUIRED) {
    // 
    // Setup the initial state machine
    // 
    _firstreading = false;
 80a1f50:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 80a1f54:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 80a1f56:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a

#if defined(DHT_DEBUG_TIMING)
    // 
    // Clear the debug timings array
    // 
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a1f5a:	54e2      	strb	r2, [r4, r3]
 80a1f5c:	3301      	adds	r3, #1
 80a1f5e:	2b29      	cmp	r3, #41	; 0x29
 80a1f60:	f04f 0500 	mov.w	r5, #0
 80a1f64:	d1f9      	bne.n	80a1f5a <_ZN14PietteTech_DHT7acquireEv+0x42>

    // 
    // Set the initial values in the buffer and variables
    // 
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
 80a1f66:	2307      	movs	r3, #7
#endif

    // 
    // Set the initial values in the buffer and variables
    // 
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 80a1f68:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80a1f6c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80a1f70:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80a1f74:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
 80a1f78:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    _cnt = 7;
 80a1f7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _idx = 0;
    _hum = 0;
 80a1f80:	2300      	movs	r3, #0
 80a1f82:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 80a1f84:	65a3      	str	r3, [r4, #88]	; 0x58

    // 
    // Toggle the digital output to trigger the DHT device
    // to send us temperature and humidity data
    // 
    pinMode(_sigPin, OUTPUT);
 80a1f86:	2101      	movs	r1, #1
 80a1f88:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
#if defined(DHT_DEBUG_TIMING)
    // 
    // Clear the debug timings array
    // 
    for (int i = 0; i < 41; i++) _edges[i] = 0;
    _e = &_edges[0];
 80a1f8c:	6424      	str	r4, [r4, #64]	; 0x40
    // 
    // Set the initial values in the buffer and variables
    // 
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
    _idx = 0;
 80a1f8e:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36

    // 
    // Toggle the digital output to trigger the DHT device
    // to send us temperature and humidity data
    // 
    pinMode(_sigPin, OUTPUT);
 80a1f92:	f001 fd53 	bl	80a3a3c <pinMode>
    digitalWrite(_sigPin, LOW);
 80a1f96:	4629      	mov	r1, r5
 80a1f98:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a1f9c:	f001 fd5f 	bl	80a3a5e <digitalWrite>
    if (_type == DHT11)
 80a1fa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a1fa2:	2b0b      	cmp	r3, #11
 80a1fa4:	d103      	bne.n	80a1fae <_ZN14PietteTech_DHT7acquireEv+0x96>
      delay(18);                  // DHT11 Spec: 18ms min
 80a1fa6:	2012      	movs	r0, #18
 80a1fa8:	f000 fe10 	bl	80a2bcc <delay>
 80a1fac:	e003      	b.n	80a1fb6 <_ZN14PietteTech_DHT7acquireEv+0x9e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a1fae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a1fb2:	f000 f995 	bl	80a22e0 <HAL_Delay_Microseconds>
    else
      delayMicroseconds(1500);    // DHT22 Spec: 0.8-20ms, 1ms typ
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a1fb6:	2100      	movs	r1, #0
 80a1fb8:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a1fbc:	f001 fd3e 	bl	80a3a3c <pinMode>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a1fc0:	f000 f996 	bl	80a22f0 <HAL_Timer_Get_Micro_Seconds>
    // 
    _us = micros();
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
    // no extra steps required
#else
    _detachISR = false;
 80a1fc4:	2500      	movs	r5, #0
                                    // will keep this high until the DHT responds.
    // 
    // Attach the interrupt handler to receive the data once the DHT
    // starts to send us data
    // 
    _us = micros();
 80a1fc6:	63a0      	str	r0, [r4, #56]	; 0x38
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
    // no extra steps required
#else
    _detachISR = false;
 80a1fc8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1fcc:	200c      	movs	r0, #12
#endif

    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80a1fce:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1fd2:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1fd4:	f7fe f863 	bl	80a009e <_Znwj>
 80a1fd8:	b118      	cbz	r0, 80a1fe2 <_ZN14PietteTech_DHT7acquireEv+0xca>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a1fda:	4b0d      	ldr	r3, [pc, #52]	; (80a2010 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1fdc:	6084      	str	r4, [r0, #8]
 80a1fde:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1fe2:	4b0c      	ldr	r3, [pc, #48]	; (80a2014 <_ZN14PietteTech_DHT7acquireEv+0xfc>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1fe4:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1fe6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a1fe8:	4b0b      	ldr	r3, [pc, #44]	; (80a2018 <_ZN14PietteTech_DHT7acquireEv+0x100>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a1fea:	2202      	movs	r2, #2
 80a1fec:	9304      	str	r3, [sp, #16]
 80a1fee:	2300      	movs	r3, #0
 80a1ff0:	9300      	str	r3, [sp, #0]
 80a1ff2:	a902      	add	r1, sp, #8
 80a1ff4:	f04f 33ff 	mov.w	r3, #4294967295
 80a1ff8:	4630      	mov	r0, r6
 80a1ffa:	f001 fafb 	bl	80a35f4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1ffe:	9b04      	ldr	r3, [sp, #16]
 80a2000:	b11b      	cbz	r3, 80a200a <_ZN14PietteTech_DHT7acquireEv+0xf2>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2002:	a902      	add	r1, sp, #8
 80a2004:	2203      	movs	r2, #3
 80a2006:	4608      	mov	r0, r1
 80a2008:	4798      	blx	r3
 80a200a:	2001      	movs	r0, #1

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}
 80a200c:	b006      	add	sp, #24
 80a200e:	bd70      	pop	{r4, r5, r6, pc}
 80a2010:	080a1d59 	.word	0x080a1d59
 80a2014:	080a1d3d 	.word	0x080a1d3d
 80a2018:	080a1e9b 	.word	0x080a1e9b
 80a201c:	00000000 	.word	0x00000000

080a2020 <_ZN14PietteTech_DHT7convertEv>:
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a2020:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a2022:	6c83      	ldr	r3, [r0, #72]	; 0x48
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a2024:	4604      	mov	r4, r0
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a2026:	2b0b      	cmp	r3, #11
 80a2028:	d030      	beq.n	80a208c <_ZN14PietteTech_DHT7convertEv+0x6c>
 80a202a:	db39      	blt.n	80a20a0 <_ZN14PietteTech_DHT7convertEv+0x80>
 80a202c:	3b15      	subs	r3, #21
 80a202e:	2b01      	cmp	r3, #1
 80a2030:	d836      	bhi.n	80a20a0 <_ZN14PietteTech_DHT7convertEv+0x80>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a2032:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a2036:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a203a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a203e:	b280      	uxth	r0, r0
 80a2040:	f002 f876 	bl	80a4130 <__aeabi_i2d>
 80a2044:	a318      	add	r3, pc, #96	; (adr r3, 80a20a8 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a2046:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a204a:	f002 f8d7 	bl	80a41fc <__aeabi_dmul>
 80a204e:	f002 fbcd 	bl	80a47ec <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 80a2052:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a2056:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a2058:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
      word(_bits[2], _bits[3])) * 0.1;
 80a205c:	f013 0f80 	tst.w	r3, #128	; 0x80
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a2060:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
      word(_bits[2], _bits[3])) * 0.1;
 80a2064:	bf1b      	ittet	ne
 80a2066:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
 80a206a:	eb03 2000 	addne.w	r0, r3, r0, lsl #8
 80a206e:	eb03 2000 	addeq.w	r0, r3, r0, lsl #8
 80a2072:	4240      	negne	r0, r0
 80a2074:	bf08      	it	eq
 80a2076:	b280      	uxtheq	r0, r0
 80a2078:	f002 f85a 	bl	80a4130 <__aeabi_i2d>
 80a207c:	a30a      	add	r3, pc, #40	; (adr r3, 80a20a8 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2082:	f002 f8bb 	bl	80a41fc <__aeabi_dmul>
 80a2086:	f002 fbb1 	bl	80a47ec <__aeabi_d2f>
 80a208a:	e008      	b.n	80a209e <_ZN14PietteTech_DHT7convertEv+0x7e>

void PietteTech_DHT::convert() {
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
  case DHT11:
    _hum = _bits[0];
 80a208c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a2090:	f002 fcb2 	bl	80a49f8 <__aeabi_ui2f>
 80a2094:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 80a2096:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80a209a:	f002 fcad 	bl	80a49f8 <__aeabi_ui2f>
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 80a209e:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 80a20a0:	2300      	movs	r3, #0
 80a20a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a20a6:	bd10      	pop	{r4, pc}
 80a20a8:	9999999a 	.word	0x9999999a
 80a20ac:	3fb99999 	.word	0x3fb99999

080a20b0 <_ZN14PietteTech_DHT9acquiringEv>:
}

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80a20b0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80a20b4:	2b02      	cmp	r3, #2
 80a20b6:	d005      	beq.n	80a20c4 <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80a20b8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80a20bc:	3803      	subs	r0, #3
 80a20be:	bf18      	it	ne
 80a20c0:	2001      	movne	r0, #1
 80a20c2:	4770      	bx	lr
    return true;
  return false;
 80a20c4:	2000      	movs	r0, #0
}
 80a20c6:	4770      	bx	lr

080a20c8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>:
}

#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
// no extra steps required
#else
void PietteTech_DHT::detachISRIfRequested() {
 80a20c8:	b510      	push	{r4, lr}
  if (_detachISR) {
 80a20ca:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
}

#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
// no extra steps required
#else
void PietteTech_DHT::detachISRIfRequested() {
 80a20ce:	4604      	mov	r4, r0
  if (_detachISR) {
 80a20d0:	b133      	cbz	r3, 80a20e0 <_ZN14PietteTech_DHT20detachISRIfRequestedEv+0x18>
    detachInterrupt(_sigPin);
 80a20d2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80a20d6:	f001 fa45 	bl	80a3564 <_Z15detachInterruptt>
    _detachISR = false;
 80a20da:	2300      	movs	r3, #0
 80a20dc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80a20e0:	bd10      	pop	{r4, pc}
	...

080a20e4 <_ZN14PietteTech_DHT10getCelsiusEv>:
  detachISRIfRequested();
#endif
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a20e4:	b510      	push	{r4, lr}
 80a20e6:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a20e8:	f7ff ffee 	bl	80a20c8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80a20ec:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a20f0:	2b03      	cmp	r3, #3
 80a20f2:	d103      	bne.n	80a20fc <_ZN14PietteTech_DHT10getCelsiusEv+0x18>
 80a20f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a20f6:	f002 fc83 	bl	80a4a00 <__aeabi_i2f>
 80a20fa:	bd10      	pop	{r4, pc}
 80a20fc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a2100:	2b02      	cmp	r3, #2
 80a2102:	d107      	bne.n	80a2114 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>
 80a2104:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a2108:	b113      	cbz	r3, 80a2110 <_ZN14PietteTech_DHT10getCelsiusEv+0x2c>
 80a210a:	4620      	mov	r0, r4
 80a210c:	f7ff ff88 	bl	80a2020 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 80a2110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a2112:	bd10      	pop	{r4, pc}
#endif
  return _status;
}

float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
 80a2114:	4800      	ldr	r0, [pc, #0]	; (80a2118 <_ZN14PietteTech_DHT10getCelsiusEv+0x34>)
  return _temp;
}
 80a2116:	bd10      	pop	{r4, pc}
 80a2118:	c0a00000 	.word	0xc0a00000

080a211c <_ZN14PietteTech_DHT11getHumidityEv>:

float PietteTech_DHT::getHumidity() {
 80a211c:	b510      	push	{r4, lr}
 80a211e:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a2120:	f7ff ffd2 	bl	80a20c8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80a2124:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a2128:	2b03      	cmp	r3, #3
 80a212a:	d103      	bne.n	80a2134 <_ZN14PietteTech_DHT11getHumidityEv+0x18>
 80a212c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a212e:	f002 fc67 	bl	80a4a00 <__aeabi_i2f>
 80a2132:	bd10      	pop	{r4, pc}
 80a2134:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a2138:	2b02      	cmp	r3, #2
 80a213a:	d107      	bne.n	80a214c <_ZN14PietteTech_DHT11getHumidityEv+0x30>
 80a213c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a2140:	b113      	cbz	r3, 80a2148 <_ZN14PietteTech_DHT11getHumidityEv+0x2c>
 80a2142:	4620      	mov	r0, r4
 80a2144:	f7ff ff6c 	bl	80a2020 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 80a2148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a214a:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
 80a214c:	4800      	ldr	r0, [pc, #0]	; (80a2150 <_ZN14PietteTech_DHT11getHumidityEv+0x34>)
  return _hum;
}
 80a214e:	bd10      	pop	{r4, pc}
 80a2150:	c0a00000 	.word	0xc0a00000

080a2154 <_ZN14PietteTech_DHT14acquireAndWaitEm>:
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}

int PietteTech_DHT::acquireAndWait(uint32_t timeout) {
 80a2154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2156:	460d      	mov	r5, r1
 80a2158:	4604      	mov	r4, r0
  acquire();
 80a215a:	f7ff fedd 	bl	80a1f18 <_ZN14PietteTech_DHT7acquireEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a215e:	f000 f8cf 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a2162:	4607      	mov	r7, r0
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2164:	4e0e      	ldr	r6, [pc, #56]	; (80a21a0 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x4c>)
  uint32_t start = millis();
  while (acquiring() && (timeout == 0 || ((millis() - start) < timeout))) Particle.process();
 80a2166:	4620      	mov	r0, r4
 80a2168:	f7ff ffa2 	bl	80a20b0 <_ZN14PietteTech_DHT9acquiringEv>
 80a216c:	b158      	cbz	r0, 80a2186 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
 80a216e:	b125      	cbz	r5, 80a217a <_ZN14PietteTech_DHT14acquireAndWaitEm+0x26>
 80a2170:	f000 f8c6 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a2174:	1bc0      	subs	r0, r0, r7
 80a2176:	4285      	cmp	r5, r0
 80a2178:	d905      	bls.n	80a2186 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a217a:	f000 f8c1 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a217e:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a2180:	f000 fa74 	bl	80a266c <spark_process>
 80a2184:	e7ef      	b.n	80a2166 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x12>
  if (acquiring())
 80a2186:	4620      	mov	r0, r4
 80a2188:	f7ff ff92 	bl	80a20b0 <_ZN14PietteTech_DHT9acquiringEv>
 80a218c:	b110      	cbz	r0, 80a2194 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x40>
  {
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a218e:	f06f 0302 	mvn.w	r3, #2
 80a2192:	62e3      	str	r3, [r4, #44]	; 0x2c

int PietteTech_DHT::getStatus() {
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
  // no extra steps required
#else
  detachISRIfRequested();
 80a2194:	4620      	mov	r0, r4
 80a2196:	f7ff ff97 	bl	80a20c8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
#endif
  return _status;
 80a219a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (acquiring())
  {
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
  }
  return getStatus();
}
 80a219c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a219e:	bf00      	nop
 80a21a0:	20000674 	.word	0x20000674

080a21a4 <_ZN14PietteTech_DHT15readTemperatureEv>:
}

// 
// Added methods for supporting Adafruit Unified Sensor framework
// 
float PietteTech_DHT::readTemperature() {
 80a21a4:	b510      	push	{r4, lr}
 80a21a6:	4604      	mov	r4, r0
  acquireAndWait();
 80a21a8:	2100      	movs	r1, #0
 80a21aa:	f7ff ffd3 	bl	80a2154 <_ZN14PietteTech_DHT14acquireAndWaitEm>
  return getCelsius();
 80a21ae:	4620      	mov	r0, r4
}
 80a21b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// 
// Added methods for supporting Adafruit Unified Sensor framework
// 
float PietteTech_DHT::readTemperature() {
  acquireAndWait();
  return getCelsius();
 80a21b4:	f7ff bf96 	b.w	80a20e4 <_ZN14PietteTech_DHT10getCelsiusEv>

080a21b8 <_ZN14PietteTech_DHT12readHumidityEv>:
}

float PietteTech_DHT::readHumidity() {
 80a21b8:	b510      	push	{r4, lr}
 80a21ba:	4604      	mov	r4, r0
  acquireAndWait();
 80a21bc:	2100      	movs	r1, #0
 80a21be:	f7ff ffc9 	bl	80a2154 <_ZN14PietteTech_DHT14acquireAndWaitEm>
  return getHumidity();
 80a21c2:	4620      	mov	r0, r4
}
 80a21c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getCelsius();
}

float PietteTech_DHT::readHumidity() {
  acquireAndWait();
  return getHumidity();
 80a21c8:	f7ff bfa8 	b.w	80a211c <_ZN14PietteTech_DHT11getHumidityEv>

080a21cc <_GLOBAL__sub_I__Z4wordhh>:
 80a21cc:	f000 b800 	b.w	80a21d0 <HAL_Pin_Map>

080a21d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a21d0:	b508      	push	{r3, lr}
 80a21d2:	4b02      	ldr	r3, [pc, #8]	; (80a21dc <HAL_Pin_Map+0xc>)
 80a21d4:	681b      	ldr	r3, [r3, #0]
 80a21d6:	681b      	ldr	r3, [r3, #0]
 80a21d8:	9301      	str	r3, [sp, #4]
 80a21da:	bd08      	pop	{r3, pc}
 80a21dc:	080601b0 	.word	0x080601b0

080a21e0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a21e0:	b508      	push	{r3, lr}
 80a21e2:	4b02      	ldr	r3, [pc, #8]	; (80a21ec <HAL_Validate_Pin_Function+0xc>)
 80a21e4:	681b      	ldr	r3, [r3, #0]
 80a21e6:	685b      	ldr	r3, [r3, #4]
 80a21e8:	9301      	str	r3, [sp, #4]
 80a21ea:	bd08      	pop	{r3, pc}
 80a21ec:	080601b0 	.word	0x080601b0

080a21f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a21f0:	b508      	push	{r3, lr}
 80a21f2:	4b02      	ldr	r3, [pc, #8]	; (80a21fc <HAL_Pin_Mode+0xc>)
 80a21f4:	681b      	ldr	r3, [r3, #0]
 80a21f6:	689b      	ldr	r3, [r3, #8]
 80a21f8:	9301      	str	r3, [sp, #4]
 80a21fa:	bd08      	pop	{r3, pc}
 80a21fc:	080601b0 	.word	0x080601b0

080a2200 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2200:	b508      	push	{r3, lr}
 80a2202:	4b02      	ldr	r3, [pc, #8]	; (80a220c <HAL_Get_Pin_Mode+0xc>)
 80a2204:	681b      	ldr	r3, [r3, #0]
 80a2206:	68db      	ldr	r3, [r3, #12]
 80a2208:	9301      	str	r3, [sp, #4]
 80a220a:	bd08      	pop	{r3, pc}
 80a220c:	080601b0 	.word	0x080601b0

080a2210 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2210:	b508      	push	{r3, lr}
 80a2212:	4b02      	ldr	r3, [pc, #8]	; (80a221c <HAL_GPIO_Write+0xc>)
 80a2214:	681b      	ldr	r3, [r3, #0]
 80a2216:	691b      	ldr	r3, [r3, #16]
 80a2218:	9301      	str	r3, [sp, #4]
 80a221a:	bd08      	pop	{r3, pc}
 80a221c:	080601b0 	.word	0x080601b0

080a2220 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a2220:	b508      	push	{r3, lr}
 80a2222:	4b02      	ldr	r3, [pc, #8]	; (80a222c <HAL_GPIO_Read+0xc>)
 80a2224:	681b      	ldr	r3, [r3, #0]
 80a2226:	695b      	ldr	r3, [r3, #20]
 80a2228:	9301      	str	r3, [sp, #4]
 80a222a:	bd08      	pop	{r3, pc}
 80a222c:	080601b0 	.word	0x080601b0

080a2230 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a2230:	b508      	push	{r3, lr}
 80a2232:	4b02      	ldr	r3, [pc, #8]	; (80a223c <HAL_Interrupts_Attach+0xc>)
 80a2234:	681b      	ldr	r3, [r3, #0]
 80a2236:	699b      	ldr	r3, [r3, #24]
 80a2238:	9301      	str	r3, [sp, #4]
 80a223a:	bd08      	pop	{r3, pc}
 80a223c:	080601b0 	.word	0x080601b0

080a2240 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a2240:	b508      	push	{r3, lr}
 80a2242:	4b02      	ldr	r3, [pc, #8]	; (80a224c <HAL_Interrupts_Detach+0xc>)
 80a2244:	681b      	ldr	r3, [r3, #0]
 80a2246:	69db      	ldr	r3, [r3, #28]
 80a2248:	9301      	str	r3, [sp, #4]
 80a224a:	bd08      	pop	{r3, pc}
 80a224c:	080601b0 	.word	0x080601b0

080a2250 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a2250:	b508      	push	{r3, lr}
 80a2252:	4b02      	ldr	r3, [pc, #8]	; (80a225c <HAL_DAC_Write+0xc>)
 80a2254:	681b      	ldr	r3, [r3, #0]
 80a2256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2258:	9301      	str	r3, [sp, #4]
 80a225a:	bd08      	pop	{r3, pc}
 80a225c:	080601b0 	.word	0x080601b0

080a2260 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a2260:	b508      	push	{r3, lr}
 80a2262:	4b02      	ldr	r3, [pc, #8]	; (80a226c <HAL_PWM_Write_Ext+0xc>)
 80a2264:	681b      	ldr	r3, [r3, #0]
 80a2266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a2268:	9301      	str	r3, [sp, #4]
 80a226a:	bd08      	pop	{r3, pc}
 80a226c:	080601b0 	.word	0x080601b0

080a2270 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2270:	b508      	push	{r3, lr}
 80a2272:	4b02      	ldr	r3, [pc, #8]	; (80a227c <HAL_SPI_Begin+0xc>)
 80a2274:	681b      	ldr	r3, [r3, #0]
 80a2276:	681b      	ldr	r3, [r3, #0]
 80a2278:	9301      	str	r3, [sp, #4]
 80a227a:	bd08      	pop	{r3, pc}
 80a227c:	080601b4 	.word	0x080601b4

080a2280 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2280:	b508      	push	{r3, lr}
 80a2282:	4b02      	ldr	r3, [pc, #8]	; (80a228c <HAL_SPI_Send_Receive_Data+0xc>)
 80a2284:	681b      	ldr	r3, [r3, #0]
 80a2286:	695b      	ldr	r3, [r3, #20]
 80a2288:	9301      	str	r3, [sp, #4]
 80a228a:	bd08      	pop	{r3, pc}
 80a228c:	080601b4 	.word	0x080601b4

080a2290 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2290:	b508      	push	{r3, lr}
 80a2292:	4b02      	ldr	r3, [pc, #8]	; (80a229c <HAL_SPI_Init+0xc>)
 80a2294:	681b      	ldr	r3, [r3, #0]
 80a2296:	69db      	ldr	r3, [r3, #28]
 80a2298:	9301      	str	r3, [sp, #4]
 80a229a:	bd08      	pop	{r3, pc}
 80a229c:	080601b4 	.word	0x080601b4

080a22a0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a22a0:	b508      	push	{r3, lr}
 80a22a2:	4b02      	ldr	r3, [pc, #8]	; (80a22ac <HAL_SPI_Is_Enabled+0xc>)
 80a22a4:	681b      	ldr	r3, [r3, #0]
 80a22a6:	6a1b      	ldr	r3, [r3, #32]
 80a22a8:	9301      	str	r3, [sp, #4]
 80a22aa:	bd08      	pop	{r3, pc}
 80a22ac:	080601b4 	.word	0x080601b4

080a22b0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a22b0:	b508      	push	{r3, lr}
 80a22b2:	4b02      	ldr	r3, [pc, #8]	; (80a22bc <HAL_SPI_Info+0xc>)
 80a22b4:	681b      	ldr	r3, [r3, #0]
 80a22b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a22b8:	9301      	str	r3, [sp, #4]
 80a22ba:	bd08      	pop	{r3, pc}
 80a22bc:	080601b4 	.word	0x080601b4

080a22c0 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a22c0:	b508      	push	{r3, lr}
 80a22c2:	4b02      	ldr	r3, [pc, #8]	; (80a22cc <HAL_SPI_Set_Settings+0xc>)
 80a22c4:	681b      	ldr	r3, [r3, #0]
 80a22c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a22c8:	9301      	str	r3, [sp, #4]
 80a22ca:	bd08      	pop	{r3, pc}
 80a22cc:	080601b4 	.word	0x080601b4

080a22d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a22d0:	b508      	push	{r3, lr}
 80a22d2:	4b02      	ldr	r3, [pc, #8]	; (80a22dc <HAL_RNG_GetRandomNumber+0xc>)
 80a22d4:	681b      	ldr	r3, [r3, #0]
 80a22d6:	685b      	ldr	r3, [r3, #4]
 80a22d8:	9301      	str	r3, [sp, #4]
 80a22da:	bd08      	pop	{r3, pc}
 80a22dc:	0806019c 	.word	0x0806019c

080a22e0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a22e0:	b508      	push	{r3, lr}
 80a22e2:	4b02      	ldr	r3, [pc, #8]	; (80a22ec <HAL_Delay_Microseconds+0xc>)
 80a22e4:	681b      	ldr	r3, [r3, #0]
 80a22e6:	68db      	ldr	r3, [r3, #12]
 80a22e8:	9301      	str	r3, [sp, #4]
 80a22ea:	bd08      	pop	{r3, pc}
 80a22ec:	0806019c 	.word	0x0806019c

080a22f0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a22f0:	b508      	push	{r3, lr}
 80a22f2:	4b02      	ldr	r3, [pc, #8]	; (80a22fc <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a22f4:	681b      	ldr	r3, [r3, #0]
 80a22f6:	691b      	ldr	r3, [r3, #16]
 80a22f8:	9301      	str	r3, [sp, #4]
 80a22fa:	bd08      	pop	{r3, pc}
 80a22fc:	0806019c 	.word	0x0806019c

080a2300 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2300:	b508      	push	{r3, lr}
 80a2302:	4b02      	ldr	r3, [pc, #8]	; (80a230c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2304:	681b      	ldr	r3, [r3, #0]
 80a2306:	695b      	ldr	r3, [r3, #20]
 80a2308:	9301      	str	r3, [sp, #4]
 80a230a:	bd08      	pop	{r3, pc}
 80a230c:	0806019c 	.word	0x0806019c

080a2310 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2310:	b508      	push	{r3, lr}
 80a2312:	4b02      	ldr	r3, [pc, #8]	; (80a231c <os_mutex_create+0xc>)
 80a2314:	681b      	ldr	r3, [r3, #0]
 80a2316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2318:	9301      	str	r3, [sp, #4]
 80a231a:	bd08      	pop	{r3, pc}
 80a231c:	080601d0 	.word	0x080601d0

080a2320 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
 80a2320:	b508      	push	{r3, lr}
 80a2322:	4b02      	ldr	r3, [pc, #8]	; (80a232c <os_mutex_destroy+0xc>)
 80a2324:	681b      	ldr	r3, [r3, #0]
 80a2326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2328:	9301      	str	r3, [sp, #4]
 80a232a:	bd08      	pop	{r3, pc}
 80a232c:	080601d0 	.word	0x080601d0

080a2330 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a2330:	b508      	push	{r3, lr}
 80a2332:	4b02      	ldr	r3, [pc, #8]	; (80a233c <os_mutex_recursive_create+0xc>)
 80a2334:	681b      	ldr	r3, [r3, #0]
 80a2336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2338:	9301      	str	r3, [sp, #4]
 80a233a:	bd08      	pop	{r3, pc}
 80a233c:	080601d0 	.word	0x080601d0

080a2340 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a2340:	b508      	push	{r3, lr}
 80a2342:	4b02      	ldr	r3, [pc, #8]	; (80a234c <os_mutex_recursive_destroy+0xc>)
 80a2344:	681b      	ldr	r3, [r3, #0]
 80a2346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2348:	9301      	str	r3, [sp, #4]
 80a234a:	bd08      	pop	{r3, pc}
 80a234c:	080601d0 	.word	0x080601d0

080a2350 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a2350:	b508      	push	{r3, lr}
 80a2352:	4b02      	ldr	r3, [pc, #8]	; (80a235c <os_mutex_recursive_lock+0xc>)
 80a2354:	681b      	ldr	r3, [r3, #0]
 80a2356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2358:	9301      	str	r3, [sp, #4]
 80a235a:	bd08      	pop	{r3, pc}
 80a235c:	080601d0 	.word	0x080601d0

080a2360 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a2360:	b508      	push	{r3, lr}
 80a2362:	4b02      	ldr	r3, [pc, #8]	; (80a236c <os_mutex_recursive_unlock+0xc>)
 80a2364:	681b      	ldr	r3, [r3, #0]
 80a2366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2368:	9301      	str	r3, [sp, #4]
 80a236a:	bd08      	pop	{r3, pc}
 80a236c:	080601d0 	.word	0x080601d0

080a2370 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2370:	b508      	push	{r3, lr}
 80a2372:	4b02      	ldr	r3, [pc, #8]	; (80a237c <HAL_USART_Init+0xc>)
 80a2374:	681b      	ldr	r3, [r3, #0]
 80a2376:	699b      	ldr	r3, [r3, #24]
 80a2378:	9301      	str	r3, [sp, #4]
 80a237a:	bd08      	pop	{r3, pc}
 80a237c:	080601c4 	.word	0x080601c4

080a2380 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80a2380:	b508      	push	{r3, lr}
 80a2382:	4b02      	ldr	r3, [pc, #8]	; (80a238c <HAL_USART_End+0xc>)
 80a2384:	681b      	ldr	r3, [r3, #0]
 80a2386:	6a1b      	ldr	r3, [r3, #32]
 80a2388:	9301      	str	r3, [sp, #4]
 80a238a:	bd08      	pop	{r3, pc}
 80a238c:	080601c4 	.word	0x080601c4

080a2390 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2390:	b508      	push	{r3, lr}
 80a2392:	4b02      	ldr	r3, [pc, #8]	; (80a239c <HAL_USART_Write_Data+0xc>)
 80a2394:	681b      	ldr	r3, [r3, #0]
 80a2396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2398:	9301      	str	r3, [sp, #4]
 80a239a:	bd08      	pop	{r3, pc}
 80a239c:	080601c4 	.word	0x080601c4

080a23a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a23a0:	b508      	push	{r3, lr}
 80a23a2:	4b02      	ldr	r3, [pc, #8]	; (80a23ac <HAL_USART_Available_Data+0xc>)
 80a23a4:	681b      	ldr	r3, [r3, #0]
 80a23a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a23a8:	9301      	str	r3, [sp, #4]
 80a23aa:	bd08      	pop	{r3, pc}
 80a23ac:	080601c4 	.word	0x080601c4

080a23b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a23b0:	b508      	push	{r3, lr}
 80a23b2:	4b02      	ldr	r3, [pc, #8]	; (80a23bc <HAL_USART_Read_Data+0xc>)
 80a23b4:	681b      	ldr	r3, [r3, #0]
 80a23b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a23b8:	9301      	str	r3, [sp, #4]
 80a23ba:	bd08      	pop	{r3, pc}
 80a23bc:	080601c4 	.word	0x080601c4

080a23c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a23c0:	b508      	push	{r3, lr}
 80a23c2:	4b02      	ldr	r3, [pc, #8]	; (80a23cc <HAL_USART_Peek_Data+0xc>)
 80a23c4:	681b      	ldr	r3, [r3, #0]
 80a23c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a23c8:	9301      	str	r3, [sp, #4]
 80a23ca:	bd08      	pop	{r3, pc}
 80a23cc:	080601c4 	.word	0x080601c4

080a23d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a23d0:	b508      	push	{r3, lr}
 80a23d2:	4b02      	ldr	r3, [pc, #8]	; (80a23dc <HAL_USART_Flush_Data+0xc>)
 80a23d4:	681b      	ldr	r3, [r3, #0]
 80a23d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a23d8:	9301      	str	r3, [sp, #4]
 80a23da:	bd08      	pop	{r3, pc}
 80a23dc:	080601c4 	.word	0x080601c4

080a23e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a23e0:	b508      	push	{r3, lr}
 80a23e2:	4b02      	ldr	r3, [pc, #8]	; (80a23ec <HAL_USART_Is_Enabled+0xc>)
 80a23e4:	681b      	ldr	r3, [r3, #0]
 80a23e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a23e8:	9301      	str	r3, [sp, #4]
 80a23ea:	bd08      	pop	{r3, pc}
 80a23ec:	080601c4 	.word	0x080601c4

080a23f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a23f0:	b508      	push	{r3, lr}
 80a23f2:	4b02      	ldr	r3, [pc, #8]	; (80a23fc <HAL_USART_Available_Data_For_Write+0xc>)
 80a23f4:	681b      	ldr	r3, [r3, #0]
 80a23f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a23f8:	9301      	str	r3, [sp, #4]
 80a23fa:	bd08      	pop	{r3, pc}
 80a23fc:	080601c4 	.word	0x080601c4

080a2400 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a2400:	b508      	push	{r3, lr}
 80a2402:	4b02      	ldr	r3, [pc, #8]	; (80a240c <HAL_USART_BeginConfig+0xc>)
 80a2404:	681b      	ldr	r3, [r3, #0]
 80a2406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2408:	9301      	str	r3, [sp, #4]
 80a240a:	bd08      	pop	{r3, pc}
 80a240c:	080601c4 	.word	0x080601c4

080a2410 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a2410:	b508      	push	{r3, lr}
 80a2412:	4b02      	ldr	r3, [pc, #8]	; (80a241c <HAL_I2C_Set_Speed+0xc>)
 80a2414:	681b      	ldr	r3, [r3, #0]
 80a2416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2418:	9301      	str	r3, [sp, #4]
 80a241a:	bd08      	pop	{r3, pc}
 80a241c:	080601ac 	.word	0x080601ac

080a2420 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2420:	b508      	push	{r3, lr}
 80a2422:	4b02      	ldr	r3, [pc, #8]	; (80a242c <HAL_I2C_Begin+0xc>)
 80a2424:	681b      	ldr	r3, [r3, #0]
 80a2426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2428:	9301      	str	r3, [sp, #4]
 80a242a:	bd08      	pop	{r3, pc}
 80a242c:	080601ac 	.word	0x080601ac

080a2430 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a2430:	b508      	push	{r3, lr}
 80a2432:	4b02      	ldr	r3, [pc, #8]	; (80a243c <HAL_I2C_Begin_Transmission+0xc>)
 80a2434:	681b      	ldr	r3, [r3, #0]
 80a2436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2438:	9301      	str	r3, [sp, #4]
 80a243a:	bd08      	pop	{r3, pc}
 80a243c:	080601ac 	.word	0x080601ac

080a2440 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2440:	b508      	push	{r3, lr}
 80a2442:	4b02      	ldr	r3, [pc, #8]	; (80a244c <HAL_I2C_End_Transmission+0xc>)
 80a2444:	681b      	ldr	r3, [r3, #0]
 80a2446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2448:	9301      	str	r3, [sp, #4]
 80a244a:	bd08      	pop	{r3, pc}
 80a244c:	080601ac 	.word	0x080601ac

080a2450 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2450:	b508      	push	{r3, lr}
 80a2452:	4b02      	ldr	r3, [pc, #8]	; (80a245c <HAL_I2C_Write_Data+0xc>)
 80a2454:	681b      	ldr	r3, [r3, #0]
 80a2456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2458:	9301      	str	r3, [sp, #4]
 80a245a:	bd08      	pop	{r3, pc}
 80a245c:	080601ac 	.word	0x080601ac

080a2460 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2460:	b508      	push	{r3, lr}
 80a2462:	4b02      	ldr	r3, [pc, #8]	; (80a246c <HAL_I2C_Available_Data+0xc>)
 80a2464:	681b      	ldr	r3, [r3, #0]
 80a2466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2468:	9301      	str	r3, [sp, #4]
 80a246a:	bd08      	pop	{r3, pc}
 80a246c:	080601ac 	.word	0x080601ac

080a2470 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2470:	b508      	push	{r3, lr}
 80a2472:	4b02      	ldr	r3, [pc, #8]	; (80a247c <HAL_I2C_Read_Data+0xc>)
 80a2474:	681b      	ldr	r3, [r3, #0]
 80a2476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2478:	9301      	str	r3, [sp, #4]
 80a247a:	bd08      	pop	{r3, pc}
 80a247c:	080601ac 	.word	0x080601ac

080a2480 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2480:	b508      	push	{r3, lr}
 80a2482:	4b02      	ldr	r3, [pc, #8]	; (80a248c <HAL_I2C_Peek_Data+0xc>)
 80a2484:	681b      	ldr	r3, [r3, #0]
 80a2486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2488:	9301      	str	r3, [sp, #4]
 80a248a:	bd08      	pop	{r3, pc}
 80a248c:	080601ac 	.word	0x080601ac

080a2490 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2490:	b508      	push	{r3, lr}
 80a2492:	4b02      	ldr	r3, [pc, #8]	; (80a249c <HAL_I2C_Flush_Data+0xc>)
 80a2494:	681b      	ldr	r3, [r3, #0]
 80a2496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2498:	9301      	str	r3, [sp, #4]
 80a249a:	bd08      	pop	{r3, pc}
 80a249c:	080601ac 	.word	0x080601ac

080a24a0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a24a0:	b508      	push	{r3, lr}
 80a24a2:	4b02      	ldr	r3, [pc, #8]	; (80a24ac <HAL_I2C_Is_Enabled+0xc>)
 80a24a4:	681b      	ldr	r3, [r3, #0]
 80a24a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a24a8:	9301      	str	r3, [sp, #4]
 80a24aa:	bd08      	pop	{r3, pc}
 80a24ac:	080601ac 	.word	0x080601ac

080a24b0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a24b0:	b508      	push	{r3, lr}
 80a24b2:	4b03      	ldr	r3, [pc, #12]	; (80a24c0 <HAL_I2C_Init+0x10>)
 80a24b4:	681b      	ldr	r3, [r3, #0]
 80a24b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a24ba:	9301      	str	r3, [sp, #4]
 80a24bc:	bd08      	pop	{r3, pc}
 80a24be:	0000      	.short	0x0000
 80a24c0:	080601ac 	.word	0x080601ac

080a24c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a24c4:	b508      	push	{r3, lr}
 80a24c6:	4b02      	ldr	r3, [pc, #8]	; (80a24d0 <HAL_USB_USART_Init+0xc>)
 80a24c8:	681b      	ldr	r3, [r3, #0]
 80a24ca:	681b      	ldr	r3, [r3, #0]
 80a24cc:	9301      	str	r3, [sp, #4]
 80a24ce:	bd08      	pop	{r3, pc}
 80a24d0:	080601d8 	.word	0x080601d8

080a24d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a24d4:	b508      	push	{r3, lr}
 80a24d6:	4b02      	ldr	r3, [pc, #8]	; (80a24e0 <HAL_USB_USART_Available_Data+0xc>)
 80a24d8:	681b      	ldr	r3, [r3, #0]
 80a24da:	691b      	ldr	r3, [r3, #16]
 80a24dc:	9301      	str	r3, [sp, #4]
 80a24de:	bd08      	pop	{r3, pc}
 80a24e0:	080601d8 	.word	0x080601d8

080a24e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a24e4:	b508      	push	{r3, lr}
 80a24e6:	4b02      	ldr	r3, [pc, #8]	; (80a24f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a24e8:	681b      	ldr	r3, [r3, #0]
 80a24ea:	695b      	ldr	r3, [r3, #20]
 80a24ec:	9301      	str	r3, [sp, #4]
 80a24ee:	bd08      	pop	{r3, pc}
 80a24f0:	080601d8 	.word	0x080601d8

080a24f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a24f4:	b508      	push	{r3, lr}
 80a24f6:	4b02      	ldr	r3, [pc, #8]	; (80a2500 <HAL_USB_USART_Receive_Data+0xc>)
 80a24f8:	681b      	ldr	r3, [r3, #0]
 80a24fa:	699b      	ldr	r3, [r3, #24]
 80a24fc:	9301      	str	r3, [sp, #4]
 80a24fe:	bd08      	pop	{r3, pc}
 80a2500:	080601d8 	.word	0x080601d8

080a2504 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2504:	b508      	push	{r3, lr}
 80a2506:	4b02      	ldr	r3, [pc, #8]	; (80a2510 <HAL_USB_USART_Send_Data+0xc>)
 80a2508:	681b      	ldr	r3, [r3, #0]
 80a250a:	69db      	ldr	r3, [r3, #28]
 80a250c:	9301      	str	r3, [sp, #4]
 80a250e:	bd08      	pop	{r3, pc}
 80a2510:	080601d8 	.word	0x080601d8

080a2514 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2514:	b508      	push	{r3, lr}
 80a2516:	4b02      	ldr	r3, [pc, #8]	; (80a2520 <HAL_USB_USART_Flush_Data+0xc>)
 80a2518:	681b      	ldr	r3, [r3, #0]
 80a251a:	6a1b      	ldr	r3, [r3, #32]
 80a251c:	9301      	str	r3, [sp, #4]
 80a251e:	bd08      	pop	{r3, pc}
 80a2520:	080601d8 	.word	0x080601d8

080a2524 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2524:	b508      	push	{r3, lr}
 80a2526:	4b02      	ldr	r3, [pc, #8]	; (80a2530 <inet_gethostbyname+0xc>)
 80a2528:	681b      	ldr	r3, [r3, #0]
 80a252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a252c:	9301      	str	r3, [sp, #4]
 80a252e:	bd08      	pop	{r3, pc}
 80a2530:	080601c0 	.word	0x080601c0

080a2534 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a2534:	b508      	push	{r3, lr}
 80a2536:	4b02      	ldr	r3, [pc, #8]	; (80a2540 <panic_+0xc>)
 80a2538:	681b      	ldr	r3, [r3, #0]
 80a253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a253c:	9301      	str	r3, [sp, #4]
 80a253e:	bd08      	pop	{r3, pc}
 80a2540:	080201a8 	.word	0x080201a8

080a2544 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2544:	b508      	push	{r3, lr}
 80a2546:	4b02      	ldr	r3, [pc, #8]	; (80a2550 <set_system_mode+0xc>)
 80a2548:	681b      	ldr	r3, [r3, #0]
 80a254a:	685b      	ldr	r3, [r3, #4]
 80a254c:	9301      	str	r3, [sp, #4]
 80a254e:	bd08      	pop	{r3, pc}
 80a2550:	080601a4 	.word	0x080601a4

080a2554 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2554:	b508      	push	{r3, lr}
 80a2556:	4b02      	ldr	r3, [pc, #8]	; (80a2560 <system_delay_ms+0xc>)
 80a2558:	681b      	ldr	r3, [r3, #0]
 80a255a:	695b      	ldr	r3, [r3, #20]
 80a255c:	9301      	str	r3, [sp, #4]
 80a255e:	bd08      	pop	{r3, pc}
 80a2560:	080601a4 	.word	0x080601a4

080a2564 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2564:	b508      	push	{r3, lr}
 80a2566:	4b02      	ldr	r3, [pc, #8]	; (80a2570 <system_thread_set_state+0xc>)
 80a2568:	681b      	ldr	r3, [r3, #0]
 80a256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a256c:	9301      	str	r3, [sp, #4]
 80a256e:	bd08      	pop	{r3, pc}
 80a2570:	080601a4 	.word	0x080601a4

080a2574 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2574:	b508      	push	{r3, lr}
 80a2576:	4b02      	ldr	r3, [pc, #8]	; (80a2580 <application_thread_current+0xc>)
 80a2578:	681b      	ldr	r3, [r3, #0]
 80a257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a257c:	9301      	str	r3, [sp, #4]
 80a257e:	bd08      	pop	{r3, pc}
 80a2580:	080601a4 	.word	0x080601a4

080a2584 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2584:	b508      	push	{r3, lr}
 80a2586:	4b02      	ldr	r3, [pc, #8]	; (80a2590 <application_thread_invoke+0xc>)
 80a2588:	681b      	ldr	r3, [r3, #0]
 80a258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a258c:	9301      	str	r3, [sp, #4]
 80a258e:	bd08      	pop	{r3, pc}
 80a2590:	080601a4 	.word	0x080601a4

080a2594 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2594:	b508      	push	{r3, lr}
 80a2596:	4b03      	ldr	r3, [pc, #12]	; (80a25a4 <system_ctrl_set_app_request_handler+0x10>)
 80a2598:	681b      	ldr	r3, [r3, #0]
 80a259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a259e:	9301      	str	r3, [sp, #4]
 80a25a0:	bd08      	pop	{r3, pc}
 80a25a2:	0000      	.short	0x0000
 80a25a4:	080601a4 	.word	0x080601a4

080a25a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a25a8:	b508      	push	{r3, lr}
 80a25aa:	4b03      	ldr	r3, [pc, #12]	; (80a25b8 <system_ctrl_set_result+0x10>)
 80a25ac:	681b      	ldr	r3, [r3, #0]
 80a25ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a25b2:	9301      	str	r3, [sp, #4]
 80a25b4:	bd08      	pop	{r3, pc}
 80a25b6:	0000      	.short	0x0000
 80a25b8:	080601a4 	.word	0x080601a4

080a25bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a25bc:	b508      	push	{r3, lr}
 80a25be:	4b02      	ldr	r3, [pc, #8]	; (80a25c8 <network_connect+0xc>)
 80a25c0:	681b      	ldr	r3, [r3, #0]
 80a25c2:	685b      	ldr	r3, [r3, #4]
 80a25c4:	9301      	str	r3, [sp, #4]
 80a25c6:	bd08      	pop	{r3, pc}
 80a25c8:	080601c8 	.word	0x080601c8

080a25cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a25cc:	b508      	push	{r3, lr}
 80a25ce:	4b02      	ldr	r3, [pc, #8]	; (80a25d8 <network_connecting+0xc>)
 80a25d0:	681b      	ldr	r3, [r3, #0]
 80a25d2:	689b      	ldr	r3, [r3, #8]
 80a25d4:	9301      	str	r3, [sp, #4]
 80a25d6:	bd08      	pop	{r3, pc}
 80a25d8:	080601c8 	.word	0x080601c8

080a25dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a25dc:	b508      	push	{r3, lr}
 80a25de:	4b02      	ldr	r3, [pc, #8]	; (80a25e8 <network_disconnect+0xc>)
 80a25e0:	681b      	ldr	r3, [r3, #0]
 80a25e2:	68db      	ldr	r3, [r3, #12]
 80a25e4:	9301      	str	r3, [sp, #4]
 80a25e6:	bd08      	pop	{r3, pc}
 80a25e8:	080601c8 	.word	0x080601c8

080a25ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a25ec:	b508      	push	{r3, lr}
 80a25ee:	4b02      	ldr	r3, [pc, #8]	; (80a25f8 <network_ready+0xc>)
 80a25f0:	681b      	ldr	r3, [r3, #0]
 80a25f2:	691b      	ldr	r3, [r3, #16]
 80a25f4:	9301      	str	r3, [sp, #4]
 80a25f6:	bd08      	pop	{r3, pc}
 80a25f8:	080601c8 	.word	0x080601c8

080a25fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a25fc:	b508      	push	{r3, lr}
 80a25fe:	4b02      	ldr	r3, [pc, #8]	; (80a2608 <network_on+0xc>)
 80a2600:	681b      	ldr	r3, [r3, #0]
 80a2602:	695b      	ldr	r3, [r3, #20]
 80a2604:	9301      	str	r3, [sp, #4]
 80a2606:	bd08      	pop	{r3, pc}
 80a2608:	080601c8 	.word	0x080601c8

080a260c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a260c:	b508      	push	{r3, lr}
 80a260e:	4b02      	ldr	r3, [pc, #8]	; (80a2618 <network_off+0xc>)
 80a2610:	681b      	ldr	r3, [r3, #0]
 80a2612:	699b      	ldr	r3, [r3, #24]
 80a2614:	9301      	str	r3, [sp, #4]
 80a2616:	bd08      	pop	{r3, pc}
 80a2618:	080601c8 	.word	0x080601c8

080a261c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a261c:	b508      	push	{r3, lr}
 80a261e:	4b02      	ldr	r3, [pc, #8]	; (80a2628 <network_listen+0xc>)
 80a2620:	681b      	ldr	r3, [r3, #0]
 80a2622:	69db      	ldr	r3, [r3, #28]
 80a2624:	9301      	str	r3, [sp, #4]
 80a2626:	bd08      	pop	{r3, pc}
 80a2628:	080601c8 	.word	0x080601c8

080a262c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a262c:	b508      	push	{r3, lr}
 80a262e:	4b02      	ldr	r3, [pc, #8]	; (80a2638 <network_listening+0xc>)
 80a2630:	681b      	ldr	r3, [r3, #0]
 80a2632:	6a1b      	ldr	r3, [r3, #32]
 80a2634:	9301      	str	r3, [sp, #4]
 80a2636:	bd08      	pop	{r3, pc}
 80a2638:	080601c8 	.word	0x080601c8

080a263c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a263c:	b508      	push	{r3, lr}
 80a263e:	4b02      	ldr	r3, [pc, #8]	; (80a2648 <network_set_listen_timeout+0xc>)
 80a2640:	681b      	ldr	r3, [r3, #0]
 80a2642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2644:	9301      	str	r3, [sp, #4]
 80a2646:	bd08      	pop	{r3, pc}
 80a2648:	080601c8 	.word	0x080601c8

080a264c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a264c:	b508      	push	{r3, lr}
 80a264e:	4b02      	ldr	r3, [pc, #8]	; (80a2658 <network_get_listen_timeout+0xc>)
 80a2650:	681b      	ldr	r3, [r3, #0]
 80a2652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2654:	9301      	str	r3, [sp, #4]
 80a2656:	bd08      	pop	{r3, pc}
 80a2658:	080601c8 	.word	0x080601c8

080a265c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a265c:	b508      	push	{r3, lr}
 80a265e:	4b02      	ldr	r3, [pc, #8]	; (80a2668 <spark_variable+0xc>)
 80a2660:	681b      	ldr	r3, [r3, #0]
 80a2662:	681b      	ldr	r3, [r3, #0]
 80a2664:	9301      	str	r3, [sp, #4]
 80a2666:	bd08      	pop	{r3, pc}
 80a2668:	080601cc 	.word	0x080601cc

080a266c <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a266c:	b508      	push	{r3, lr}
 80a266e:	4b02      	ldr	r3, [pc, #8]	; (80a2678 <spark_process+0xc>)
 80a2670:	681b      	ldr	r3, [r3, #0]
 80a2672:	689b      	ldr	r3, [r3, #8]
 80a2674:	9301      	str	r3, [sp, #4]
 80a2676:	bd08      	pop	{r3, pc}
 80a2678:	080601cc 	.word	0x080601cc

080a267c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a267c:	b508      	push	{r3, lr}
 80a267e:	4b02      	ldr	r3, [pc, #8]	; (80a2688 <spark_cloud_flag_connected+0xc>)
 80a2680:	681b      	ldr	r3, [r3, #0]
 80a2682:	695b      	ldr	r3, [r3, #20]
 80a2684:	9301      	str	r3, [sp, #4]
 80a2686:	bd08      	pop	{r3, pc}
 80a2688:	080601cc 	.word	0x080601cc

080a268c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a268c:	b508      	push	{r3, lr}
 80a268e:	4b02      	ldr	r3, [pc, #8]	; (80a2698 <spark_send_event+0xc>)
 80a2690:	681b      	ldr	r3, [r3, #0]
 80a2692:	6a1b      	ldr	r3, [r3, #32]
 80a2694:	9301      	str	r3, [sp, #4]
 80a2696:	bd08      	pop	{r3, pc}
 80a2698:	080601cc 	.word	0x080601cc

080a269c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a269c:	b508      	push	{r3, lr}
 80a269e:	4b02      	ldr	r3, [pc, #8]	; (80a26a8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a26a0:	681b      	ldr	r3, [r3, #0]
 80a26a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a26a4:	9301      	str	r3, [sp, #4]
 80a26a6:	bd08      	pop	{r3, pc}
 80a26a8:	080601cc 	.word	0x080601cc

080a26ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a26ac:	b508      	push	{r3, lr}
 80a26ae:	4b02      	ldr	r3, [pc, #8]	; (80a26b8 <malloc+0xc>)
 80a26b0:	681b      	ldr	r3, [r3, #0]
 80a26b2:	681b      	ldr	r3, [r3, #0]
 80a26b4:	9301      	str	r3, [sp, #4]
 80a26b6:	bd08      	pop	{r3, pc}
 80a26b8:	080601a0 	.word	0x080601a0

080a26bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a26bc:	b508      	push	{r3, lr}
 80a26be:	4b02      	ldr	r3, [pc, #8]	; (80a26c8 <free+0xc>)
 80a26c0:	681b      	ldr	r3, [r3, #0]
 80a26c2:	685b      	ldr	r3, [r3, #4]
 80a26c4:	9301      	str	r3, [sp, #4]
 80a26c6:	bd08      	pop	{r3, pc}
 80a26c8:	080601a0 	.word	0x080601a0

080a26cc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a26cc:	b508      	push	{r3, lr}
 80a26ce:	4b02      	ldr	r3, [pc, #8]	; (80a26d8 <vsnprintf+0xc>)
 80a26d0:	681b      	ldr	r3, [r3, #0]
 80a26d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a26d4:	9301      	str	r3, [sp, #4]
 80a26d6:	bd08      	pop	{r3, pc}
 80a26d8:	080601a0 	.word	0x080601a0

080a26dc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a26dc:	b508      	push	{r3, lr}
 80a26de:	4b02      	ldr	r3, [pc, #8]	; (80a26e8 <abort+0xc>)
 80a26e0:	681b      	ldr	r3, [r3, #0]
 80a26e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a26e4:	9301      	str	r3, [sp, #4]
 80a26e6:	bd08      	pop	{r3, pc}
 80a26e8:	080601a0 	.word	0x080601a0

080a26ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a26ec:	b508      	push	{r3, lr}
 80a26ee:	4b02      	ldr	r3, [pc, #8]	; (80a26f8 <_malloc_r+0xc>)
 80a26f0:	681b      	ldr	r3, [r3, #0]
 80a26f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a26f4:	9301      	str	r3, [sp, #4]
 80a26f6:	bd08      	pop	{r3, pc}
 80a26f8:	080601a0 	.word	0x080601a0

080a26fc <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a26fc:	6800      	ldr	r0, [r0, #0]
 80a26fe:	f7ff be27 	b.w	80a2350 <os_mutex_recursive_lock>

080a2702 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2702:	6800      	ldr	r0, [r0, #0]
 80a2704:	f7ff be2c 	b.w	80a2360 <os_mutex_recursive_unlock>

080a2708 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2708:	b570      	push	{r4, r5, r6, lr}
 80a270a:	4604      	mov	r4, r0
 80a270c:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a270e:	2500      	movs	r5, #0
 80a2710:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a2714:	f7ff fe0c 	bl	80a2330 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a2718:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a271a:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a271c:	f7ff fdb8 	bl	80a2290 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2720:	6065      	str	r5, [r4, #4]
}
 80a2722:	4620      	mov	r0, r4
 80a2724:	bd70      	pop	{r4, r5, r6, pc}

080a2726 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a2726:	b538      	push	{r3, r4, r5, lr}
 80a2728:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a272a:	f100 0408 	add.w	r4, r0, #8
 80a272e:	4620      	mov	r0, r4
 80a2730:	f7ff ffe4 	bl	80a26fc <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2734:	7828      	ldrb	r0, [r5, #0]
 80a2736:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a273a:	f7ff fd99 	bl	80a2270 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a273e:	4620      	mov	r0, r4
 80a2740:	f7ff ffdf 	bl	80a2702 <_ZN14RecursiveMutex6unlockEv>
 80a2744:	bd38      	pop	{r3, r4, r5, pc}

080a2746 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a2746:	b508      	push	{r3, lr}
 80a2748:	3008      	adds	r0, #8
 80a274a:	f7ff ffda 	bl	80a2702 <_ZN14RecursiveMutex6unlockEv>
 80a274e:	bd08      	pop	{r3, pc}

080a2750 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a2750:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a2752:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a2754:	6018      	str	r0, [r3, #0]
 80a2756:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80a2758:	6818      	ldr	r0, [r3, #0]
 80a275a:	b2e5      	uxtb	r5, r4
 80a275c:	4288      	cmp	r0, r1
 80a275e:	d906      	bls.n	80a276e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2760:	3401      	adds	r4, #1
 80a2762:	2c08      	cmp	r4, #8
 80a2764:	d002      	beq.n	80a276c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a2766:	0840      	lsrs	r0, r0, #1
 80a2768:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80a276a:	e7f5      	b.n	80a2758 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a276c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a276e:	4b02      	ldr	r3, [pc, #8]	; (80a2778 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2770:	5d5b      	ldrb	r3, [r3, r5]
 80a2772:	7013      	strb	r3, [r2, #0]
 80a2774:	bd30      	pop	{r4, r5, pc}
 80a2776:	bf00      	nop
 80a2778:	080a5758 	.word	0x080a5758

080a277c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a277c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2780:	4680      	mov	r8, r0
 80a2782:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2784:	3008      	adds	r0, #8
 80a2786:	460e      	mov	r6, r1
 80a2788:	f7ff ffb8 	bl	80a26fc <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 80a278c:	f898 4000 	ldrb.w	r4, [r8]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2790:	2214      	movs	r2, #20
 80a2792:	2100      	movs	r1, #0
 80a2794:	a809      	add	r0, sp, #36	; 0x24
 80a2796:	f002 f9a0 	bl	80a4ada <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a279a:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80a279c:	4620      	mov	r0, r4
 80a279e:	2200      	movs	r2, #0
 80a27a0:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80a27a2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 80a27a6:	f7ff fd83 	bl	80a22b0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 80a27aa:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a27ae:	b14c      	cbz	r4, 80a27c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a27b0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a27b4:	b92d      	cbnz	r5, 80a27c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a27b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80a27b8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a27bc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a27c0:	e003      	b.n	80a27ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a27c2:	2400      	movs	r4, #0
 80a27c4:	46a1      	mov	r9, r4
 80a27c6:	4627      	mov	r7, r4
 80a27c8:	2501      	movs	r5, #1
 80a27ca:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a27cc:	b10d      	cbz	r5, 80a27d2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a27ce:	2b00      	cmp	r3, #0
 80a27d0:	d13f      	bne.n	80a2852 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 80a27d2:	429d      	cmp	r5, r3
 80a27d4:	d10b      	bne.n	80a27ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a27d6:	68b2      	ldr	r2, [r6, #8]
 80a27d8:	42ba      	cmp	r2, r7
 80a27da:	d108      	bne.n	80a27ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a27dc:	f88d 9020 	strb.w	r9, [sp, #32]
 80a27e0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a27e4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a27e8:	89b2      	ldrh	r2, [r6, #12]
 80a27ea:	4291      	cmp	r1, r2
 80a27ec:	d031      	beq.n	80a2852 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 80a27ee:	b13b      	cbz	r3, 80a2800 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a27f0:	2300      	movs	r3, #0
 80a27f2:	f898 0000 	ldrb.w	r0, [r8]
 80a27f6:	9301      	str	r3, [sp, #4]
 80a27f8:	9300      	str	r3, [sp, #0]
 80a27fa:	461a      	mov	r2, r3
 80a27fc:	2101      	movs	r1, #1
 80a27fe:	e016      	b.n	80a282e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 80a2800:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 80a2804:	68b1      	ldr	r1, [r6, #8]
 80a2806:	ab04      	add	r3, sp, #16
 80a2808:	f10d 020f 	add.w	r2, sp, #15
 80a280c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a280e:	f7ff ff9f 	bl	80a2750 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a2812:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2814:	b105      	cbz	r5, 80a2818 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 80a2816:	b9c9      	cbnz	r1, 80a284c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 80a2818:	42a9      	cmp	r1, r5
 80a281a:	d00b      	beq.n	80a2834 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 80a281c:	2400      	movs	r4, #0
 80a281e:	9401      	str	r4, [sp, #4]
 80a2820:	7b74      	ldrb	r4, [r6, #13]
 80a2822:	7b33      	ldrb	r3, [r6, #12]
 80a2824:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a2828:	f898 0000 	ldrb.w	r0, [r8]
 80a282c:	9400      	str	r4, [sp, #0]
 80a282e:	f7ff fd47 	bl	80a22c0 <HAL_SPI_Set_Settings>
 80a2832:	e00e      	b.n	80a2852 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 80a2834:	68b3      	ldr	r3, [r6, #8]
 80a2836:	42bb      	cmp	r3, r7
 80a2838:	d3f0      	bcc.n	80a281c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a283a:	f88d 9020 	strb.w	r9, [sp, #32]
 80a283e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a2842:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a2846:	89b3      	ldrh	r3, [r6, #12]
 80a2848:	429a      	cmp	r2, r3
 80a284a:	d1e7      	bne.n	80a281c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a284c:	9b04      	ldr	r3, [sp, #16]
 80a284e:	42bb      	cmp	r3, r7
 80a2850:	d1e4      	bne.n	80a281c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 80a2852:	2000      	movs	r0, #0
 80a2854:	b00f      	add	sp, #60	; 0x3c
 80a2856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a285a <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a285a:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a285c:	7800      	ldrb	r0, [r0, #0]
 80a285e:	f7ff fd0f 	bl	80a2280 <HAL_SPI_Send_Receive_Data>
}
 80a2862:	b2c0      	uxtb	r0, r0
 80a2864:	bd08      	pop	{r3, pc}

080a2866 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a2866:	7800      	ldrb	r0, [r0, #0]
 80a2868:	f7ff bd1a 	b.w	80a22a0 <HAL_SPI_Is_Enabled>

080a286c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a286c:	b510      	push	{r4, lr}
 80a286e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a2870:	6800      	ldr	r0, [r0, #0]
 80a2872:	b118      	cbz	r0, 80a287c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a2874:	f7ff ff22 	bl	80a26bc <free>
            wakeupSource_ = nullptr;
 80a2878:	2300      	movs	r3, #0
 80a287a:	6023      	str	r3, [r4, #0]
 80a287c:	bd10      	pop	{r4, pc}

080a287e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a287e:	b510      	push	{r4, lr}
 80a2880:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a2882:	f7ff fff3 	bl	80a286c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2886:	4620      	mov	r0, r4
 80a2888:	bd10      	pop	{r4, pc}
	...

080a288c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a288c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2890:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a2892:	4c08      	ldr	r4, [pc, #32]	; (80a28b4 <_GLOBAL__sub_I_System+0x28>)
 80a2894:	2000      	movs	r0, #0
 80a2896:	6020      	str	r0, [r4, #0]
 80a2898:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a289a:	71a0      	strb	r0, [r4, #6]
 80a289c:	8120      	strh	r0, [r4, #8]
 80a289e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a28a0:	f7ff fe50 	bl	80a2544 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a28a4:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a28a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a28aa:	4a03      	ldr	r2, [pc, #12]	; (80a28b8 <_GLOBAL__sub_I_System+0x2c>)
 80a28ac:	4903      	ldr	r1, [pc, #12]	; (80a28bc <_GLOBAL__sub_I_System+0x30>)
 80a28ae:	f001 b981 	b.w	80a3bb4 <__aeabi_atexit>
 80a28b2:	bf00      	nop
 80a28b4:	2000017c 	.word	0x2000017c
 80a28b8:	20000080 	.word	0x20000080
 80a28bc:	080a287f 	.word	0x080a287f

080a28c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a28c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a28c2:	4606      	mov	r6, r0
 80a28c4:	460d      	mov	r5, r1
 80a28c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a28c8:	2400      	movs	r4, #0
  while (size--) {
 80a28ca:	42bd      	cmp	r5, r7
 80a28cc:	d00c      	beq.n	80a28e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a28ce:	6833      	ldr	r3, [r6, #0]
 80a28d0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a28d4:	689b      	ldr	r3, [r3, #8]
 80a28d6:	4630      	mov	r0, r6
 80a28d8:	4798      	blx	r3
     if (chunk>=0)
 80a28da:	2800      	cmp	r0, #0
 80a28dc:	db01      	blt.n	80a28e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a28de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a28e0:	e7f3      	b.n	80a28ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a28e2:	2c00      	cmp	r4, #0
 80a28e4:	bf08      	it	eq
 80a28e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a28e8:	4620      	mov	r0, r4
 80a28ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a28ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a28ec:	b570      	push	{r4, r5, r6, lr}
 80a28ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a28f0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a28f2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a28f4:	b149      	cbz	r1, 80a290a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a28f6:	f002 f93c 	bl	80a4b72 <strlen>
 80a28fa:	682b      	ldr	r3, [r5, #0]
 80a28fc:	4602      	mov	r2, r0
 80a28fe:	4621      	mov	r1, r4
 80a2900:	4628      	mov	r0, r5
    }
 80a2902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2906:	68db      	ldr	r3, [r3, #12]
 80a2908:	4718      	bx	r3
    }
 80a290a:	bd70      	pop	{r4, r5, r6, pc}

080a290c <_ZN5Print5printEPKc>:
 80a290c:	b508      	push	{r3, lr}
 80a290e:	f7ff ffed 	bl	80a28ec <_ZN5Print5writeEPKc>
 80a2912:	bd08      	pop	{r3, pc}

080a2914 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2914:	6803      	ldr	r3, [r0, #0]
 80a2916:	689b      	ldr	r3, [r3, #8]
 80a2918:	4718      	bx	r3

080a291a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a291a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a291c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a291e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2920:	f7ff fff8 	bl	80a2914 <_ZN5Print5printEc>
  n += print('\n');
 80a2924:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2926:	4604      	mov	r4, r0
  n += print('\n');
 80a2928:	4628      	mov	r0, r5
 80a292a:	f7ff fff3 	bl	80a2914 <_ZN5Print5printEc>
  return n;
}
 80a292e:	4420      	add	r0, r4
 80a2930:	bd38      	pop	{r3, r4, r5, pc}

080a2932 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2932:	b538      	push	{r3, r4, r5, lr}
 80a2934:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2936:	f7ff ffd9 	bl	80a28ec <_ZN5Print5writeEPKc>
 80a293a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a293c:	4628      	mov	r0, r5
 80a293e:	f7ff ffec 	bl	80a291a <_ZN5Print7printlnEv>
  return n;
}
 80a2942:	4420      	add	r0, r4
 80a2944:	bd38      	pop	{r3, r4, r5, pc}

080a2946 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a2946:	f7ff bff4 	b.w	80a2932 <_ZN5Print7printlnEPKc>

080a294a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a294a:	2a01      	cmp	r2, #1
 80a294c:	bf98      	it	ls
 80a294e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2950:	b530      	push	{r4, r5, lr}
 80a2952:	460b      	mov	r3, r1
 80a2954:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2956:	2100      	movs	r1, #0
 80a2958:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a295c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2960:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a2964:	fb05 3312 	mls	r3, r5, r2, r3
 80a2968:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a296a:	2b09      	cmp	r3, #9
 80a296c:	bf94      	ite	ls
 80a296e:	3330      	addls	r3, #48	; 0x30
 80a2970:	3337      	addhi	r3, #55	; 0x37
 80a2972:	b2db      	uxtb	r3, r3
 80a2974:	4621      	mov	r1, r4
 80a2976:	f804 3901 	strb.w	r3, [r4], #-1
 80a297a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a297c:	2d00      	cmp	r5, #0
 80a297e:	d1ef      	bne.n	80a2960 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2980:	f7ff ffb4 	bl	80a28ec <_ZN5Print5writeEPKc>
}
 80a2984:	b00b      	add	sp, #44	; 0x2c
 80a2986:	bd30      	pop	{r4, r5, pc}

080a2988 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a298c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a298e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2990:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2992:	4617      	mov	r7, r2
 80a2994:	461e      	mov	r6, r3
 80a2996:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a299a:	f001 fec9 	bl	80a4730 <__aeabi_dcmpun>
 80a299e:	b108      	cbz	r0, 80a29a4 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a29a0:	494d      	ldr	r1, [pc, #308]	; (80a2ad8 <_ZN5Print10printFloatEdh+0x150>)
 80a29a2:	e012      	b.n	80a29ca <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a29a4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a29a8:	f04f 32ff 	mov.w	r2, #4294967295
 80a29ac:	4b4b      	ldr	r3, [pc, #300]	; (80a2adc <_ZN5Print10printFloatEdh+0x154>)
 80a29ae:	4638      	mov	r0, r7
 80a29b0:	4621      	mov	r1, r4
 80a29b2:	f001 febd 	bl	80a4730 <__aeabi_dcmpun>
 80a29b6:	b968      	cbnz	r0, 80a29d4 <_ZN5Print10printFloatEdh+0x4c>
 80a29b8:	f04f 32ff 	mov.w	r2, #4294967295
 80a29bc:	4b47      	ldr	r3, [pc, #284]	; (80a2adc <_ZN5Print10printFloatEdh+0x154>)
 80a29be:	4638      	mov	r0, r7
 80a29c0:	4621      	mov	r1, r4
 80a29c2:	f001 fe97 	bl	80a46f4 <__aeabi_dcmple>
 80a29c6:	b928      	cbnz	r0, 80a29d4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a29c8:	4945      	ldr	r1, [pc, #276]	; (80a2ae0 <_ZN5Print10printFloatEdh+0x158>)
 80a29ca:	4640      	mov	r0, r8
 80a29cc:	f7ff ff8e 	bl	80a28ec <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a29d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a29d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a29d8:	4b42      	ldr	r3, [pc, #264]	; (80a2ae4 <_ZN5Print10printFloatEdh+0x15c>)
 80a29da:	4638      	mov	r0, r7
 80a29dc:	4631      	mov	r1, r6
 80a29de:	f001 fe9d 	bl	80a471c <__aeabi_dcmpgt>
 80a29e2:	b108      	cbz	r0, 80a29e8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a29e4:	4940      	ldr	r1, [pc, #256]	; (80a2ae8 <_ZN5Print10printFloatEdh+0x160>)
 80a29e6:	e7f0      	b.n	80a29ca <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a29e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a29ec:	4b3f      	ldr	r3, [pc, #252]	; (80a2aec <_ZN5Print10printFloatEdh+0x164>)
 80a29ee:	4638      	mov	r0, r7
 80a29f0:	4631      	mov	r1, r6
 80a29f2:	f001 fe75 	bl	80a46e0 <__aeabi_dcmplt>
 80a29f6:	2800      	cmp	r0, #0
 80a29f8:	d1f4      	bne.n	80a29e4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a29fa:	2200      	movs	r2, #0
 80a29fc:	2300      	movs	r3, #0
 80a29fe:	4638      	mov	r0, r7
 80a2a00:	4631      	mov	r1, r6
 80a2a02:	f001 fe6d 	bl	80a46e0 <__aeabi_dcmplt>
 80a2a06:	b138      	cbz	r0, 80a2a18 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a2a08:	212d      	movs	r1, #45	; 0x2d
 80a2a0a:	4640      	mov	r0, r8
 80a2a0c:	f7ff ff82 	bl	80a2914 <_ZN5Print5printEc>
     number = -number;
 80a2a10:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a2a14:	4604      	mov	r4, r0
 80a2a16:	e000      	b.n	80a2a1a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2a18:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2a1a:	4935      	ldr	r1, [pc, #212]	; (80a2af0 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2a1c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2a20:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a2a22:	fa5f f389 	uxtb.w	r3, r9
 80a2a26:	429d      	cmp	r5, r3
 80a2a28:	d906      	bls.n	80a2a38 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a2a2a:	2200      	movs	r2, #0
 80a2a2c:	4b31      	ldr	r3, [pc, #196]	; (80a2af4 <_ZN5Print10printFloatEdh+0x16c>)
 80a2a2e:	f001 fd0f 	bl	80a4450 <__aeabi_ddiv>
 80a2a32:	f109 0901 	add.w	r9, r9, #1
 80a2a36:	e7f4      	b.n	80a2a22 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a2a38:	463a      	mov	r2, r7
 80a2a3a:	4633      	mov	r3, r6
 80a2a3c:	f001 fa2c 	bl	80a3e98 <__adddf3>
 80a2a40:	460f      	mov	r7, r1
 80a2a42:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2a44:	f001 feb2 	bl	80a47ac <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2a48:	220a      	movs	r2, #10
 80a2a4a:	4601      	mov	r1, r0
 80a2a4c:	4681      	mov	r9, r0
 80a2a4e:	4640      	mov	r0, r8
 80a2a50:	f7ff ff7b 	bl	80a294a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2a54:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a2a56:	b3e5      	cbz	r5, 80a2ad2 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a2a58:	4648      	mov	r0, r9
 80a2a5a:	f001 fb59 	bl	80a4110 <__aeabi_ui2d>
 80a2a5e:	4602      	mov	r2, r0
 80a2a60:	460b      	mov	r3, r1
 80a2a62:	4630      	mov	r0, r6
 80a2a64:	4639      	mov	r1, r7
 80a2a66:	f001 fa15 	bl	80a3e94 <__aeabi_dsub>
 80a2a6a:	4606      	mov	r6, r0
 80a2a6c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2a6e:	4640      	mov	r0, r8
 80a2a70:	4921      	ldr	r1, [pc, #132]	; (80a2af8 <_ZN5Print10printFloatEdh+0x170>)
 80a2a72:	f7ff ff3b 	bl	80a28ec <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a2a76:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a2a78:	2200      	movs	r2, #0
 80a2a7a:	4b1e      	ldr	r3, [pc, #120]	; (80a2af4 <_ZN5Print10printFloatEdh+0x16c>)
 80a2a7c:	4630      	mov	r0, r6
 80a2a7e:	4639      	mov	r1, r7
 80a2a80:	f001 fbbc 	bl	80a41fc <__aeabi_dmul>
 80a2a84:	4606      	mov	r6, r0
 80a2a86:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a2a88:	f001 fe68 	bl	80a475c <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a2a8c:	f1b0 0a00 	subs.w	sl, r0, #0
 80a2a90:	da07      	bge.n	80a2aa2 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a2a92:	212d      	movs	r1, #45	; 0x2d
 80a2a94:	4640      	mov	r0, r8
 80a2a96:	f7ff ff3d 	bl	80a2914 <_ZN5Print5printEc>
            val = -n;
 80a2a9a:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a2a9e:	4681      	mov	r9, r0
 80a2aa0:	e002      	b.n	80a2aa8 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a2aa2:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a2aa4:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2aa8:	220a      	movs	r2, #10
 80a2aaa:	4640      	mov	r0, r8
 80a2aac:	f7ff ff4d 	bl	80a294a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a2ab0:	4448      	add	r0, r9
 80a2ab2:	4404      	add	r4, r0
    remainder -= toPrint;
 80a2ab4:	4650      	mov	r0, sl
 80a2ab6:	f001 fb3b 	bl	80a4130 <__aeabi_i2d>
 80a2aba:	4602      	mov	r2, r0
 80a2abc:	460b      	mov	r3, r1
 80a2abe:	4630      	mov	r0, r6
 80a2ac0:	4639      	mov	r1, r7
 80a2ac2:	f001 f9e7 	bl	80a3e94 <__aeabi_dsub>
 80a2ac6:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2ac8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a2acc:	4606      	mov	r6, r0
 80a2ace:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2ad0:	d1d2      	bne.n	80a2a78 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2ad2:	4620      	mov	r0, r4
 80a2ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2ad8:	080a5760 	.word	0x080a5760
 80a2adc:	7fefffff 	.word	0x7fefffff
 80a2ae0:	080a576a 	.word	0x080a576a
 80a2ae4:	41efffff 	.word	0x41efffff
 80a2ae8:	080a5764 	.word	0x080a5764
 80a2aec:	c1efffff 	.word	0xc1efffff
 80a2af0:	3fe00000 	.word	0x3fe00000
 80a2af4:	40240000 	.word	0x40240000
 80a2af8:	080a5768 	.word	0x080a5768

080a2afc <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a2afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2afe:	4605      	mov	r5, r0
 80a2b00:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a2b02:	4608      	mov	r0, r1
 80a2b04:	f001 fb26 	bl	80a4154 <__aeabi_f2d>
 80a2b08:	b2e4      	uxtb	r4, r4
 80a2b0a:	4602      	mov	r2, r0
 80a2b0c:	9400      	str	r4, [sp, #0]
 80a2b0e:	460b      	mov	r3, r1
 80a2b10:	4628      	mov	r0, r5
 80a2b12:	f7ff ff39 	bl	80a2988 <_ZN5Print10printFloatEdh>
}
 80a2b16:	b003      	add	sp, #12
 80a2b18:	bd30      	pop	{r4, r5, pc}

080a2b1a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a2b1a:	b40c      	push	{r2, r3}
 80a2b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2b20:	b087      	sub	sp, #28
 80a2b22:	af00      	add	r7, sp, #0
 80a2b24:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a2b28:	f854 9b04 	ldr.w	r9, [r4], #4
 80a2b2c:	4605      	mov	r5, r0
 80a2b2e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2b30:	4623      	mov	r3, r4
 80a2b32:	464a      	mov	r2, r9
 80a2b34:	2114      	movs	r1, #20
 80a2b36:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a2b38:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2b3a:	f7ff fdc7 	bl	80a26cc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a2b3e:	2813      	cmp	r0, #19
 80a2b40:	d805      	bhi.n	80a2b4e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2b42:	1d39      	adds	r1, r7, #4
 80a2b44:	4628      	mov	r0, r5
 80a2b46:	f7ff fed1 	bl	80a28ec <_ZN5Print5writeEPKc>
 80a2b4a:	4604      	mov	r4, r0
 80a2b4c:	e013      	b.n	80a2b76 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2b4e:	f100 0308 	add.w	r3, r0, #8
 80a2b52:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a2b56:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2b58:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2b5c:	1c41      	adds	r1, r0, #1
 80a2b5e:	4623      	mov	r3, r4
 80a2b60:	464a      	mov	r2, r9
 80a2b62:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a2b64:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a2b66:	f7ff fdb1 	bl	80a26cc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2b6a:	4669      	mov	r1, sp
 80a2b6c:	4628      	mov	r0, r5
 80a2b6e:	f7ff febd 	bl	80a28ec <_ZN5Print5writeEPKc>
 80a2b72:	4604      	mov	r4, r0
 80a2b74:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a2b76:	b11e      	cbz	r6, 80a2b80 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a2b78:	4628      	mov	r0, r5
 80a2b7a:	f7ff fece 	bl	80a291a <_ZN5Print7printlnEv>
 80a2b7e:	4404      	add	r4, r0
    return n;
}
 80a2b80:	4620      	mov	r0, r4
 80a2b82:	371c      	adds	r7, #28
 80a2b84:	46bd      	mov	sp, r7
 80a2b86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2b8a:	b002      	add	sp, #8
 80a2b8c:	4770      	bx	lr

080a2b8e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2b8e:	2300      	movs	r3, #0
 80a2b90:	461a      	mov	r2, r3
 80a2b92:	4619      	mov	r1, r3
 80a2b94:	6840      	ldr	r0, [r0, #4]
 80a2b96:	f7ff bd31 	b.w	80a25fc <network_on>

080a2b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a2b9a:	680b      	ldr	r3, [r1, #0]
 80a2b9c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a2b9e:	b113      	cbz	r3, 80a2ba6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a2ba0:	685a      	ldr	r2, [r3, #4]
 80a2ba2:	3201      	adds	r2, #1
 80a2ba4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a2ba6:	4770      	bx	lr

080a2ba8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2ba8:	4a01      	ldr	r2, [pc, #4]	; (80a2bb0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2baa:	4b02      	ldr	r3, [pc, #8]	; (80a2bb4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2bac:	601a      	str	r2, [r3, #0]
 80a2bae:	4770      	bx	lr
 80a2bb0:	080a57e4 	.word	0x080a57e4
 80a2bb4:	20000188 	.word	0x20000188

080a2bb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2bb8:	4b02      	ldr	r3, [pc, #8]	; (80a2bc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2bba:	681a      	ldr	r2, [r3, #0]
 80a2bbc:	4b02      	ldr	r3, [pc, #8]	; (80a2bc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2bbe:	601a      	str	r2, [r3, #0]
 80a2bc0:	4770      	bx	lr
 80a2bc2:	bf00      	nop
 80a2bc4:	20000014 	.word	0x20000014
 80a2bc8:	2000018c 	.word	0x2000018c

080a2bcc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2bcc:	2100      	movs	r1, #0
 80a2bce:	f7ff bcc1 	b.w	80a2554 <system_delay_ms>

080a2bd2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2bd2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2bd4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2bd6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2bd8:	b113      	cbz	r3, 80a2be0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2bda:	2203      	movs	r2, #3
 80a2bdc:	4601      	mov	r1, r0
 80a2bde:	4798      	blx	r3
    }
 80a2be0:	4620      	mov	r0, r4
 80a2be2:	bd10      	pop	{r4, pc}

080a2be4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2be4:	b510      	push	{r4, lr}
 80a2be6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2be8:	f7ff fff3 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
 80a2bec:	4620      	mov	r0, r4
 80a2bee:	bd10      	pop	{r4, pc}

080a2bf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a2bf0:	b513      	push	{r0, r1, r4, lr}
 80a2bf2:	460b      	mov	r3, r1
 80a2bf4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2bf6:	c803      	ldmia	r0, {r0, r1}
 80a2bf8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a2bfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2c00:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2c04:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a2c08:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2c0c:	b002      	add	sp, #8
 80a2c0e:	bd10      	pop	{r4, pc}

080a2c10 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2c10:	4803      	ldr	r0, [pc, #12]	; (80a2c20 <_GLOBAL__sub_I_RGB+0x10>)
 80a2c12:	2300      	movs	r3, #0
 80a2c14:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2c16:	4a03      	ldr	r2, [pc, #12]	; (80a2c24 <_GLOBAL__sub_I_RGB+0x14>)
 80a2c18:	4903      	ldr	r1, [pc, #12]	; (80a2c28 <_GLOBAL__sub_I_RGB+0x18>)
 80a2c1a:	f000 bfcb 	b.w	80a3bb4 <__aeabi_atexit>
 80a2c1e:	bf00      	nop
 80a2c20:	20000190 	.word	0x20000190
 80a2c24:	20000080 	.word	0x20000080
 80a2c28:	080a2be5 	.word	0x080a2be5

080a2c2c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2c2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2c2e:	4b14      	ldr	r3, [pc, #80]	; (80a2c80 <serialEventRun+0x54>)
 80a2c30:	b133      	cbz	r3, 80a2c40 <serialEventRun+0x14>
 80a2c32:	f000 fc2b 	bl	80a348c <_Z16_fetch_usbserialv>
 80a2c36:	6803      	ldr	r3, [r0, #0]
 80a2c38:	691b      	ldr	r3, [r3, #16]
 80a2c3a:	4798      	blx	r3
 80a2c3c:	2800      	cmp	r0, #0
 80a2c3e:	dc16      	bgt.n	80a2c6e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2c40:	4b10      	ldr	r3, [pc, #64]	; (80a2c84 <serialEventRun+0x58>)
 80a2c42:	b133      	cbz	r3, 80a2c52 <serialEventRun+0x26>
 80a2c44:	f000 fd68 	bl	80a3718 <_Z22__fetch_global_Serial1v>
 80a2c48:	6803      	ldr	r3, [r0, #0]
 80a2c4a:	691b      	ldr	r3, [r3, #16]
 80a2c4c:	4798      	blx	r3
 80a2c4e:	2800      	cmp	r0, #0
 80a2c50:	dc10      	bgt.n	80a2c74 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2c52:	4b0d      	ldr	r3, [pc, #52]	; (80a2c88 <serialEventRun+0x5c>)
 80a2c54:	b10b      	cbz	r3, 80a2c5a <serialEventRun+0x2e>
 80a2c56:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2c5a:	4b0c      	ldr	r3, [pc, #48]	; (80a2c8c <serialEventRun+0x60>)
 80a2c5c:	b17b      	cbz	r3, 80a2c7e <serialEventRun+0x52>
 80a2c5e:	f000 fc51 	bl	80a3504 <_Z17_fetch_usbserial1v>
 80a2c62:	6803      	ldr	r3, [r0, #0]
 80a2c64:	691b      	ldr	r3, [r3, #16]
 80a2c66:	4798      	blx	r3
 80a2c68:	2800      	cmp	r0, #0
 80a2c6a:	dc06      	bgt.n	80a2c7a <serialEventRun+0x4e>
 80a2c6c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2c6e:	f3af 8000 	nop.w
 80a2c72:	e7e5      	b.n	80a2c40 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2c74:	f3af 8000 	nop.w
 80a2c78:	e7eb      	b.n	80a2c52 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2c7a:	f3af 8000 	nop.w
 80a2c7e:	bd08      	pop	{r3, pc}
	...

080a2c90 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2c90:	b508      	push	{r3, lr}
	serialEventRun();
 80a2c92:	f7ff ffcb 	bl	80a2c2c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2c96:	f7ff fb33 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2c9a:	4b01      	ldr	r3, [pc, #4]	; (80a2ca0 <_post_loop+0x10>)
 80a2c9c:	6018      	str	r0, [r3, #0]
 80a2c9e:	bd08      	pop	{r3, pc}
 80a2ca0:	20000674 	.word	0x20000674

080a2ca4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2ca4:	4802      	ldr	r0, [pc, #8]	; (80a2cb0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2ca6:	4a03      	ldr	r2, [pc, #12]	; (80a2cb4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2ca8:	4903      	ldr	r1, [pc, #12]	; (80a2cb8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2caa:	1a12      	subs	r2, r2, r0
 80a2cac:	f001 bf0a 	b.w	80a4ac4 <memcpy>
 80a2cb0:	40024000 	.word	0x40024000
 80a2cb4:	40024004 	.word	0x40024004
 80a2cb8:	080a5a50 	.word	0x080a5a50

080a2cbc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2cbc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2cbe:	2300      	movs	r3, #0
 80a2cc0:	9300      	str	r3, [sp, #0]
 80a2cc2:	461a      	mov	r2, r3
 80a2cc4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2cc8:	f7ff fc6e 	bl	80a25a8 <system_ctrl_set_result>
}
 80a2ccc:	b003      	add	sp, #12
 80a2cce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2cd4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2cd4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2cd6:	8843      	ldrh	r3, [r0, #2]
 80a2cd8:	2b0a      	cmp	r3, #10
 80a2cda:	d008      	beq.n	80a2cee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2cdc:	2b50      	cmp	r3, #80	; 0x50
 80a2cde:	d109      	bne.n	80a2cf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2ce0:	4b09      	ldr	r3, [pc, #36]	; (80a2d08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2ce2:	681b      	ldr	r3, [r3, #0]
 80a2ce4:	b13b      	cbz	r3, 80a2cf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2ce6:	b003      	add	sp, #12
 80a2ce8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2cec:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2cee:	f7ff ffe5 	bl	80a2cbc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2cf2:	e006      	b.n	80a2d02 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2cf4:	2300      	movs	r3, #0
 80a2cf6:	9300      	str	r3, [sp, #0]
 80a2cf8:	461a      	mov	r2, r3
 80a2cfa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2cfe:	f7ff fc53 	bl	80a25a8 <system_ctrl_set_result>
        break;
    }
}
 80a2d02:	b003      	add	sp, #12
 80a2d04:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2d08:	200001a0 	.word	0x200001a0

080a2d0c <module_user_init_hook>:

void module_user_init_hook()
{
 80a2d0c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2d0e:	4c10      	ldr	r4, [pc, #64]	; (80a2d50 <module_user_init_hook+0x44>)
 80a2d10:	4d10      	ldr	r5, [pc, #64]	; (80a2d54 <module_user_init_hook+0x48>)
 80a2d12:	6823      	ldr	r3, [r4, #0]
 80a2d14:	42ab      	cmp	r3, r5
 80a2d16:	4b10      	ldr	r3, [pc, #64]	; (80a2d58 <module_user_init_hook+0x4c>)
 80a2d18:	bf0c      	ite	eq
 80a2d1a:	2201      	moveq	r2, #1
 80a2d1c:	2200      	movne	r2, #0
 80a2d1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2d20:	d002      	beq.n	80a2d28 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2d22:	f7ff ffbf 	bl	80a2ca4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2d26:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2d28:	f7ff fad2 	bl	80a22d0 <HAL_RNG_GetRandomNumber>
 80a2d2c:	4604      	mov	r4, r0
    srand(seed);
 80a2d2e:	f001 fedd 	bl	80a4aec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2d32:	4b0a      	ldr	r3, [pc, #40]	; (80a2d5c <module_user_init_hook+0x50>)
 80a2d34:	b113      	cbz	r3, 80a2d3c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2d36:	4620      	mov	r0, r4
 80a2d38:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2d3c:	2100      	movs	r1, #0
 80a2d3e:	4807      	ldr	r0, [pc, #28]	; (80a2d5c <module_user_init_hook+0x50>)
 80a2d40:	f7ff fcac 	bl	80a269c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2d48:	2100      	movs	r1, #0
 80a2d4a:	4805      	ldr	r0, [pc, #20]	; (80a2d60 <module_user_init_hook+0x54>)
 80a2d4c:	f7ff bc22 	b.w	80a2594 <system_ctrl_set_app_request_handler>
 80a2d50:	40024000 	.word	0x40024000
 80a2d54:	9a271c1e 	.word	0x9a271c1e
 80a2d58:	200001a4 	.word	0x200001a4
 80a2d5c:	00000000 	.word	0x00000000
 80a2d60:	080a2cd5 	.word	0x080a2cd5

080a2d64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2d64:	4770      	bx	lr

080a2d66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a2d66:	2000      	movs	r0, #0
 80a2d68:	4770      	bx	lr

080a2d6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2d6a:	b510      	push	{r4, lr}
 80a2d6c:	4604      	mov	r4, r0
 80a2d6e:	2110      	movs	r1, #16
 80a2d70:	f000 ff2e 	bl	80a3bd0 <_ZdlPvj>
 80a2d74:	4620      	mov	r0, r4
 80a2d76:	bd10      	pop	{r4, pc}

080a2d78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a2d78:	b508      	push	{r3, lr}
      { delete this; }
 80a2d7a:	b108      	cbz	r0, 80a2d80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a2d7c:	f7ff fff5 	bl	80a2d6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2d80:	bd08      	pop	{r3, pc}

080a2d82 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2d82:	2200      	movs	r2, #0
 80a2d84:	6002      	str	r2, [r0, #0]
 80a2d86:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a2d8a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2d8c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2d8e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a2d92:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d94:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d96:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2d98:	680c      	ldr	r4, [r1, #0]
 80a2d9a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d9c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a2d9e:	bd10      	pop	{r4, pc}

080a2da0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2da0:	b510      	push	{r4, lr}
 80a2da2:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2da4:	6800      	ldr	r0, [r0, #0]
 80a2da6:	f7ff fc89 	bl	80a26bc <free>
}
 80a2daa:	4620      	mov	r0, r4
 80a2dac:	bd10      	pop	{r4, pc}

080a2dae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a2dae:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2db0:	68c4      	ldr	r4, [r0, #12]
 80a2db2:	b1f4      	cbz	r4, 80a2df2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a2db4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2db6:	2b02      	cmp	r3, #2
 80a2db8:	d103      	bne.n	80a2dc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2dba:	f104 000c 	add.w	r0, r4, #12
 80a2dbe:	f7ff ffef 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a2dc2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2dc4:	b135      	cbz	r5, 80a2dd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2dc6:	4628      	mov	r0, r5
 80a2dc8:	f7ff ff03 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
 80a2dcc:	2110      	movs	r1, #16
 80a2dce:	4628      	mov	r0, r5
 80a2dd0:	f000 fefe 	bl	80a3bd0 <_ZdlPvj>
 80a2dd4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2dd6:	b135      	cbz	r5, 80a2de6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2dd8:	4628      	mov	r0, r5
 80a2dda:	f7ff fefa 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
 80a2dde:	2110      	movs	r1, #16
 80a2de0:	4628      	mov	r0, r5
 80a2de2:	f000 fef5 	bl	80a3bd0 <_ZdlPvj>
 80a2de6:	4620      	mov	r0, r4
 80a2de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2dec:	2114      	movs	r1, #20
 80a2dee:	f000 beef 	b.w	80a3bd0 <_ZdlPvj>
 80a2df2:	bd38      	pop	{r3, r4, r5, pc}

080a2df4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a2df4:	b513      	push	{r0, r1, r4, lr}
 80a2df6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2df8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a2dfc:	2300      	movs	r3, #0
 80a2dfe:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2e00:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2e02:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2e04:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2e06:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2e08:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2e0a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2e0c:	f7fd faab 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2e10:	4620      	mov	r0, r4
 80a2e12:	b002      	add	sp, #8
 80a2e14:	bd10      	pop	{r4, pc}

080a2e16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2e18:	460c      	mov	r4, r1
 80a2e1a:	4606      	mov	r6, r0
 80a2e1c:	460f      	mov	r7, r1
 80a2e1e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a2e22:	ad02      	add	r5, sp, #8
 80a2e24:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2e28:	4621      	mov	r1, r4
 80a2e2a:	a801      	add	r0, sp, #4
 80a2e2c:	f7ff feb5 	bl	80a2b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a2e30:	4629      	mov	r1, r5
 80a2e32:	4630      	mov	r0, r6
 80a2e34:	f7ff ffde 	bl	80a2df4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2e38:	a801      	add	r0, sp, #4
 80a2e3a:	f7fd fa94 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2e3e:	4620      	mov	r0, r4
 80a2e40:	f7fd fa91 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a2e44:	4638      	mov	r0, r7
 80a2e46:	2108      	movs	r1, #8
 80a2e48:	f000 fec2 	bl	80a3bd0 <_ZdlPvj>
        return p;
    }
 80a2e4c:	4630      	mov	r0, r6
 80a2e4e:	b003      	add	sp, #12
 80a2e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2e54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2e54:	b538      	push	{r3, r4, r5, lr}
 80a2e56:	2300      	movs	r3, #0
 80a2e58:	4604      	mov	r4, r0
 80a2e5a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2e5c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2e5e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2e60:	f7fd f91d 	bl	80a009e <_Znwj>
 80a2e64:	b128      	cbz	r0, 80a2e72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2e66:	2301      	movs	r3, #1
 80a2e68:	6043      	str	r3, [r0, #4]
 80a2e6a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2e6c:	4b02      	ldr	r3, [pc, #8]	; (80a2e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a2e6e:	60c5      	str	r5, [r0, #12]
 80a2e70:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2e72:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a2e74:	4620      	mov	r0, r4
 80a2e76:	bd38      	pop	{r3, r4, r5, pc}
 80a2e78:	080a5884 	.word	0x080a5884

080a2e7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2e7c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2e7e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2e80:	b90a      	cbnz	r2, 80a2e86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2e82:	f000 feb8 	bl	80a3bf6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2e86:	68c3      	ldr	r3, [r0, #12]
    }
 80a2e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2e8c:	4718      	bx	r3

080a2e8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2e8e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2e90:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2e92:	f100 0110 	add.w	r1, r0, #16
 80a2e96:	f7ff fff1 	bl	80a2e7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2e9a:	bd08      	pop	{r3, pc}

080a2e9c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2e9c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2e9e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2ea0:	b90a      	cbnz	r2, 80a2ea6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2ea2:	f000 fea8 	bl	80a3bf6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2ea6:	68c3      	ldr	r3, [r0, #12]
    }
 80a2ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2eac:	4718      	bx	r3

080a2eae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2eae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2eb0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2eb2:	f100 0110 	add.w	r1, r0, #16
 80a2eb6:	f7ff fff1 	bl	80a2e9c <_ZNKSt8functionIFvRKbEEclES1_>
 80a2eba:	bd08      	pop	{r3, pc}

080a2ebc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2ebc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2ebe:	2300      	movs	r3, #0
 80a2ec0:	6083      	str	r3, [r0, #8]
 80a2ec2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2ec4:	4604      	mov	r4, r0
 80a2ec6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2ec8:	b12b      	cbz	r3, 80a2ed6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2eca:	2202      	movs	r2, #2
 80a2ecc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2ece:	68eb      	ldr	r3, [r5, #12]
 80a2ed0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2ed2:	68ab      	ldr	r3, [r5, #8]
 80a2ed4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2ed6:	4620      	mov	r0, r4
 80a2ed8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a2edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2ede:	b089      	sub	sp, #36	; 0x24
 80a2ee0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2ee2:	4668      	mov	r0, sp
 80a2ee4:	f7ff ff4d 	bl	80a2d82 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2ee8:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2eec:	2300      	movs	r3, #0
 80a2eee:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2ef2:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a2ef6:	2b00      	cmp	r3, #0
 80a2ef8:	d103      	bne.n	80a2f02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a2efa:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a2efe:	2900      	cmp	r1, #0
 80a2f00:	d1f7      	bne.n	80a2ef2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a2f02:	d002      	beq.n	80a2f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a2f04:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2f08:	e063      	b.n	80a2fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a2f0a:	f114 050c 	adds.w	r5, r4, #12
 80a2f0e:	d003      	beq.n	80a2f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a2f10:	4669      	mov	r1, sp
 80a2f12:	4628      	mov	r0, r5
 80a2f14:	f7ff ff35 	bl	80a2d82 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2f18:	f3bf 8f5f 	dmb	sy
 80a2f1c:	2301      	movs	r3, #1
 80a2f1e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2f20:	f3bf 8f5f 	dmb	sy
 80a2f24:	f104 0308 	add.w	r3, r4, #8
 80a2f28:	2000      	movs	r0, #0
 80a2f2a:	e853 6f00 	ldrex	r6, [r3]
 80a2f2e:	e843 0200 	strex	r2, r0, [r3]
 80a2f32:	2a00      	cmp	r2, #0
 80a2f34:	d1f9      	bne.n	80a2f2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a2f36:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2f3a:	2e00      	cmp	r6, #0
 80a2f3c:	d049      	beq.n	80a2fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2f3e:	f7ff fb19 	bl	80a2574 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2f42:	b120      	cbz	r0, 80a2f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2f44:	4629      	mov	r1, r5
 80a2f46:	4630      	mov	r0, r6
 80a2f48:	f7ff ff98 	bl	80a2e7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2f4c:	e03a      	b.n	80a2fc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2f4e:	4631      	mov	r1, r6
 80a2f50:	a802      	add	r0, sp, #8
 80a2f52:	f7ff ffb3 	bl	80a2ebc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2f56:	68e0      	ldr	r0, [r4, #12]
 80a2f58:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2f5c:	b108      	cbz	r0, 80a2f62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a2f5e:	f001 fded 	bl	80a4b3c <strdup>
 80a2f62:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2f64:	2010      	movs	r0, #16
 80a2f66:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2f6a:	f7fd f898 	bl	80a009e <_Znwj>
 80a2f6e:	4605      	mov	r5, r0
 80a2f70:	b1e8      	cbz	r0, 80a2fae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2f72:	2700      	movs	r7, #0
 80a2f74:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2f76:	2018      	movs	r0, #24
 80a2f78:	f7fd f891 	bl	80a009e <_Znwj>
 80a2f7c:	4604      	mov	r4, r0
 80a2f7e:	b188      	cbz	r0, 80a2fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2f80:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2f82:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2f84:	a802      	add	r0, sp, #8
 80a2f86:	f7ff fe33 	bl	80a2bf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2f8a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2f8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2f8e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2f90:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2f92:	9204      	str	r2, [sp, #16]
 80a2f94:	68e2      	ldr	r2, [r4, #12]
 80a2f96:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2f98:	60e3      	str	r3, [r4, #12]
 80a2f9a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2f9e:	9205      	str	r2, [sp, #20]
 80a2fa0:	f7ff feef 	bl	80a2d82 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2fa4:	4b0d      	ldr	r3, [pc, #52]	; (80a2fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2fa6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2fa8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2faa:	4b0d      	ldr	r3, [pc, #52]	; (80a2fe0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a2fac:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a2fae:	a806      	add	r0, sp, #24
 80a2fb0:	f7ff fef6 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2fb4:	a802      	add	r0, sp, #8
 80a2fb6:	f7ff fe0c 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2fba:	2200      	movs	r2, #0
 80a2fbc:	4629      	mov	r1, r5
 80a2fbe:	4809      	ldr	r0, [pc, #36]	; (80a2fe4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2fc0:	f7ff fae0 	bl	80a2584 <application_thread_invoke>
 80a2fc4:	4630      	mov	r0, r6
 80a2fc6:	f7ff fe04 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2fca:	2110      	movs	r1, #16
 80a2fcc:	4630      	mov	r0, r6
 80a2fce:	f000 fdff 	bl	80a3bd0 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2fd2:	4668      	mov	r0, sp
 80a2fd4:	f7ff fee4 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
    }
 80a2fd8:	b009      	add	sp, #36	; 0x24
 80a2fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2fdc:	080a2e8f 	.word	0x080a2e8f
 80a2fe0:	080a3105 	.word	0x080a3105
 80a2fe4:	080a3765 	.word	0x080a3765

080a2fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2fec:	b08b      	sub	sp, #44	; 0x2c
 80a2fee:	4606      	mov	r6, r0
 80a2ff0:	460f      	mov	r7, r1
 80a2ff2:	4690      	mov	r8, r2
 80a2ff4:	4699      	mov	r9, r3
 80a2ff6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2ffa:	f7ff fb3f 	bl	80a267c <spark_cloud_flag_connected>
 80a2ffe:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a3000:	4683      	mov	fp, r0
 80a3002:	bb30      	cbnz	r0, 80a3052 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3004:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a3008:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a300a:	a905      	add	r1, sp, #20
 80a300c:	4628      	mov	r0, r5
 80a300e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3012:	f7ff feb6 	bl	80a2d82 <_ZN8particle5ErrorC1EOS0_>
 80a3016:	2014      	movs	r0, #20
 80a3018:	f7fd f841 	bl	80a009e <_Znwj>
 80a301c:	4604      	mov	r4, r0
 80a301e:	b158      	cbz	r0, 80a3038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a3020:	2302      	movs	r3, #2
 80a3022:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3024:	2301      	movs	r3, #1
 80a3026:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3028:	f8c0 b004 	str.w	fp, [r0, #4]
 80a302c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a3030:	4629      	mov	r1, r5
 80a3032:	300c      	adds	r0, #12
 80a3034:	f7ff fea5 	bl	80a2d82 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a3038:	4630      	mov	r0, r6
 80a303a:	4621      	mov	r1, r4
 80a303c:	f840 4b04 	str.w	r4, [r0], #4
 80a3040:	f7ff ff08 	bl	80a2e54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3044:	4628      	mov	r0, r5
 80a3046:	f7ff feab 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a304a:	a805      	add	r0, sp, #20
 80a304c:	f7ff fea8 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
 80a3050:	e052      	b.n	80a30f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3052:	2400      	movs	r4, #0
 80a3054:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3056:	2014      	movs	r0, #20
 80a3058:	606c      	str	r4, [r5, #4]
 80a305a:	60ac      	str	r4, [r5, #8]
 80a305c:	9307      	str	r3, [sp, #28]
 80a305e:	f7fd f81e 	bl	80a009e <_Znwj>
 80a3062:	4601      	mov	r1, r0
 80a3064:	b118      	cbz	r0, 80a306e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a3066:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3068:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a306a:	6044      	str	r4, [r0, #4]
 80a306c:	6084      	str	r4, [r0, #8]
 80a306e:	a804      	add	r0, sp, #16
 80a3070:	9103      	str	r1, [sp, #12]
 80a3072:	f7ff feef 	bl	80a2e54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a3076:	4b22      	ldr	r3, [pc, #136]	; (80a3100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a3078:	2008      	movs	r0, #8
 80a307a:	9308      	str	r3, [sp, #32]
 80a307c:	f7fd f80f 	bl	80a009e <_Znwj>
 80a3080:	4604      	mov	r4, r0
 80a3082:	b128      	cbz	r0, 80a3090 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3084:	9b03      	ldr	r3, [sp, #12]
 80a3086:	a904      	add	r1, sp, #16
 80a3088:	f840 3b04 	str.w	r3, [r0], #4
 80a308c:	f7ff fd85 	bl	80a2b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a3090:	9500      	str	r5, [sp, #0]
 80a3092:	fa5f f38a 	uxtb.w	r3, sl
 80a3096:	464a      	mov	r2, r9
 80a3098:	4641      	mov	r1, r8
 80a309a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a309c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a309e:	f7ff faf5 	bl	80a268c <spark_send_event>
 80a30a2:	b920      	cbnz	r0, 80a30ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a30a4:	9b03      	ldr	r3, [sp, #12]
 80a30a6:	785b      	ldrb	r3, [r3, #1]
 80a30a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a30ac:	b183      	cbz	r3, 80a30d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a30ae:	9b03      	ldr	r3, [sp, #12]
 80a30b0:	a904      	add	r1, sp, #16
 80a30b2:	a806      	add	r0, sp, #24
 80a30b4:	9305      	str	r3, [sp, #20]
 80a30b6:	f7ff fd70 	bl	80a2b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a30ba:	a905      	add	r1, sp, #20
 80a30bc:	4630      	mov	r0, r6
 80a30be:	f7ff fe99 	bl	80a2df4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a30c2:	a806      	add	r0, sp, #24
 80a30c4:	f7fd f94f 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a30c8:	a804      	add	r0, sp, #16
 80a30ca:	f7fd f94c 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a30ce:	e013      	b.n	80a30f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a30d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a30d4:	a905      	add	r1, sp, #20
 80a30d6:	a803      	add	r0, sp, #12
 80a30d8:	9205      	str	r2, [sp, #20]
 80a30da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a30de:	f7ff fefd 	bl	80a2edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a30e2:	a805      	add	r0, sp, #20
 80a30e4:	f7ff fe5c 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a30e8:	a805      	add	r0, sp, #20
 80a30ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a30ec:	f7ff fe93 	bl	80a2e16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a30f0:	a806      	add	r0, sp, #24
 80a30f2:	f7fd f938 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a30f6:	e7da      	b.n	80a30ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a30f8:	4630      	mov	r0, r6
 80a30fa:	b00b      	add	sp, #44	; 0x2c
 80a30fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3100:	080a3275 	.word	0x080a3275

080a3104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3104:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3108:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a310a:	d006      	beq.n	80a311a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a310c:	2a03      	cmp	r2, #3
 80a310e:	d017      	beq.n	80a3140 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a3110:	2a01      	cmp	r2, #1
 80a3112:	d122      	bne.n	80a315a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3114:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3116:	6003      	str	r3, [r0, #0]
	      break;
 80a3118:	e01f      	b.n	80a315a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a311a:	2018      	movs	r0, #24
 80a311c:	680e      	ldr	r6, [r1, #0]
 80a311e:	f7fc ffbe 	bl	80a009e <_Znwj>
 80a3122:	4605      	mov	r5, r0
 80a3124:	b150      	cbz	r0, 80a313c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3126:	4631      	mov	r1, r6
 80a3128:	f7ff fec8 	bl	80a2ebc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a312c:	6930      	ldr	r0, [r6, #16]
 80a312e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a3132:	b108      	cbz	r0, 80a3138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a3134:	f001 fd02 	bl	80a4b3c <strdup>
 80a3138:	6128      	str	r0, [r5, #16]
 80a313a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a313c:	6025      	str	r5, [r4, #0]
 80a313e:	e00c      	b.n	80a315a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3140:	6804      	ldr	r4, [r0, #0]
 80a3142:	b154      	cbz	r4, 80a315a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a3144:	f104 0010 	add.w	r0, r4, #16
 80a3148:	f7ff fe2a 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a314c:	4620      	mov	r0, r4
 80a314e:	f7ff fd40 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3152:	2118      	movs	r1, #24
 80a3154:	4620      	mov	r0, r4
 80a3156:	f000 fd3b 	bl	80a3bd0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a315a:	2000      	movs	r0, #0
 80a315c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a315e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a315e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3160:	2300      	movs	r3, #0
 80a3162:	6083      	str	r3, [r0, #8]
 80a3164:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3166:	4604      	mov	r4, r0
 80a3168:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a316a:	b12b      	cbz	r3, 80a3178 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a316c:	2202      	movs	r2, #2
 80a316e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3170:	68eb      	ldr	r3, [r5, #12]
 80a3172:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3174:	68ab      	ldr	r3, [r5, #8]
 80a3176:	60a3      	str	r3, [r4, #8]
	}
    }
 80a3178:	4620      	mov	r0, r4
 80a317a:	bd38      	pop	{r3, r4, r5, pc}

080a317c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a317c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a317e:	b570      	push	{r4, r5, r6, lr}
 80a3180:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3182:	d006      	beq.n	80a3192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a3184:	2a03      	cmp	r2, #3
 80a3186:	d011      	beq.n	80a31ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a3188:	2a01      	cmp	r2, #1
 80a318a:	d118      	bne.n	80a31be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a318c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a318e:	6003      	str	r3, [r0, #0]
	      break;
 80a3190:	e015      	b.n	80a31be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3192:	2014      	movs	r0, #20
 80a3194:	680e      	ldr	r6, [r1, #0]
 80a3196:	f7fc ff82 	bl	80a009e <_Znwj>
 80a319a:	4605      	mov	r5, r0
 80a319c:	b120      	cbz	r0, 80a31a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a319e:	4631      	mov	r1, r6
 80a31a0:	f7ff ffdd 	bl	80a315e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a31a4:	7c33      	ldrb	r3, [r6, #16]
 80a31a6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a31a8:	6025      	str	r5, [r4, #0]
 80a31aa:	e008      	b.n	80a31be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a31ac:	6804      	ldr	r4, [r0, #0]
 80a31ae:	b134      	cbz	r4, 80a31be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a31b0:	4620      	mov	r0, r4
 80a31b2:	f7ff fd0e 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a31b6:	2114      	movs	r1, #20
 80a31b8:	4620      	mov	r0, r4
 80a31ba:	f000 fd09 	bl	80a3bd0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a31be:	2000      	movs	r0, #0
 80a31c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a31c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a31c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a31c6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a31c8:	f3bf 8f5f 	dmb	sy
 80a31cc:	b087      	sub	sp, #28
 80a31ce:	2300      	movs	r3, #0
 80a31d0:	e850 6f00 	ldrex	r6, [r0]
 80a31d4:	e840 3200 	strex	r2, r3, [r0]
 80a31d8:	2a00      	cmp	r2, #0
 80a31da:	d1f9      	bne.n	80a31d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a31dc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a31e0:	2e00      	cmp	r6, #0
 80a31e2:	d03f      	beq.n	80a3264 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a31e4:	4618      	mov	r0, r3
 80a31e6:	f7ff f9c5 	bl	80a2574 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a31ea:	4607      	mov	r7, r0
 80a31ec:	b120      	cbz	r0, 80a31f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a31ee:	4621      	mov	r1, r4
 80a31f0:	4630      	mov	r0, r6
 80a31f2:	f7ff fe53 	bl	80a2e9c <_ZNKSt8functionIFvRKbEEclES1_>
 80a31f6:	e02e      	b.n	80a3256 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a31f8:	4631      	mov	r1, r6
 80a31fa:	a801      	add	r0, sp, #4
 80a31fc:	f7ff ffaf 	bl	80a315e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3200:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3202:	2010      	movs	r0, #16
 80a3204:	f88d 3014 	strb.w	r3, [sp, #20]
 80a3208:	f7fc ff49 	bl	80a009e <_Znwj>
 80a320c:	4605      	mov	r5, r0
 80a320e:	b1d0      	cbz	r0, 80a3246 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3210:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3212:	2014      	movs	r0, #20
 80a3214:	f7fc ff43 	bl	80a009e <_Znwj>
 80a3218:	4604      	mov	r4, r0
 80a321a:	b178      	cbz	r0, 80a323c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a321c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a321e:	4601      	mov	r1, r0
 80a3220:	a801      	add	r0, sp, #4
 80a3222:	f7ff fce5 	bl	80a2bf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3226:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a3228:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a322a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a322c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a322e:	9203      	str	r2, [sp, #12]
 80a3230:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3232:	60e3      	str	r3, [r4, #12]
 80a3234:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3238:	9204      	str	r2, [sp, #16]
 80a323a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a323c:	4b0a      	ldr	r3, [pc, #40]	; (80a3268 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a323e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3240:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3242:	4b0a      	ldr	r3, [pc, #40]	; (80a326c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a3244:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3246:	a801      	add	r0, sp, #4
 80a3248:	f7ff fcc3 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a324c:	2200      	movs	r2, #0
 80a324e:	4629      	mov	r1, r5
 80a3250:	4807      	ldr	r0, [pc, #28]	; (80a3270 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a3252:	f7ff f997 	bl	80a2584 <application_thread_invoke>
 80a3256:	4630      	mov	r0, r6
 80a3258:	f7ff fcbb 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a325c:	2110      	movs	r1, #16
 80a325e:	4630      	mov	r0, r6
 80a3260:	f000 fcb6 	bl	80a3bd0 <_ZdlPvj>
        }
    }
 80a3264:	b007      	add	sp, #28
 80a3266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3268:	080a2eaf 	.word	0x080a2eaf
 80a326c:	080a317d 	.word	0x080a317d
 80a3270:	080a3765 	.word	0x080a3765

080a3274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a3274:	b530      	push	{r4, r5, lr}
 80a3276:	4604      	mov	r4, r0
 80a3278:	b085      	sub	sp, #20
 80a327a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a327c:	4668      	mov	r0, sp
 80a327e:	4611      	mov	r1, r2
 80a3280:	f7ff fdc9 	bl	80a2e16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a3284:	b17c      	cbz	r4, 80a32a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a3286:	b224      	sxth	r4, r4
 80a3288:	4628      	mov	r0, r5
 80a328a:	b10d      	cbz	r5, 80a3290 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a328c:	f001 fc56 	bl	80a4b3c <strdup>
 80a3290:	9002      	str	r0, [sp, #8]
 80a3292:	a902      	add	r1, sp, #8
 80a3294:	4668      	mov	r0, sp
 80a3296:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a329a:	f7ff fe1f 	bl	80a2edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a329e:	a802      	add	r0, sp, #8
 80a32a0:	f7ff fd7e 	bl	80a2da0 <_ZN8particle5ErrorD1Ev>
 80a32a4:	e01d      	b.n	80a32e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a32a6:	f04f 0201 	mov.w	r2, #1
 80a32aa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a32ac:	f88d 4008 	strb.w	r4, [sp, #8]
 80a32b0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a32b4:	42a3      	cmp	r3, r4
 80a32b6:	d103      	bne.n	80a32c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a32b8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a32bc:	2900      	cmp	r1, #0
 80a32be:	d1f7      	bne.n	80a32b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a32c0:	d002      	beq.n	80a32c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a32c2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a32c6:	e00c      	b.n	80a32e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a32c8:	f110 010c 	adds.w	r1, r0, #12
 80a32cc:	f04f 0301 	mov.w	r3, #1
 80a32d0:	bf18      	it	ne
 80a32d2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a32d4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a32d8:	3004      	adds	r0, #4
 80a32da:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a32de:	f7ff ff71 	bl	80a31c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a32e2:	a801      	add	r0, sp, #4
 80a32e4:	f7fd f83f 	bl	80a0366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a32e8:	b005      	add	sp, #20
 80a32ea:	bd30      	pop	{r4, r5, pc}

080a32ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a32ec:	4770      	bx	lr

080a32ee <_ZN9IPAddressD0Ev>:
 80a32ee:	b510      	push	{r4, lr}
 80a32f0:	4604      	mov	r4, r0
 80a32f2:	2118      	movs	r1, #24
 80a32f4:	f000 fc6c 	bl	80a3bd0 <_ZdlPvj>
 80a32f8:	4620      	mov	r0, r4
 80a32fa:	bd10      	pop	{r4, pc}

080a32fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a32fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a32fe:	460f      	mov	r7, r1
 80a3300:	f100 0608 	add.w	r6, r0, #8
 80a3304:	1d05      	adds	r5, r0, #4
 80a3306:	2400      	movs	r4, #0
 80a3308:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a330c:	220a      	movs	r2, #10
 80a330e:	4638      	mov	r0, r7
 80a3310:	f7ff fb1b 	bl	80a294a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3314:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3316:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3318:	d007      	beq.n	80a332a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a331a:	2c00      	cmp	r4, #0
 80a331c:	d0f4      	beq.n	80a3308 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a331e:	212e      	movs	r1, #46	; 0x2e
 80a3320:	4638      	mov	r0, r7
 80a3322:	f7ff faf7 	bl	80a2914 <_ZN5Print5printEc>
 80a3326:	4404      	add	r4, r0
 80a3328:	e7ee      	b.n	80a3308 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a332a:	4620      	mov	r0, r4
 80a332c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a3330 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a3330:	b510      	push	{r4, lr}
 80a3332:	4604      	mov	r4, r0
 80a3334:	4b04      	ldr	r3, [pc, #16]	; (80a3348 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3336:	2211      	movs	r2, #17
 80a3338:	f840 3b04 	str.w	r3, [r0], #4
 80a333c:	2100      	movs	r1, #0
 80a333e:	f001 fbcc 	bl	80a4ada <memset>
{
    clear();
}
 80a3342:	4620      	mov	r0, r4
 80a3344:	bd10      	pop	{r4, pc}
 80a3346:	bf00      	nop
 80a3348:	080a58a0 	.word	0x080a58a0

080a334c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a334c:	4603      	mov	r3, r0
 80a334e:	4a07      	ldr	r2, [pc, #28]	; (80a336c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3350:	b510      	push	{r4, lr}
 80a3352:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a3356:	f101 0210 	add.w	r2, r1, #16
 80a335a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a335e:	4291      	cmp	r1, r2
 80a3360:	f843 4b04 	str.w	r4, [r3], #4
 80a3364:	d1f9      	bne.n	80a335a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3366:	780a      	ldrb	r2, [r1, #0]
 80a3368:	701a      	strb	r2, [r3, #0]
}
 80a336a:	bd10      	pop	{r4, pc}
 80a336c:	080a58a0 	.word	0x080a58a0

080a3370 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3370:	4a02      	ldr	r2, [pc, #8]	; (80a337c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a3372:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3374:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3376:	2204      	movs	r2, #4
 80a3378:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a337a:	4770      	bx	lr
 80a337c:	080a58a0 	.word	0x080a58a0

080a3380 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3380:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3382:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3386:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a338a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a338e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a3392:	2304      	movs	r3, #4
 80a3394:	6041      	str	r1, [r0, #4]
 80a3396:	7503      	strb	r3, [r0, #20]
 80a3398:	bd10      	pop	{r4, pc}
	...

080a339c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a339c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a339e:	4d04      	ldr	r5, [pc, #16]	; (80a33b0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a33a0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a33a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a33a6:	9500      	str	r5, [sp, #0]
 80a33a8:	f7ff ffea 	bl	80a3380 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a33ac:	b003      	add	sp, #12
 80a33ae:	bd30      	pop	{r4, r5, pc}
 80a33b0:	080a58a0 	.word	0x080a58a0

080a33b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a33b4:	7441      	strb	r1, [r0, #17]
 80a33b6:	4770      	bx	lr

080a33b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a33b8:	4770      	bx	lr

080a33ba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a33ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a33bc:	2100      	movs	r1, #0
 80a33be:	7c00      	ldrb	r0, [r0, #16]
 80a33c0:	f7ff f898 	bl	80a24f4 <HAL_USB_USART_Receive_Data>
}
 80a33c4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a33c8:	bf28      	it	cs
 80a33ca:	f04f 30ff 	movcs.w	r0, #4294967295
 80a33ce:	bd08      	pop	{r3, pc}

080a33d0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a33d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a33d2:	2101      	movs	r1, #1
 80a33d4:	7c00      	ldrb	r0, [r0, #16]
 80a33d6:	f7ff f88d 	bl	80a24f4 <HAL_USB_USART_Receive_Data>
}
 80a33da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a33de:	bf28      	it	cs
 80a33e0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a33e4:	bd08      	pop	{r3, pc}

080a33e6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a33e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a33e8:	7c00      	ldrb	r0, [r0, #16]
 80a33ea:	f7ff f87b 	bl	80a24e4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a33ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33f2:	bd08      	pop	{r3, pc}

080a33f4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a33f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a33f6:	7c00      	ldrb	r0, [r0, #16]
 80a33f8:	f7ff f86c 	bl	80a24d4 <HAL_USB_USART_Available_Data>
}
 80a33fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3400:	bd08      	pop	{r3, pc}

080a3402 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3402:	7c00      	ldrb	r0, [r0, #16]
 80a3404:	f7ff b886 	b.w	80a2514 <HAL_USB_USART_Flush_Data>

080a3408 <_ZN9USBSerialD0Ev>:
 80a3408:	b510      	push	{r4, lr}
 80a340a:	4604      	mov	r4, r0
 80a340c:	2114      	movs	r1, #20
 80a340e:	f000 fbdf 	bl	80a3bd0 <_ZdlPvj>
 80a3412:	4620      	mov	r0, r4
 80a3414:	bd10      	pop	{r4, pc}

080a3416 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3416:	b538      	push	{r3, r4, r5, lr}
 80a3418:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a341a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a341c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a341e:	f7ff f861 	bl	80a24e4 <HAL_USB_USART_Available_Data_For_Write>
 80a3422:	2800      	cmp	r0, #0
 80a3424:	dc01      	bgt.n	80a342a <_ZN9USBSerial5writeEh+0x14>
 80a3426:	7c60      	ldrb	r0, [r4, #17]
 80a3428:	b128      	cbz	r0, 80a3436 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a342a:	4629      	mov	r1, r5
 80a342c:	7c20      	ldrb	r0, [r4, #16]
 80a342e:	f7ff f869 	bl	80a2504 <HAL_USB_USART_Send_Data>
 80a3432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3436:	bd38      	pop	{r3, r4, r5, pc}

080a3438 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3438:	b510      	push	{r4, lr}
 80a343a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a343c:	2300      	movs	r3, #0
 80a343e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3444:	60a3      	str	r3, [r4, #8]
 80a3446:	4b05      	ldr	r3, [pc, #20]	; (80a345c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3448:	4608      	mov	r0, r1
 80a344a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a344c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a344e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3450:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3452:	4611      	mov	r1, r2
 80a3454:	f7ff f836 	bl	80a24c4 <HAL_USB_USART_Init>
}
 80a3458:	4620      	mov	r0, r4
 80a345a:	bd10      	pop	{r4, pc}
 80a345c:	080a58b4 	.word	0x080a58b4

080a3460 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3460:	b510      	push	{r4, lr}
 80a3462:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3464:	2214      	movs	r2, #20
 80a3466:	2100      	movs	r1, #0
 80a3468:	f001 fb37 	bl	80a4ada <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a346c:	4b05      	ldr	r3, [pc, #20]	; (80a3484 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a346e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3470:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3472:	4b05      	ldr	r3, [pc, #20]	; (80a3488 <_Z19acquireSerialBufferv+0x28>)
 80a3474:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3476:	f240 1301 	movw	r3, #257	; 0x101
 80a347a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a347c:	2381      	movs	r3, #129	; 0x81
 80a347e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3480:	bd10      	pop	{r4, pc}
 80a3482:	bf00      	nop
 80a3484:	2000022d 	.word	0x2000022d
 80a3488:	200001ac 	.word	0x200001ac

080a348c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a348c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a348e:	4d0e      	ldr	r5, [pc, #56]	; (80a34c8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3490:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3492:	a801      	add	r0, sp, #4
 80a3494:	f7ff ffe4 	bl	80a3460 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3498:	6829      	ldr	r1, [r5, #0]
 80a349a:	f011 0401 	ands.w	r4, r1, #1
 80a349e:	d110      	bne.n	80a34c2 <_Z16_fetch_usbserialv+0x36>
 80a34a0:	4628      	mov	r0, r5
 80a34a2:	f7fc fe0b 	bl	80a00bc <__cxa_guard_acquire>
 80a34a6:	b160      	cbz	r0, 80a34c2 <_Z16_fetch_usbserialv+0x36>
 80a34a8:	aa01      	add	r2, sp, #4
 80a34aa:	4621      	mov	r1, r4
 80a34ac:	4807      	ldr	r0, [pc, #28]	; (80a34cc <_Z16_fetch_usbserialv+0x40>)
 80a34ae:	f7ff ffc3 	bl	80a3438 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a34b2:	4628      	mov	r0, r5
 80a34b4:	f7fc fe07 	bl	80a00c6 <__cxa_guard_release>
 80a34b8:	4a05      	ldr	r2, [pc, #20]	; (80a34d0 <_Z16_fetch_usbserialv+0x44>)
 80a34ba:	4906      	ldr	r1, [pc, #24]	; (80a34d4 <_Z16_fetch_usbserialv+0x48>)
 80a34bc:	4803      	ldr	r0, [pc, #12]	; (80a34cc <_Z16_fetch_usbserialv+0x40>)
 80a34be:	f000 fb79 	bl	80a3bb4 <__aeabi_atexit>
	return _usbserial;
}
 80a34c2:	4802      	ldr	r0, [pc, #8]	; (80a34cc <_Z16_fetch_usbserialv+0x40>)
 80a34c4:	b007      	add	sp, #28
 80a34c6:	bd30      	pop	{r4, r5, pc}
 80a34c8:	200001a8 	.word	0x200001a8
 80a34cc:	20000330 	.word	0x20000330
 80a34d0:	20000080 	.word	0x20000080
 80a34d4:	080a33b9 	.word	0x080a33b9

080a34d8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a34d8:	b510      	push	{r4, lr}
 80a34da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a34dc:	2214      	movs	r2, #20
 80a34de:	2100      	movs	r1, #0
 80a34e0:	f001 fafb 	bl	80a4ada <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a34e4:	4b05      	ldr	r3, [pc, #20]	; (80a34fc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a34e6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a34e8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a34ea:	4b05      	ldr	r3, [pc, #20]	; (80a3500 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a34ec:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a34ee:	f240 1301 	movw	r3, #257	; 0x101
 80a34f2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a34f4:	2381      	movs	r3, #129	; 0x81
 80a34f6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a34f8:	bd10      	pop	{r4, pc}
 80a34fa:	bf00      	nop
 80a34fc:	200003e0 	.word	0x200003e0
 80a3500:	20000348 	.word	0x20000348

080a3504 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3504:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3506:	4c0e      	ldr	r4, [pc, #56]	; (80a3540 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3508:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a350a:	a801      	add	r0, sp, #4
 80a350c:	f7ff ffe4 	bl	80a34d8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3510:	6823      	ldr	r3, [r4, #0]
 80a3512:	07db      	lsls	r3, r3, #31
 80a3514:	d410      	bmi.n	80a3538 <_Z17_fetch_usbserial1v+0x34>
 80a3516:	4620      	mov	r0, r4
 80a3518:	f7fc fdd0 	bl	80a00bc <__cxa_guard_acquire>
 80a351c:	b160      	cbz	r0, 80a3538 <_Z17_fetch_usbserial1v+0x34>
 80a351e:	aa01      	add	r2, sp, #4
 80a3520:	2101      	movs	r1, #1
 80a3522:	4808      	ldr	r0, [pc, #32]	; (80a3544 <_Z17_fetch_usbserial1v+0x40>)
 80a3524:	f7ff ff88 	bl	80a3438 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3528:	4620      	mov	r0, r4
 80a352a:	f7fc fdcc 	bl	80a00c6 <__cxa_guard_release>
 80a352e:	4a06      	ldr	r2, [pc, #24]	; (80a3548 <_Z17_fetch_usbserial1v+0x44>)
 80a3530:	4906      	ldr	r1, [pc, #24]	; (80a354c <_Z17_fetch_usbserial1v+0x48>)
 80a3532:	4804      	ldr	r0, [pc, #16]	; (80a3544 <_Z17_fetch_usbserial1v+0x40>)
 80a3534:	f000 fb3e 	bl	80a3bb4 <__aeabi_atexit>
  return _usbserial1;
}
 80a3538:	4802      	ldr	r0, [pc, #8]	; (80a3544 <_Z17_fetch_usbserial1v+0x40>)
 80a353a:	b006      	add	sp, #24
 80a353c:	bd10      	pop	{r4, pc}
 80a353e:	bf00      	nop
 80a3540:	20000344 	.word	0x20000344
 80a3544:	200003cc 	.word	0x200003cc
 80a3548:	20000080 	.word	0x20000080
 80a354c:	080a33b9 	.word	0x080a33b9

080a3550 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3550:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a3552:	b510      	push	{r4, lr}
 80a3554:	b90a      	cbnz	r2, 80a355a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a3556:	f000 fb4e 	bl	80a3bf6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a355a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3560:	4718      	bx	r3
	...

080a3564 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 80a3564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3566:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 80a3568:	f7fe fe6a 	bl	80a2240 <HAL_Interrupts_Detach>
 80a356c:	4607      	mov	r7, r0
 80a356e:	b968      	cbnz	r0, 80a358c <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 80a3570:	4d08      	ldr	r5, [pc, #32]	; (80a3594 <_Z15detachInterruptt+0x30>)
 80a3572:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80a3576:	b15c      	cbz	r4, 80a3590 <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3578:	4620      	mov	r0, r4
 80a357a:	f7ff fb2a 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 80a357e:	2110      	movs	r1, #16
 80a3580:	4620      	mov	r0, r4
 80a3582:	f000 fb25 	bl	80a3bd0 <_ZdlPvj>
        handlers[pin] = nullptr;
 80a3586:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 80a358a:	e001      	b.n	80a3590 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 80a358c:	2000      	movs	r0, #0
 80a358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 80a3590:	2001      	movs	r0, #1
}
 80a3592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3594:	200004e4 	.word	0x200004e4

080a3598 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3598:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a359a:	2300      	movs	r3, #0
 80a359c:	6083      	str	r3, [r0, #8]
 80a359e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a35a0:	4604      	mov	r4, r0
 80a35a2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a35a4:	b12b      	cbz	r3, 80a35b2 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a35a6:	2202      	movs	r2, #2
 80a35a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a35aa:	68eb      	ldr	r3, [r5, #12]
 80a35ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a35ae:	68ab      	ldr	r3, [r5, #8]
 80a35b0:	60a3      	str	r3, [r4, #8]
	}
    }
 80a35b2:	4620      	mov	r0, r4
 80a35b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a35b8 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a35b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a35ba:	4b0d      	ldr	r3, [pc, #52]	; (80a35f0 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a35bc:	4606      	mov	r6, r0
    delete handlers[pin];
 80a35be:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a35c2:	460f      	mov	r7, r1
 80a35c4:	461c      	mov	r4, r3
    delete handlers[pin];
 80a35c6:	b135      	cbz	r5, 80a35d6 <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a35c8:	4628      	mov	r0, r5
 80a35ca:	f7ff fb02 	bl	80a2bd2 <_ZNSt14_Function_baseD1Ev>
 80a35ce:	2110      	movs	r1, #16
 80a35d0:	4628      	mov	r0, r5
 80a35d2:	f000 fafd 	bl	80a3bd0 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a35d6:	2010      	movs	r0, #16
 80a35d8:	f7fc fd61 	bl	80a009e <_Znwj>
 80a35dc:	4605      	mov	r5, r0
 80a35de:	b110      	cbz	r0, 80a35e6 <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
 80a35e0:	4639      	mov	r1, r7
 80a35e2:	f7ff ffd9 	bl	80a3598 <_ZNSt8functionIFvvEEC1ERKS1_>
 80a35e6:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80a35ea:	4628      	mov	r0, r5
 80a35ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a35ee:	bf00      	nop
 80a35f0:	200004e4 	.word	0x200004e4

080a35f4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a35f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a35f6:	460c      	mov	r4, r1
 80a35f8:	4605      	mov	r5, r0
 80a35fa:	b085      	sub	sp, #20
 80a35fc:	4617      	mov	r7, r2
 80a35fe:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 80a3600:	f7fe fe1e 	bl	80a2240 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a3604:	4621      	mov	r1, r4
 80a3606:	4628      	mov	r0, r5
 80a3608:	f7ff ffd6 	bl	80a35b8 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a360c:	4604      	mov	r4, r0
 80a360e:	b1d0      	cbz	r0, 80a3646 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x52>
        HAL_InterruptExtraConfiguration extra = {0};
 80a3610:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3612:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a3614:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80a3616:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3618:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a361c:	bfb4      	ite	lt
 80a361e:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3620:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a3624:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3626:	bfa4      	itt	ge
 80a3628:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a362c:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a362e:	9300      	str	r3, [sp, #0]
 80a3630:	4907      	ldr	r1, [pc, #28]	; (80a3650 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)
 80a3632:	463b      	mov	r3, r7
 80a3634:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a3636:	bfa8      	it	ge
 80a3638:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a363c:	f7fe fdf8 	bl	80a2230 <HAL_Interrupts_Attach>
 80a3640:	b108      	cbz	r0, 80a3646 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x52>
            return false;
 80a3642:	2000      	movs	r0, #0
 80a3644:	e002      	b.n	80a364c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        }
    }
    return handler!=NULL;
 80a3646:	1c20      	adds	r0, r4, #0
 80a3648:	bf18      	it	ne
 80a364a:	2001      	movne	r0, #1
}
 80a364c:	b005      	add	sp, #20
 80a364e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3650:	080a3551 	.word	0x080a3551

080a3654 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3654:	4770      	bx	lr

080a3656 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3656:	7441      	strb	r1, [r0, #17]
 80a3658:	4770      	bx	lr

080a365a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a365a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a365c:	7c00      	ldrb	r0, [r0, #16]
 80a365e:	f7fe fec7 	bl	80a23f0 <HAL_USART_Available_Data_For_Write>
}
 80a3662:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3666:	bd08      	pop	{r3, pc}

080a3668 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3668:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a366a:	7c00      	ldrb	r0, [r0, #16]
 80a366c:	f7fe fe98 	bl	80a23a0 <HAL_USART_Available_Data>
}
 80a3670:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3674:	bd08      	pop	{r3, pc}

080a3676 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3676:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3678:	7c00      	ldrb	r0, [r0, #16]
 80a367a:	f7fe fea1 	bl	80a23c0 <HAL_USART_Peek_Data>
}
 80a367e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3682:	bf28      	it	cs
 80a3684:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3688:	bd08      	pop	{r3, pc}

080a368a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a368a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a368c:	7c00      	ldrb	r0, [r0, #16]
 80a368e:	f7fe fe8f 	bl	80a23b0 <HAL_USART_Read_Data>
}
 80a3692:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3696:	bf28      	it	cs
 80a3698:	f04f 30ff 	movcs.w	r0, #4294967295
 80a369c:	bd08      	pop	{r3, pc}

080a369e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a369e:	7c00      	ldrb	r0, [r0, #16]
 80a36a0:	f7fe be96 	b.w	80a23d0 <HAL_USART_Flush_Data>

080a36a4 <_ZN11USARTSerialD0Ev>:
 80a36a4:	b510      	push	{r4, lr}
 80a36a6:	4604      	mov	r4, r0
 80a36a8:	2114      	movs	r1, #20
 80a36aa:	f000 fa91 	bl	80a3bd0 <_ZdlPvj>
 80a36ae:	4620      	mov	r0, r4
 80a36b0:	bd10      	pop	{r4, pc}

080a36b2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a36b2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a36b4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a36b6:	4604      	mov	r4, r0
 80a36b8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a36ba:	b925      	cbnz	r5, 80a36c6 <_ZN11USARTSerial5writeEh+0x14>
 80a36bc:	7c00      	ldrb	r0, [r0, #16]
 80a36be:	f7fe fe97 	bl	80a23f0 <HAL_USART_Available_Data_For_Write>
 80a36c2:	2800      	cmp	r0, #0
 80a36c4:	dd05      	ble.n	80a36d2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a36c6:	4631      	mov	r1, r6
 80a36c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a36ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a36ce:	f7fe be5f 	b.w	80a2390 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a36d2:	4628      	mov	r0, r5
 80a36d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a36d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a36d8:	b510      	push	{r4, lr}
 80a36da:	4604      	mov	r4, r0
 80a36dc:	4608      	mov	r0, r1
 80a36de:	4611      	mov	r1, r2
 80a36e0:	2200      	movs	r2, #0
 80a36e2:	6062      	str	r2, [r4, #4]
 80a36e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a36e8:	60a2      	str	r2, [r4, #8]
 80a36ea:	4a05      	ldr	r2, [pc, #20]	; (80a3700 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a36ec:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a36ee:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a36f0:	2201      	movs	r2, #1
 80a36f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a36f4:	461a      	mov	r2, r3
 80a36f6:	f7fe fe3b 	bl	80a2370 <HAL_USART_Init>
}
 80a36fa:	4620      	mov	r0, r4
 80a36fc:	bd10      	pop	{r4, pc}
 80a36fe:	bf00      	nop
 80a3700:	080a58e4 	.word	0x080a58e4

080a3704 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a3704:	2300      	movs	r3, #0
 80a3706:	7c00      	ldrb	r0, [r0, #16]
 80a3708:	f7fe be7a 	b.w	80a2400 <HAL_USART_BeginConfig>

080a370c <_ZN11USARTSerial3endEv>:
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 80a370c:	7c00      	ldrb	r0, [r0, #16]
 80a370e:	f7fe be37 	b.w	80a2380 <HAL_USART_End>

080a3712 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3712:	7c00      	ldrb	r0, [r0, #16]
 80a3714:	f7fe be64 	b.w	80a23e0 <HAL_USART_Is_Enabled>

080a3718 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3718:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a371a:	4d0c      	ldr	r5, [pc, #48]	; (80a374c <_Z22__fetch_global_Serial1v+0x34>)
 80a371c:	6829      	ldr	r1, [r5, #0]
 80a371e:	f011 0401 	ands.w	r4, r1, #1
 80a3722:	d111      	bne.n	80a3748 <_Z22__fetch_global_Serial1v+0x30>
 80a3724:	4628      	mov	r0, r5
 80a3726:	f7fc fcc9 	bl	80a00bc <__cxa_guard_acquire>
 80a372a:	b168      	cbz	r0, 80a3748 <_Z22__fetch_global_Serial1v+0x30>
 80a372c:	4a08      	ldr	r2, [pc, #32]	; (80a3750 <_Z22__fetch_global_Serial1v+0x38>)
 80a372e:	4621      	mov	r1, r4
 80a3730:	4b08      	ldr	r3, [pc, #32]	; (80a3754 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3732:	4809      	ldr	r0, [pc, #36]	; (80a3758 <_Z22__fetch_global_Serial1v+0x40>)
 80a3734:	f7ff ffd0 	bl	80a36d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3738:	4628      	mov	r0, r5
 80a373a:	f7fc fcc4 	bl	80a00c6 <__cxa_guard_release>
 80a373e:	4a07      	ldr	r2, [pc, #28]	; (80a375c <_Z22__fetch_global_Serial1v+0x44>)
 80a3740:	4907      	ldr	r1, [pc, #28]	; (80a3760 <_Z22__fetch_global_Serial1v+0x48>)
 80a3742:	4805      	ldr	r0, [pc, #20]	; (80a3758 <_Z22__fetch_global_Serial1v+0x40>)
 80a3744:	f000 fa36 	bl	80a3bb4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3748:	4803      	ldr	r0, [pc, #12]	; (80a3758 <_Z22__fetch_global_Serial1v+0x40>)
 80a374a:	bd38      	pop	{r3, r4, r5, pc}
 80a374c:	200005dc 	.word	0x200005dc
 80a3750:	200005e0 	.word	0x200005e0
 80a3754:	20000558 	.word	0x20000558
 80a3758:	20000544 	.word	0x20000544
 80a375c:	20000080 	.word	0x20000080
 80a3760:	080a3655 	.word	0x080a3655

080a3764 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3764:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3766:	6883      	ldr	r3, [r0, #8]
 80a3768:	4604      	mov	r4, r0
 80a376a:	b90b      	cbnz	r3, 80a3770 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a376c:	f000 fa43 	bl	80a3bf6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3770:	68c3      	ldr	r3, [r0, #12]
 80a3772:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a3774:	68a3      	ldr	r3, [r4, #8]
 80a3776:	b11b      	cbz	r3, 80a3780 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3778:	2203      	movs	r2, #3
 80a377a:	4621      	mov	r1, r4
 80a377c:	4620      	mov	r0, r4
 80a377e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3780:	4620      	mov	r0, r4
}
 80a3782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3786:	2110      	movs	r1, #16
 80a3788:	f000 ba22 	b.w	80a3bd0 <_ZdlPvj>

080a378c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a378c:	4770      	bx	lr

080a378e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a378e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3790:	4606      	mov	r6, r0
 80a3792:	4615      	mov	r5, r2
 80a3794:	460c      	mov	r4, r1
 80a3796:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3798:	42bc      	cmp	r4, r7
 80a379a:	d006      	beq.n	80a37aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a379c:	6833      	ldr	r3, [r6, #0]
 80a379e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a37a2:	689b      	ldr	r3, [r3, #8]
 80a37a4:	4630      	mov	r0, r6
 80a37a6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a37a8:	e7f6      	b.n	80a3798 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a37aa:	4628      	mov	r0, r5
 80a37ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a37ae <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a37ae:	2200      	movs	r2, #0
 80a37b0:	7c00      	ldrb	r0, [r0, #16]
 80a37b2:	f7fe be4d 	b.w	80a2450 <HAL_I2C_Write_Data>

080a37b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a37b6:	2100      	movs	r1, #0
 80a37b8:	7c00      	ldrb	r0, [r0, #16]
 80a37ba:	f7fe be51 	b.w	80a2460 <HAL_I2C_Available_Data>

080a37be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a37be:	2100      	movs	r1, #0
 80a37c0:	7c00      	ldrb	r0, [r0, #16]
 80a37c2:	f7fe be55 	b.w	80a2470 <HAL_I2C_Read_Data>

080a37c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a37c6:	2100      	movs	r1, #0
 80a37c8:	7c00      	ldrb	r0, [r0, #16]
 80a37ca:	f7fe be59 	b.w	80a2480 <HAL_I2C_Peek_Data>

080a37ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a37ce:	2100      	movs	r1, #0
 80a37d0:	7c00      	ldrb	r0, [r0, #16]
 80a37d2:	f7fe be5d 	b.w	80a2490 <HAL_I2C_Flush_Data>

080a37d6 <_ZN7TwoWireD0Ev>:
 80a37d6:	b510      	push	{r4, lr}
 80a37d8:	4604      	mov	r4, r0
 80a37da:	2114      	movs	r1, #20
 80a37dc:	f000 f9f8 	bl	80a3bd0 <_ZdlPvj>
 80a37e0:	4620      	mov	r0, r4
 80a37e2:	bd10      	pop	{r4, pc}

080a37e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a37e4:	b510      	push	{r4, lr}
 80a37e6:	4604      	mov	r4, r0
 80a37e8:	2300      	movs	r3, #0
 80a37ea:	6063      	str	r3, [r4, #4]
 80a37ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a37f0:	60a3      	str	r3, [r4, #8]
 80a37f2:	4b04      	ldr	r3, [pc, #16]	; (80a3804 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a37f4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a37f6:	4608      	mov	r0, r1
 80a37f8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a37fa:	4611      	mov	r1, r2
 80a37fc:	f7fe fe58 	bl	80a24b0 <HAL_I2C_Init>
}
 80a3800:	4620      	mov	r0, r4
 80a3802:	bd10      	pop	{r4, pc}
 80a3804:	080a5914 	.word	0x080a5914

080a3808 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a3808:	2200      	movs	r2, #0
 80a380a:	7c00      	ldrb	r0, [r0, #16]
 80a380c:	f7fe be00 	b.w	80a2410 <HAL_I2C_Set_Speed>

080a3810 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3810:	2300      	movs	r3, #0
 80a3812:	461a      	mov	r2, r3
 80a3814:	4619      	mov	r1, r3
 80a3816:	7c00      	ldrb	r0, [r0, #16]
 80a3818:	f7fe be02 	b.w	80a2420 <HAL_I2C_Begin>

080a381c <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a381c:	2200      	movs	r2, #0
 80a381e:	7c00      	ldrb	r0, [r0, #16]
 80a3820:	f7fe be06 	b.w	80a2430 <HAL_I2C_Begin_Transmission>

080a3824 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a3824:	b2c9      	uxtb	r1, r1
 80a3826:	f7ff bff9 	b.w	80a381c <_ZN7TwoWire17beginTransmissionEh>

080a382a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a382a:	2200      	movs	r2, #0
 80a382c:	7c00      	ldrb	r0, [r0, #16]
 80a382e:	f7fe be07 	b.w	80a2440 <HAL_I2C_End_Transmission>

080a3832 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a3832:	2101      	movs	r1, #1
 80a3834:	f7ff bff9 	b.w	80a382a <_ZN7TwoWire15endTransmissionEh>

080a3838 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a3838:	2100      	movs	r1, #0
 80a383a:	7c00      	ldrb	r0, [r0, #16]
 80a383c:	f7fe be30 	b.w	80a24a0 <HAL_I2C_Is_Enabled>

080a3840 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3840:	2200      	movs	r2, #0
 80a3842:	4611      	mov	r1, r2
 80a3844:	6840      	ldr	r0, [r0, #4]
 80a3846:	f7fe bed1 	b.w	80a25ec <network_ready>

080a384a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a384a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a384c:	4616      	mov	r6, r2
 80a384e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3850:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3852:	460f      	mov	r7, r1
 80a3854:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a3856:	2100      	movs	r1, #0
 80a3858:	a803      	add	r0, sp, #12
 80a385a:	f001 f93e 	bl	80a4ada <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a385e:	4630      	mov	r0, r6
 80a3860:	f001 f987 	bl	80a4b72 <strlen>
 80a3864:	2500      	movs	r5, #0
 80a3866:	9500      	str	r5, [sp, #0]
 80a3868:	b281      	uxth	r1, r0
 80a386a:	687b      	ldr	r3, [r7, #4]
 80a386c:	aa03      	add	r2, sp, #12
 80a386e:	4630      	mov	r0, r6
 80a3870:	f7fe fe58 	bl	80a2524 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3874:	b120      	cbz	r0, 80a3880 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3876:	4629      	mov	r1, r5
 80a3878:	4620      	mov	r0, r4
 80a387a:	f7ff fd79 	bl	80a3370 <_ZN9IPAddressC1Em>
 80a387e:	e003      	b.n	80a3888 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3880:	a903      	add	r1, sp, #12
 80a3882:	4620      	mov	r0, r4
 80a3884:	f7ff fd62 	bl	80a334c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3888:	4620      	mov	r0, r4
 80a388a:	b009      	add	sp, #36	; 0x24
 80a388c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a388e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a388e:	2200      	movs	r2, #0
 80a3890:	4611      	mov	r1, r2
 80a3892:	6840      	ldr	r0, [r0, #4]
 80a3894:	f7fe beca 	b.w	80a262c <network_listening>

080a3898 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3898:	2200      	movs	r2, #0
 80a389a:	4611      	mov	r1, r2
 80a389c:	6840      	ldr	r0, [r0, #4]
 80a389e:	f7fe bed5 	b.w	80a264c <network_get_listen_timeout>

080a38a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a38a2:	2200      	movs	r2, #0
 80a38a4:	6840      	ldr	r0, [r0, #4]
 80a38a6:	f7fe bec9 	b.w	80a263c <network_set_listen_timeout>

080a38aa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a38aa:	2200      	movs	r2, #0
 80a38ac:	f081 0101 	eor.w	r1, r1, #1
 80a38b0:	6840      	ldr	r0, [r0, #4]
 80a38b2:	f7fe beb3 	b.w	80a261c <network_listen>

080a38b6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a38b6:	2300      	movs	r3, #0
 80a38b8:	461a      	mov	r2, r3
 80a38ba:	4619      	mov	r1, r3
 80a38bc:	6840      	ldr	r0, [r0, #4]
 80a38be:	f7fe bea5 	b.w	80a260c <network_off>

080a38c2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a38c2:	2200      	movs	r2, #0
 80a38c4:	4611      	mov	r1, r2
 80a38c6:	6840      	ldr	r0, [r0, #4]
 80a38c8:	f7fe be80 	b.w	80a25cc <network_connecting>

080a38cc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a38cc:	2200      	movs	r2, #0
 80a38ce:	2102      	movs	r1, #2
 80a38d0:	6840      	ldr	r0, [r0, #4]
 80a38d2:	f7fe be83 	b.w	80a25dc <network_disconnect>

080a38d6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a38d6:	2300      	movs	r3, #0
 80a38d8:	461a      	mov	r2, r3
 80a38da:	6840      	ldr	r0, [r0, #4]
 80a38dc:	f7fe be6e 	b.w	80a25bc <network_connect>

080a38e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a38e0:	4b02      	ldr	r3, [pc, #8]	; (80a38ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a38e2:	2204      	movs	r2, #4
 80a38e4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a38e6:	4a02      	ldr	r2, [pc, #8]	; (80a38f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a38e8:	601a      	str	r2, [r3, #0]
 80a38ea:	4770      	bx	lr
 80a38ec:	20000664 	.word	0x20000664
 80a38f0:	080a593c 	.word	0x080a593c

080a38f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a38f4:	2300      	movs	r3, #0
 80a38f6:	461a      	mov	r2, r3
 80a38f8:	6840      	ldr	r0, [r0, #4]
 80a38fa:	f7fe be5f 	b.w	80a25bc <network_connect>

080a38fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a38fe:	2200      	movs	r2, #0
 80a3900:	2102      	movs	r1, #2
 80a3902:	6840      	ldr	r0, [r0, #4]
 80a3904:	f7fe be6a 	b.w	80a25dc <network_disconnect>

080a3908 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3908:	2200      	movs	r2, #0
 80a390a:	4611      	mov	r1, r2
 80a390c:	6840      	ldr	r0, [r0, #4]
 80a390e:	f7fe be5d 	b.w	80a25cc <network_connecting>

080a3912 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3912:	2200      	movs	r2, #0
 80a3914:	4611      	mov	r1, r2
 80a3916:	6840      	ldr	r0, [r0, #4]
 80a3918:	f7fe be68 	b.w	80a25ec <network_ready>

080a391c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a391c:	2300      	movs	r3, #0
 80a391e:	461a      	mov	r2, r3
 80a3920:	4619      	mov	r1, r3
 80a3922:	6840      	ldr	r0, [r0, #4]
 80a3924:	f7fe be6a 	b.w	80a25fc <network_on>

080a3928 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a3928:	2300      	movs	r3, #0
 80a392a:	461a      	mov	r2, r3
 80a392c:	4619      	mov	r1, r3
 80a392e:	6840      	ldr	r0, [r0, #4]
 80a3930:	f7fe be6c 	b.w	80a260c <network_off>

080a3934 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a3934:	2200      	movs	r2, #0
 80a3936:	f081 0101 	eor.w	r1, r1, #1
 80a393a:	6840      	ldr	r0, [r0, #4]
 80a393c:	f7fe be6e 	b.w	80a261c <network_listen>

080a3940 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3940:	2200      	movs	r2, #0
 80a3942:	6840      	ldr	r0, [r0, #4]
 80a3944:	f7fe be7a 	b.w	80a263c <network_set_listen_timeout>

080a3948 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3948:	2200      	movs	r2, #0
 80a394a:	4611      	mov	r1, r2
 80a394c:	6840      	ldr	r0, [r0, #4]
 80a394e:	f7fe be7d 	b.w	80a264c <network_get_listen_timeout>

080a3952 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3952:	2200      	movs	r2, #0
 80a3954:	4611      	mov	r1, r2
 80a3956:	6840      	ldr	r0, [r0, #4]
 80a3958:	f7fe be68 	b.w	80a262c <network_listening>

080a395c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a395c:	b570      	push	{r4, r5, r6, lr}
 80a395e:	4616      	mov	r6, r2
 80a3960:	b08e      	sub	sp, #56	; 0x38
 80a3962:	4604      	mov	r4, r0
    IPAddress addr;
 80a3964:	a808      	add	r0, sp, #32
 80a3966:	f7ff fce3 	bl	80a3330 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a396a:	2211      	movs	r2, #17
 80a396c:	2100      	movs	r1, #0
 80a396e:	a803      	add	r0, sp, #12
 80a3970:	f001 f8b3 	bl	80a4ada <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3974:	4630      	mov	r0, r6
 80a3976:	f001 f8fc 	bl	80a4b72 <strlen>
 80a397a:	2500      	movs	r5, #0
 80a397c:	4b0a      	ldr	r3, [pc, #40]	; (80a39a8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a397e:	9500      	str	r5, [sp, #0]
 80a3980:	b281      	uxth	r1, r0
 80a3982:	685b      	ldr	r3, [r3, #4]
 80a3984:	aa03      	add	r2, sp, #12
 80a3986:	4630      	mov	r0, r6
 80a3988:	f7fe fdcc 	bl	80a2524 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a398c:	b120      	cbz	r0, 80a3998 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a398e:	4629      	mov	r1, r5
 80a3990:	4620      	mov	r0, r4
 80a3992:	f7ff fced 	bl	80a3370 <_ZN9IPAddressC1Em>
 80a3996:	e003      	b.n	80a39a0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3998:	a903      	add	r1, sp, #12
 80a399a:	4620      	mov	r0, r4
 80a399c:	f7ff fcd6 	bl	80a334c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a39a0:	4620      	mov	r0, r4
 80a39a2:	b00e      	add	sp, #56	; 0x38
 80a39a4:	bd70      	pop	{r4, r5, r6, pc}
 80a39a6:	bf00      	nop
 80a39a8:	20000664 	.word	0x20000664

080a39ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a39ac:	4b02      	ldr	r3, [pc, #8]	; (80a39b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a39ae:	4a03      	ldr	r2, [pc, #12]	; (80a39bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a39b0:	601a      	str	r2, [r3, #0]
 80a39b2:	2200      	movs	r2, #0
 80a39b4:	605a      	str	r2, [r3, #4]
 80a39b6:	4770      	bx	lr
 80a39b8:	2000066c 	.word	0x2000066c
 80a39bc:	080a5970 	.word	0x080a5970

080a39c0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a39c0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a39c2:	4e1a      	ldr	r6, [pc, #104]	; (80a3a2c <pinAvailable+0x6c>)
 80a39c4:	4604      	mov	r4, r0
 80a39c6:	6831      	ldr	r1, [r6, #0]
 80a39c8:	f011 0501 	ands.w	r5, r1, #1
 80a39cc:	d10f      	bne.n	80a39ee <pinAvailable+0x2e>
 80a39ce:	4630      	mov	r0, r6
 80a39d0:	f7fc fb74 	bl	80a00bc <__cxa_guard_acquire>
 80a39d4:	b158      	cbz	r0, 80a39ee <pinAvailable+0x2e>
 80a39d6:	4629      	mov	r1, r5
 80a39d8:	4815      	ldr	r0, [pc, #84]	; (80a3a30 <pinAvailable+0x70>)
 80a39da:	f7fe fe95 	bl	80a2708 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a39de:	4630      	mov	r0, r6
 80a39e0:	f7fc fb71 	bl	80a00c6 <__cxa_guard_release>
 80a39e4:	4a13      	ldr	r2, [pc, #76]	; (80a3a34 <pinAvailable+0x74>)
 80a39e6:	4914      	ldr	r1, [pc, #80]	; (80a3a38 <pinAvailable+0x78>)
 80a39e8:	4811      	ldr	r0, [pc, #68]	; (80a3a30 <pinAvailable+0x70>)
 80a39ea:	f000 f8e3 	bl	80a3bb4 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a39ee:	4810      	ldr	r0, [pc, #64]	; (80a3a30 <pinAvailable+0x70>)
 80a39f0:	f7fe ff39 	bl	80a2866 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a39f4:	b128      	cbz	r0, 80a3a02 <pinAvailable+0x42>
 80a39f6:	f1a4 030d 	sub.w	r3, r4, #13
 80a39fa:	2b02      	cmp	r3, #2
 80a39fc:	d801      	bhi.n	80a3a02 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a39fe:	2000      	movs	r0, #0
 80a3a00:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3a02:	f000 f8b1 	bl	80a3b68 <_Z19__fetch_global_Wirev>
 80a3a06:	f7ff ff17 	bl	80a3838 <_ZN7TwoWire9isEnabledEv>
 80a3a0a:	b108      	cbz	r0, 80a3a10 <pinAvailable+0x50>
 80a3a0c:	2c01      	cmp	r4, #1
 80a3a0e:	d9f6      	bls.n	80a39fe <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3a10:	f7ff fe82 	bl	80a3718 <_Z22__fetch_global_Serial1v>
 80a3a14:	f7ff fe7d 	bl	80a3712 <_ZN11USARTSerial9isEnabledEv>
 80a3a18:	b118      	cbz	r0, 80a3a22 <pinAvailable+0x62>
 80a3a1a:	f1a4 0312 	sub.w	r3, r4, #18
 80a3a1e:	2b01      	cmp	r3, #1
 80a3a20:	d9ed      	bls.n	80a39fe <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3a22:	2c17      	cmp	r4, #23
 80a3a24:	bf8c      	ite	hi
 80a3a26:	2000      	movhi	r0, #0
 80a3a28:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3a2a:	bd70      	pop	{r4, r5, r6, pc}
 80a3a2c:	2000016c 	.word	0x2000016c
 80a3a30:	20000170 	.word	0x20000170
 80a3a34:	20000080 	.word	0x20000080
 80a3a38:	080a0991 	.word	0x080a0991

080a3a3c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a3c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3a3e:	b538      	push	{r3, r4, r5, lr}
 80a3a40:	4604      	mov	r4, r0
 80a3a42:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a44:	d80a      	bhi.n	80a3a5c <pinMode+0x20>
 80a3a46:	29ff      	cmp	r1, #255	; 0xff
 80a3a48:	d008      	beq.n	80a3a5c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3a4a:	f7ff ffb9 	bl	80a39c0 <pinAvailable>
 80a3a4e:	b128      	cbz	r0, 80a3a5c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3a50:	4629      	mov	r1, r5
 80a3a52:	4620      	mov	r0, r4
}
 80a3a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3a58:	f7fe bbca 	b.w	80a21f0 <HAL_Pin_Mode>
 80a3a5c:	bd38      	pop	{r3, r4, r5, pc}

080a3a5e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3a5e:	b538      	push	{r3, r4, r5, lr}
 80a3a60:	4604      	mov	r4, r0
 80a3a62:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3a64:	f7fe fbcc 	bl	80a2200 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3a68:	28ff      	cmp	r0, #255	; 0xff
 80a3a6a:	d010      	beq.n	80a3a8e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3a6c:	2806      	cmp	r0, #6
 80a3a6e:	d804      	bhi.n	80a3a7a <digitalWrite+0x1c>
 80a3a70:	234d      	movs	r3, #77	; 0x4d
 80a3a72:	fa23 f000 	lsr.w	r0, r3, r0
 80a3a76:	07c3      	lsls	r3, r0, #31
 80a3a78:	d409      	bmi.n	80a3a8e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3a7a:	4620      	mov	r0, r4
 80a3a7c:	f7ff ffa0 	bl	80a39c0 <pinAvailable>
 80a3a80:	b128      	cbz	r0, 80a3a8e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3a82:	4629      	mov	r1, r5
 80a3a84:	4620      	mov	r0, r4
}
 80a3a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3a8a:	f7fe bbc1 	b.w	80a2210 <HAL_GPIO_Write>
 80a3a8e:	bd38      	pop	{r3, r4, r5, pc}

080a3a90 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3a90:	b510      	push	{r4, lr}
 80a3a92:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3a94:	f7fe fbb4 	bl	80a2200 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a3a98:	3804      	subs	r0, #4
 80a3a9a:	b2c0      	uxtb	r0, r0
 80a3a9c:	2801      	cmp	r0, #1
 80a3a9e:	d908      	bls.n	80a3ab2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3aa0:	4620      	mov	r0, r4
 80a3aa2:	f7ff ff8d 	bl	80a39c0 <pinAvailable>
 80a3aa6:	b120      	cbz	r0, 80a3ab2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3aa8:	4620      	mov	r0, r4
}
 80a3aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3aae:	f7fe bbb7 	b.w	80a2220 <HAL_GPIO_Read>
}
 80a3ab2:	2000      	movs	r0, #0
 80a3ab4:	bd10      	pop	{r4, pc}

080a3ab6 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a3ab6:	b538      	push	{r3, r4, r5, lr}
 80a3ab8:	4604      	mov	r4, r0
 80a3aba:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a3abc:	f7ff ff80 	bl	80a39c0 <pinAvailable>
 80a3ac0:	b1f0      	cbz	r0, 80a3b00 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a3ac2:	2104      	movs	r1, #4
 80a3ac4:	4620      	mov	r0, r4
 80a3ac6:	f7fe fb8b 	bl	80a21e0 <HAL_Validate_Pin_Function>
 80a3aca:	2804      	cmp	r0, #4
 80a3acc:	d105      	bne.n	80a3ada <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a3ace:	b2a9      	uxth	r1, r5
 80a3ad0:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a3ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a3ad6:	f7fe bbbb 	b.w	80a2250 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a3ada:	2102      	movs	r1, #2
 80a3adc:	4620      	mov	r0, r4
 80a3ade:	f7fe fb7f 	bl	80a21e0 <HAL_Validate_Pin_Function>
 80a3ae2:	2802      	cmp	r0, #2
 80a3ae4:	d10c      	bne.n	80a3b00 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3ae6:	4620      	mov	r0, r4
 80a3ae8:	f7fe fb8a 	bl	80a2200 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a3aec:	2801      	cmp	r0, #1
 80a3aee:	d001      	beq.n	80a3af4 <_Z11analogWritetm+0x3e>
 80a3af0:	2804      	cmp	r0, #4
 80a3af2:	d105      	bne.n	80a3b00 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a3af4:	4629      	mov	r1, r5
 80a3af6:	4620      	mov	r0, r4
    }
}
 80a3af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a3afc:	f7fe bbb0 	b.w	80a2260 <HAL_PWM_Write_Ext>
 80a3b00:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3b04 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3b04:	b513      	push	{r0, r1, r4, lr}
 80a3b06:	4c08      	ldr	r4, [pc, #32]	; (80a3b28 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3b08:	2300      	movs	r3, #0
 80a3b0a:	461a      	mov	r2, r3
 80a3b0c:	4619      	mov	r1, r3
 80a3b0e:	9300      	str	r3, [sp, #0]
 80a3b10:	4620      	mov	r0, r4
 80a3b12:	f7ff fc43 	bl	80a339c <_ZN9IPAddressC1Ehhhh>
 80a3b16:	4620      	mov	r0, r4
 80a3b18:	4a04      	ldr	r2, [pc, #16]	; (80a3b2c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3b1a:	4905      	ldr	r1, [pc, #20]	; (80a3b30 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3b1c:	b002      	add	sp, #8
 80a3b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3b22:	f000 b847 	b.w	80a3bb4 <__aeabi_atexit>
 80a3b26:	bf00      	nop
 80a3b28:	20000678 	.word	0x20000678
 80a3b2c:	20000080 	.word	0x20000080
 80a3b30:	080a32ed 	.word	0x080a32ed

080a3b34 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a3b34:	b570      	push	{r4, r5, r6, lr}
 80a3b36:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3b38:	2514      	movs	r5, #20
 80a3b3a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3b3c:	4e09      	ldr	r6, [pc, #36]	; (80a3b64 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3b3e:	2100      	movs	r1, #0
 80a3b40:	f000 ffcb 	bl	80a4ada <memset>
 80a3b44:	8025      	strh	r5, [r4, #0]
 80a3b46:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3b48:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3b4a:	60a5      	str	r5, [r4, #8]
 80a3b4c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3b4e:	4628      	mov	r0, r5
 80a3b50:	f000 f840 	bl	80a3bd4 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3b54:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3b56:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3b58:	4628      	mov	r0, r5
 80a3b5a:	f000 f83b 	bl	80a3bd4 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3b5e:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a3b60:	4620      	mov	r0, r4
 80a3b62:	bd70      	pop	{r4, r5, r6, pc}
 80a3b64:	080a599c 	.word	0x080a599c

080a3b68 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3b68:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3b6a:	4d0e      	ldr	r5, [pc, #56]	; (80a3ba4 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3b6c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3b6e:	6829      	ldr	r1, [r5, #0]
 80a3b70:	f011 0401 	ands.w	r4, r1, #1
 80a3b74:	d113      	bne.n	80a3b9e <_Z19__fetch_global_Wirev+0x36>
 80a3b76:	4628      	mov	r0, r5
 80a3b78:	f7fc faa0 	bl	80a00bc <__cxa_guard_acquire>
 80a3b7c:	b178      	cbz	r0, 80a3b9e <_Z19__fetch_global_Wirev+0x36>
 80a3b7e:	a801      	add	r0, sp, #4
 80a3b80:	f7ff ffd8 	bl	80a3b34 <_Z17acquireWireBufferv>
 80a3b84:	aa01      	add	r2, sp, #4
 80a3b86:	4621      	mov	r1, r4
 80a3b88:	4807      	ldr	r0, [pc, #28]	; (80a3ba8 <_Z19__fetch_global_Wirev+0x40>)
 80a3b8a:	f7ff fe2b 	bl	80a37e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a3b8e:	4628      	mov	r0, r5
 80a3b90:	f7fc fa99 	bl	80a00c6 <__cxa_guard_release>
 80a3b94:	4a05      	ldr	r2, [pc, #20]	; (80a3bac <_Z19__fetch_global_Wirev+0x44>)
 80a3b96:	4906      	ldr	r1, [pc, #24]	; (80a3bb0 <_Z19__fetch_global_Wirev+0x48>)
 80a3b98:	4803      	ldr	r0, [pc, #12]	; (80a3ba8 <_Z19__fetch_global_Wirev+0x40>)
 80a3b9a:	f000 f80b 	bl	80a3bb4 <__aeabi_atexit>
	return wire;
}
 80a3b9e:	4802      	ldr	r0, [pc, #8]	; (80a3ba8 <_Z19__fetch_global_Wirev+0x40>)
 80a3ba0:	b007      	add	sp, #28
 80a3ba2:	bd30      	pop	{r4, r5, pc}
 80a3ba4:	20000690 	.word	0x20000690
 80a3ba8:	20000694 	.word	0x20000694
 80a3bac:	20000080 	.word	0x20000080
 80a3bb0:	080a378d 	.word	0x080a378d

080a3bb4 <__aeabi_atexit>:
 80a3bb4:	460b      	mov	r3, r1
 80a3bb6:	4601      	mov	r1, r0
 80a3bb8:	4618      	mov	r0, r3
 80a3bba:	f000 bf75 	b.w	80a4aa8 <__cxa_atexit>
	...

080a3bc0 <_ZSt15get_new_handlerv>:
 80a3bc0:	4b02      	ldr	r3, [pc, #8]	; (80a3bcc <_ZSt15get_new_handlerv+0xc>)
 80a3bc2:	6818      	ldr	r0, [r3, #0]
 80a3bc4:	f3bf 8f5f 	dmb	sy
 80a3bc8:	4770      	bx	lr
 80a3bca:	bf00      	nop
 80a3bcc:	200006a8 	.word	0x200006a8

080a3bd0 <_ZdlPvj>:
 80a3bd0:	f7fc ba67 	b.w	80a00a2 <_ZdlPv>

080a3bd4 <_ZnajRKSt9nothrow_t>:
 80a3bd4:	f000 b800 	b.w	80a3bd8 <_ZnwjRKSt9nothrow_t>

080a3bd8 <_ZnwjRKSt9nothrow_t>:
 80a3bd8:	b510      	push	{r4, lr}
 80a3bda:	2800      	cmp	r0, #0
 80a3bdc:	bf14      	ite	ne
 80a3bde:	4604      	movne	r4, r0
 80a3be0:	2401      	moveq	r4, #1
 80a3be2:	4620      	mov	r0, r4
 80a3be4:	f7fe fd62 	bl	80a26ac <malloc>
 80a3be8:	b920      	cbnz	r0, 80a3bf4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3bea:	f7ff ffe9 	bl	80a3bc0 <_ZSt15get_new_handlerv>
 80a3bee:	b108      	cbz	r0, 80a3bf4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3bf0:	4780      	blx	r0
 80a3bf2:	e7f6      	b.n	80a3be2 <_ZnwjRKSt9nothrow_t+0xa>
 80a3bf4:	bd10      	pop	{r4, pc}

080a3bf6 <_ZSt25__throw_bad_function_callv>:
 80a3bf6:	b508      	push	{r3, lr}
 80a3bf8:	f7fe fd70 	bl	80a26dc <abort>

080a3bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3bfc:	4b18      	ldr	r3, [pc, #96]	; (80a3c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3bfe:	681a      	ldr	r2, [r3, #0]
 80a3c00:	07d1      	lsls	r1, r2, #31
 80a3c02:	bf5c      	itt	pl
 80a3c04:	2201      	movpl	r2, #1
 80a3c06:	601a      	strpl	r2, [r3, #0]
 80a3c08:	4b16      	ldr	r3, [pc, #88]	; (80a3c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3c0a:	681a      	ldr	r2, [r3, #0]
 80a3c0c:	07d2      	lsls	r2, r2, #31
 80a3c0e:	bf5c      	itt	pl
 80a3c10:	2201      	movpl	r2, #1
 80a3c12:	601a      	strpl	r2, [r3, #0]
 80a3c14:	4b14      	ldr	r3, [pc, #80]	; (80a3c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3c16:	681a      	ldr	r2, [r3, #0]
 80a3c18:	07d0      	lsls	r0, r2, #31
 80a3c1a:	bf5c      	itt	pl
 80a3c1c:	2201      	movpl	r2, #1
 80a3c1e:	601a      	strpl	r2, [r3, #0]
 80a3c20:	4b12      	ldr	r3, [pc, #72]	; (80a3c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3c22:	681a      	ldr	r2, [r3, #0]
 80a3c24:	07d1      	lsls	r1, r2, #31
 80a3c26:	bf5c      	itt	pl
 80a3c28:	2201      	movpl	r2, #1
 80a3c2a:	601a      	strpl	r2, [r3, #0]
 80a3c2c:	4b10      	ldr	r3, [pc, #64]	; (80a3c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3c2e:	681a      	ldr	r2, [r3, #0]
 80a3c30:	07d2      	lsls	r2, r2, #31
 80a3c32:	bf5c      	itt	pl
 80a3c34:	2201      	movpl	r2, #1
 80a3c36:	601a      	strpl	r2, [r3, #0]
 80a3c38:	4b0e      	ldr	r3, [pc, #56]	; (80a3c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3c3a:	681a      	ldr	r2, [r3, #0]
 80a3c3c:	07d0      	lsls	r0, r2, #31
 80a3c3e:	bf5c      	itt	pl
 80a3c40:	2201      	movpl	r2, #1
 80a3c42:	601a      	strpl	r2, [r3, #0]
 80a3c44:	4b0c      	ldr	r3, [pc, #48]	; (80a3c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3c46:	681a      	ldr	r2, [r3, #0]
 80a3c48:	07d1      	lsls	r1, r2, #31
 80a3c4a:	bf5c      	itt	pl
 80a3c4c:	2201      	movpl	r2, #1
 80a3c4e:	601a      	strpl	r2, [r3, #0]
 80a3c50:	4b0a      	ldr	r3, [pc, #40]	; (80a3c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3c52:	681a      	ldr	r2, [r3, #0]
 80a3c54:	07d2      	lsls	r2, r2, #31
 80a3c56:	bf5c      	itt	pl
 80a3c58:	2201      	movpl	r2, #1
 80a3c5a:	601a      	strpl	r2, [r3, #0]
 80a3c5c:	4770      	bx	lr
 80a3c5e:	bf00      	nop
 80a3c60:	200006c8 	.word	0x200006c8
 80a3c64:	200006c4 	.word	0x200006c4
 80a3c68:	200006c0 	.word	0x200006c0
 80a3c6c:	200006bc 	.word	0x200006bc
 80a3c70:	200006b8 	.word	0x200006b8
 80a3c74:	200006b4 	.word	0x200006b4
 80a3c78:	200006b0 	.word	0x200006b0
 80a3c7c:	200006ac 	.word	0x200006ac

080a3c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3c80:	4b24      	ldr	r3, [pc, #144]	; (80a3d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3c82:	681a      	ldr	r2, [r3, #0]
 80a3c84:	07d0      	lsls	r0, r2, #31
 80a3c86:	bf5c      	itt	pl
 80a3c88:	2201      	movpl	r2, #1
 80a3c8a:	601a      	strpl	r2, [r3, #0]
 80a3c8c:	4b22      	ldr	r3, [pc, #136]	; (80a3d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3c8e:	681a      	ldr	r2, [r3, #0]
 80a3c90:	07d1      	lsls	r1, r2, #31
 80a3c92:	bf5c      	itt	pl
 80a3c94:	2201      	movpl	r2, #1
 80a3c96:	601a      	strpl	r2, [r3, #0]
 80a3c98:	4b20      	ldr	r3, [pc, #128]	; (80a3d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3c9a:	681a      	ldr	r2, [r3, #0]
 80a3c9c:	07d2      	lsls	r2, r2, #31
 80a3c9e:	bf5c      	itt	pl
 80a3ca0:	2201      	movpl	r2, #1
 80a3ca2:	601a      	strpl	r2, [r3, #0]
 80a3ca4:	4b1e      	ldr	r3, [pc, #120]	; (80a3d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3ca6:	681a      	ldr	r2, [r3, #0]
 80a3ca8:	07d0      	lsls	r0, r2, #31
 80a3caa:	bf5c      	itt	pl
 80a3cac:	2201      	movpl	r2, #1
 80a3cae:	601a      	strpl	r2, [r3, #0]
 80a3cb0:	4b1c      	ldr	r3, [pc, #112]	; (80a3d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3cb2:	681a      	ldr	r2, [r3, #0]
 80a3cb4:	07d1      	lsls	r1, r2, #31
 80a3cb6:	bf5c      	itt	pl
 80a3cb8:	2201      	movpl	r2, #1
 80a3cba:	601a      	strpl	r2, [r3, #0]
 80a3cbc:	4b1a      	ldr	r3, [pc, #104]	; (80a3d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3cbe:	681a      	ldr	r2, [r3, #0]
 80a3cc0:	07d2      	lsls	r2, r2, #31
 80a3cc2:	bf5c      	itt	pl
 80a3cc4:	2201      	movpl	r2, #1
 80a3cc6:	601a      	strpl	r2, [r3, #0]
 80a3cc8:	4b18      	ldr	r3, [pc, #96]	; (80a3d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3cca:	681a      	ldr	r2, [r3, #0]
 80a3ccc:	07d0      	lsls	r0, r2, #31
 80a3cce:	bf5c      	itt	pl
 80a3cd0:	2201      	movpl	r2, #1
 80a3cd2:	601a      	strpl	r2, [r3, #0]
 80a3cd4:	4b16      	ldr	r3, [pc, #88]	; (80a3d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3cd6:	681a      	ldr	r2, [r3, #0]
 80a3cd8:	07d1      	lsls	r1, r2, #31
 80a3cda:	bf5c      	itt	pl
 80a3cdc:	2201      	movpl	r2, #1
 80a3cde:	601a      	strpl	r2, [r3, #0]
 80a3ce0:	4b14      	ldr	r3, [pc, #80]	; (80a3d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3ce2:	681a      	ldr	r2, [r3, #0]
 80a3ce4:	07d2      	lsls	r2, r2, #31
 80a3ce6:	bf5c      	itt	pl
 80a3ce8:	2201      	movpl	r2, #1
 80a3cea:	601a      	strpl	r2, [r3, #0]
 80a3cec:	4b12      	ldr	r3, [pc, #72]	; (80a3d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3cee:	681a      	ldr	r2, [r3, #0]
 80a3cf0:	07d0      	lsls	r0, r2, #31
 80a3cf2:	bf5c      	itt	pl
 80a3cf4:	2201      	movpl	r2, #1
 80a3cf6:	601a      	strpl	r2, [r3, #0]
 80a3cf8:	4b10      	ldr	r3, [pc, #64]	; (80a3d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3cfa:	681a      	ldr	r2, [r3, #0]
 80a3cfc:	07d1      	lsls	r1, r2, #31
 80a3cfe:	bf5c      	itt	pl
 80a3d00:	2201      	movpl	r2, #1
 80a3d02:	601a      	strpl	r2, [r3, #0]
 80a3d04:	4b0e      	ldr	r3, [pc, #56]	; (80a3d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3d06:	681a      	ldr	r2, [r3, #0]
 80a3d08:	07d2      	lsls	r2, r2, #31
 80a3d0a:	bf5c      	itt	pl
 80a3d0c:	2201      	movpl	r2, #1
 80a3d0e:	601a      	strpl	r2, [r3, #0]
 80a3d10:	4770      	bx	lr
 80a3d12:	bf00      	nop
 80a3d14:	200006f8 	.word	0x200006f8
 80a3d18:	200006f4 	.word	0x200006f4
 80a3d1c:	200006f0 	.word	0x200006f0
 80a3d20:	200006ec 	.word	0x200006ec
 80a3d24:	200006e8 	.word	0x200006e8
 80a3d28:	200006e4 	.word	0x200006e4
 80a3d2c:	200006e0 	.word	0x200006e0
 80a3d30:	200006dc 	.word	0x200006dc
 80a3d34:	200006d8 	.word	0x200006d8
 80a3d38:	200006d4 	.word	0x200006d4
 80a3d3c:	200006d0 	.word	0x200006d0
 80a3d40:	200006cc 	.word	0x200006cc

080a3d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3d44:	4b24      	ldr	r3, [pc, #144]	; (80a3dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3d46:	681a      	ldr	r2, [r3, #0]
 80a3d48:	07d0      	lsls	r0, r2, #31
 80a3d4a:	bf5c      	itt	pl
 80a3d4c:	2201      	movpl	r2, #1
 80a3d4e:	601a      	strpl	r2, [r3, #0]
 80a3d50:	4b22      	ldr	r3, [pc, #136]	; (80a3ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3d52:	681a      	ldr	r2, [r3, #0]
 80a3d54:	07d1      	lsls	r1, r2, #31
 80a3d56:	bf5c      	itt	pl
 80a3d58:	2201      	movpl	r2, #1
 80a3d5a:	601a      	strpl	r2, [r3, #0]
 80a3d5c:	4b20      	ldr	r3, [pc, #128]	; (80a3de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3d5e:	681a      	ldr	r2, [r3, #0]
 80a3d60:	07d2      	lsls	r2, r2, #31
 80a3d62:	bf5c      	itt	pl
 80a3d64:	2201      	movpl	r2, #1
 80a3d66:	601a      	strpl	r2, [r3, #0]
 80a3d68:	4b1e      	ldr	r3, [pc, #120]	; (80a3de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3d6a:	681a      	ldr	r2, [r3, #0]
 80a3d6c:	07d0      	lsls	r0, r2, #31
 80a3d6e:	bf5c      	itt	pl
 80a3d70:	2201      	movpl	r2, #1
 80a3d72:	601a      	strpl	r2, [r3, #0]
 80a3d74:	4b1c      	ldr	r3, [pc, #112]	; (80a3de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3d76:	681a      	ldr	r2, [r3, #0]
 80a3d78:	07d1      	lsls	r1, r2, #31
 80a3d7a:	bf5c      	itt	pl
 80a3d7c:	2201      	movpl	r2, #1
 80a3d7e:	601a      	strpl	r2, [r3, #0]
 80a3d80:	4b1a      	ldr	r3, [pc, #104]	; (80a3dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3d82:	681a      	ldr	r2, [r3, #0]
 80a3d84:	07d2      	lsls	r2, r2, #31
 80a3d86:	bf5c      	itt	pl
 80a3d88:	2201      	movpl	r2, #1
 80a3d8a:	601a      	strpl	r2, [r3, #0]
 80a3d8c:	4b18      	ldr	r3, [pc, #96]	; (80a3df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3d8e:	681a      	ldr	r2, [r3, #0]
 80a3d90:	07d0      	lsls	r0, r2, #31
 80a3d92:	bf5c      	itt	pl
 80a3d94:	2201      	movpl	r2, #1
 80a3d96:	601a      	strpl	r2, [r3, #0]
 80a3d98:	4b16      	ldr	r3, [pc, #88]	; (80a3df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3d9a:	681a      	ldr	r2, [r3, #0]
 80a3d9c:	07d1      	lsls	r1, r2, #31
 80a3d9e:	bf5c      	itt	pl
 80a3da0:	2201      	movpl	r2, #1
 80a3da2:	601a      	strpl	r2, [r3, #0]
 80a3da4:	4b14      	ldr	r3, [pc, #80]	; (80a3df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3da6:	681a      	ldr	r2, [r3, #0]
 80a3da8:	07d2      	lsls	r2, r2, #31
 80a3daa:	bf5c      	itt	pl
 80a3dac:	2201      	movpl	r2, #1
 80a3dae:	601a      	strpl	r2, [r3, #0]
 80a3db0:	4b12      	ldr	r3, [pc, #72]	; (80a3dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3db2:	681a      	ldr	r2, [r3, #0]
 80a3db4:	07d0      	lsls	r0, r2, #31
 80a3db6:	bf5c      	itt	pl
 80a3db8:	2201      	movpl	r2, #1
 80a3dba:	601a      	strpl	r2, [r3, #0]
 80a3dbc:	4b10      	ldr	r3, [pc, #64]	; (80a3e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3dbe:	681a      	ldr	r2, [r3, #0]
 80a3dc0:	07d1      	lsls	r1, r2, #31
 80a3dc2:	bf5c      	itt	pl
 80a3dc4:	2201      	movpl	r2, #1
 80a3dc6:	601a      	strpl	r2, [r3, #0]
 80a3dc8:	4b0e      	ldr	r3, [pc, #56]	; (80a3e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3dca:	681a      	ldr	r2, [r3, #0]
 80a3dcc:	07d2      	lsls	r2, r2, #31
 80a3dce:	bf5c      	itt	pl
 80a3dd0:	2201      	movpl	r2, #1
 80a3dd2:	601a      	strpl	r2, [r3, #0]
 80a3dd4:	4770      	bx	lr
 80a3dd6:	bf00      	nop
 80a3dd8:	20000728 	.word	0x20000728
 80a3ddc:	20000724 	.word	0x20000724
 80a3de0:	20000720 	.word	0x20000720
 80a3de4:	2000071c 	.word	0x2000071c
 80a3de8:	20000718 	.word	0x20000718
 80a3dec:	20000714 	.word	0x20000714
 80a3df0:	20000710 	.word	0x20000710
 80a3df4:	2000070c 	.word	0x2000070c
 80a3df8:	20000708 	.word	0x20000708
 80a3dfc:	20000704 	.word	0x20000704
 80a3e00:	20000700 	.word	0x20000700
 80a3e04:	200006fc 	.word	0x200006fc

080a3e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3e08:	4b18      	ldr	r3, [pc, #96]	; (80a3e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3e0a:	681a      	ldr	r2, [r3, #0]
 80a3e0c:	07d1      	lsls	r1, r2, #31
 80a3e0e:	bf5c      	itt	pl
 80a3e10:	2201      	movpl	r2, #1
 80a3e12:	601a      	strpl	r2, [r3, #0]
 80a3e14:	4b16      	ldr	r3, [pc, #88]	; (80a3e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3e16:	681a      	ldr	r2, [r3, #0]
 80a3e18:	07d2      	lsls	r2, r2, #31
 80a3e1a:	bf5c      	itt	pl
 80a3e1c:	2201      	movpl	r2, #1
 80a3e1e:	601a      	strpl	r2, [r3, #0]
 80a3e20:	4b14      	ldr	r3, [pc, #80]	; (80a3e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3e22:	681a      	ldr	r2, [r3, #0]
 80a3e24:	07d0      	lsls	r0, r2, #31
 80a3e26:	bf5c      	itt	pl
 80a3e28:	2201      	movpl	r2, #1
 80a3e2a:	601a      	strpl	r2, [r3, #0]
 80a3e2c:	4b12      	ldr	r3, [pc, #72]	; (80a3e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3e2e:	681a      	ldr	r2, [r3, #0]
 80a3e30:	07d1      	lsls	r1, r2, #31
 80a3e32:	bf5c      	itt	pl
 80a3e34:	2201      	movpl	r2, #1
 80a3e36:	601a      	strpl	r2, [r3, #0]
 80a3e38:	4b10      	ldr	r3, [pc, #64]	; (80a3e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3e3a:	681a      	ldr	r2, [r3, #0]
 80a3e3c:	07d2      	lsls	r2, r2, #31
 80a3e3e:	bf5c      	itt	pl
 80a3e40:	2201      	movpl	r2, #1
 80a3e42:	601a      	strpl	r2, [r3, #0]
 80a3e44:	4b0e      	ldr	r3, [pc, #56]	; (80a3e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3e46:	681a      	ldr	r2, [r3, #0]
 80a3e48:	07d0      	lsls	r0, r2, #31
 80a3e4a:	bf5c      	itt	pl
 80a3e4c:	2201      	movpl	r2, #1
 80a3e4e:	601a      	strpl	r2, [r3, #0]
 80a3e50:	4b0c      	ldr	r3, [pc, #48]	; (80a3e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3e52:	681a      	ldr	r2, [r3, #0]
 80a3e54:	07d1      	lsls	r1, r2, #31
 80a3e56:	bf5c      	itt	pl
 80a3e58:	2201      	movpl	r2, #1
 80a3e5a:	601a      	strpl	r2, [r3, #0]
 80a3e5c:	4b0a      	ldr	r3, [pc, #40]	; (80a3e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3e5e:	681a      	ldr	r2, [r3, #0]
 80a3e60:	07d2      	lsls	r2, r2, #31
 80a3e62:	bf5c      	itt	pl
 80a3e64:	2201      	movpl	r2, #1
 80a3e66:	601a      	strpl	r2, [r3, #0]
 80a3e68:	4770      	bx	lr
 80a3e6a:	bf00      	nop
 80a3e6c:	20000748 	.word	0x20000748
 80a3e70:	20000744 	.word	0x20000744
 80a3e74:	20000740 	.word	0x20000740
 80a3e78:	2000073c 	.word	0x2000073c
 80a3e7c:	20000738 	.word	0x20000738
 80a3e80:	20000734 	.word	0x20000734
 80a3e84:	20000730 	.word	0x20000730
 80a3e88:	2000072c 	.word	0x2000072c

080a3e8c <__aeabi_drsub>:
 80a3e8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3e90:	e002      	b.n	80a3e98 <__adddf3>
 80a3e92:	bf00      	nop

080a3e94 <__aeabi_dsub>:
 80a3e94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3e98 <__adddf3>:
 80a3e98:	b530      	push	{r4, r5, lr}
 80a3e9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3e9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3ea2:	ea94 0f05 	teq	r4, r5
 80a3ea6:	bf08      	it	eq
 80a3ea8:	ea90 0f02 	teqeq	r0, r2
 80a3eac:	bf1f      	itttt	ne
 80a3eae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3eb2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3eb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3eba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3ebe:	f000 80e2 	beq.w	80a4086 <__adddf3+0x1ee>
 80a3ec2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3ec6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3eca:	bfb8      	it	lt
 80a3ecc:	426d      	neglt	r5, r5
 80a3ece:	dd0c      	ble.n	80a3eea <__adddf3+0x52>
 80a3ed0:	442c      	add	r4, r5
 80a3ed2:	ea80 0202 	eor.w	r2, r0, r2
 80a3ed6:	ea81 0303 	eor.w	r3, r1, r3
 80a3eda:	ea82 0000 	eor.w	r0, r2, r0
 80a3ede:	ea83 0101 	eor.w	r1, r3, r1
 80a3ee2:	ea80 0202 	eor.w	r2, r0, r2
 80a3ee6:	ea81 0303 	eor.w	r3, r1, r3
 80a3eea:	2d36      	cmp	r5, #54	; 0x36
 80a3eec:	bf88      	it	hi
 80a3eee:	bd30      	pophi	{r4, r5, pc}
 80a3ef0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3ef4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3ef8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3efc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3f00:	d002      	beq.n	80a3f08 <__adddf3+0x70>
 80a3f02:	4240      	negs	r0, r0
 80a3f04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3f08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3f0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3f10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3f14:	d002      	beq.n	80a3f1c <__adddf3+0x84>
 80a3f16:	4252      	negs	r2, r2
 80a3f18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3f1c:	ea94 0f05 	teq	r4, r5
 80a3f20:	f000 80a7 	beq.w	80a4072 <__adddf3+0x1da>
 80a3f24:	f1a4 0401 	sub.w	r4, r4, #1
 80a3f28:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3f2c:	db0d      	blt.n	80a3f4a <__adddf3+0xb2>
 80a3f2e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3f32:	fa22 f205 	lsr.w	r2, r2, r5
 80a3f36:	1880      	adds	r0, r0, r2
 80a3f38:	f141 0100 	adc.w	r1, r1, #0
 80a3f3c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3f40:	1880      	adds	r0, r0, r2
 80a3f42:	fa43 f305 	asr.w	r3, r3, r5
 80a3f46:	4159      	adcs	r1, r3
 80a3f48:	e00e      	b.n	80a3f68 <__adddf3+0xd0>
 80a3f4a:	f1a5 0520 	sub.w	r5, r5, #32
 80a3f4e:	f10e 0e20 	add.w	lr, lr, #32
 80a3f52:	2a01      	cmp	r2, #1
 80a3f54:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3f58:	bf28      	it	cs
 80a3f5a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3f5e:	fa43 f305 	asr.w	r3, r3, r5
 80a3f62:	18c0      	adds	r0, r0, r3
 80a3f64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3f6c:	d507      	bpl.n	80a3f7e <__adddf3+0xe6>
 80a3f6e:	f04f 0e00 	mov.w	lr, #0
 80a3f72:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3f76:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3f7a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3f7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3f82:	d31b      	bcc.n	80a3fbc <__adddf3+0x124>
 80a3f84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3f88:	d30c      	bcc.n	80a3fa4 <__adddf3+0x10c>
 80a3f8a:	0849      	lsrs	r1, r1, #1
 80a3f8c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3f90:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3f94:	f104 0401 	add.w	r4, r4, #1
 80a3f98:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3f9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3fa0:	f080 809a 	bcs.w	80a40d8 <__adddf3+0x240>
 80a3fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3fa8:	bf08      	it	eq
 80a3faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3fae:	f150 0000 	adcs.w	r0, r0, #0
 80a3fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3fb6:	ea41 0105 	orr.w	r1, r1, r5
 80a3fba:	bd30      	pop	{r4, r5, pc}
 80a3fbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3fc0:	4140      	adcs	r0, r0
 80a3fc2:	eb41 0101 	adc.w	r1, r1, r1
 80a3fc6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3fca:	f1a4 0401 	sub.w	r4, r4, #1
 80a3fce:	d1e9      	bne.n	80a3fa4 <__adddf3+0x10c>
 80a3fd0:	f091 0f00 	teq	r1, #0
 80a3fd4:	bf04      	itt	eq
 80a3fd6:	4601      	moveq	r1, r0
 80a3fd8:	2000      	moveq	r0, #0
 80a3fda:	fab1 f381 	clz	r3, r1
 80a3fde:	bf08      	it	eq
 80a3fe0:	3320      	addeq	r3, #32
 80a3fe2:	f1a3 030b 	sub.w	r3, r3, #11
 80a3fe6:	f1b3 0220 	subs.w	r2, r3, #32
 80a3fea:	da0c      	bge.n	80a4006 <__adddf3+0x16e>
 80a3fec:	320c      	adds	r2, #12
 80a3fee:	dd08      	ble.n	80a4002 <__adddf3+0x16a>
 80a3ff0:	f102 0c14 	add.w	ip, r2, #20
 80a3ff4:	f1c2 020c 	rsb	r2, r2, #12
 80a3ff8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3ffc:	fa21 f102 	lsr.w	r1, r1, r2
 80a4000:	e00c      	b.n	80a401c <__adddf3+0x184>
 80a4002:	f102 0214 	add.w	r2, r2, #20
 80a4006:	bfd8      	it	le
 80a4008:	f1c2 0c20 	rsble	ip, r2, #32
 80a400c:	fa01 f102 	lsl.w	r1, r1, r2
 80a4010:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4014:	bfdc      	itt	le
 80a4016:	ea41 010c 	orrle.w	r1, r1, ip
 80a401a:	4090      	lslle	r0, r2
 80a401c:	1ae4      	subs	r4, r4, r3
 80a401e:	bfa2      	ittt	ge
 80a4020:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4024:	4329      	orrge	r1, r5
 80a4026:	bd30      	popge	{r4, r5, pc}
 80a4028:	ea6f 0404 	mvn.w	r4, r4
 80a402c:	3c1f      	subs	r4, #31
 80a402e:	da1c      	bge.n	80a406a <__adddf3+0x1d2>
 80a4030:	340c      	adds	r4, #12
 80a4032:	dc0e      	bgt.n	80a4052 <__adddf3+0x1ba>
 80a4034:	f104 0414 	add.w	r4, r4, #20
 80a4038:	f1c4 0220 	rsb	r2, r4, #32
 80a403c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4040:	fa01 f302 	lsl.w	r3, r1, r2
 80a4044:	ea40 0003 	orr.w	r0, r0, r3
 80a4048:	fa21 f304 	lsr.w	r3, r1, r4
 80a404c:	ea45 0103 	orr.w	r1, r5, r3
 80a4050:	bd30      	pop	{r4, r5, pc}
 80a4052:	f1c4 040c 	rsb	r4, r4, #12
 80a4056:	f1c4 0220 	rsb	r2, r4, #32
 80a405a:	fa20 f002 	lsr.w	r0, r0, r2
 80a405e:	fa01 f304 	lsl.w	r3, r1, r4
 80a4062:	ea40 0003 	orr.w	r0, r0, r3
 80a4066:	4629      	mov	r1, r5
 80a4068:	bd30      	pop	{r4, r5, pc}
 80a406a:	fa21 f004 	lsr.w	r0, r1, r4
 80a406e:	4629      	mov	r1, r5
 80a4070:	bd30      	pop	{r4, r5, pc}
 80a4072:	f094 0f00 	teq	r4, #0
 80a4076:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a407a:	bf06      	itte	eq
 80a407c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4080:	3401      	addeq	r4, #1
 80a4082:	3d01      	subne	r5, #1
 80a4084:	e74e      	b.n	80a3f24 <__adddf3+0x8c>
 80a4086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a408a:	bf18      	it	ne
 80a408c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4090:	d029      	beq.n	80a40e6 <__adddf3+0x24e>
 80a4092:	ea94 0f05 	teq	r4, r5
 80a4096:	bf08      	it	eq
 80a4098:	ea90 0f02 	teqeq	r0, r2
 80a409c:	d005      	beq.n	80a40aa <__adddf3+0x212>
 80a409e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a40a2:	bf04      	itt	eq
 80a40a4:	4619      	moveq	r1, r3
 80a40a6:	4610      	moveq	r0, r2
 80a40a8:	bd30      	pop	{r4, r5, pc}
 80a40aa:	ea91 0f03 	teq	r1, r3
 80a40ae:	bf1e      	ittt	ne
 80a40b0:	2100      	movne	r1, #0
 80a40b2:	2000      	movne	r0, #0
 80a40b4:	bd30      	popne	{r4, r5, pc}
 80a40b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a40ba:	d105      	bne.n	80a40c8 <__adddf3+0x230>
 80a40bc:	0040      	lsls	r0, r0, #1
 80a40be:	4149      	adcs	r1, r1
 80a40c0:	bf28      	it	cs
 80a40c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a40c6:	bd30      	pop	{r4, r5, pc}
 80a40c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a40cc:	bf3c      	itt	cc
 80a40ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a40d2:	bd30      	popcc	{r4, r5, pc}
 80a40d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a40d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a40dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a40e0:	f04f 0000 	mov.w	r0, #0
 80a40e4:	bd30      	pop	{r4, r5, pc}
 80a40e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a40ea:	bf1a      	itte	ne
 80a40ec:	4619      	movne	r1, r3
 80a40ee:	4610      	movne	r0, r2
 80a40f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a40f4:	bf1c      	itt	ne
 80a40f6:	460b      	movne	r3, r1
 80a40f8:	4602      	movne	r2, r0
 80a40fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a40fe:	bf06      	itte	eq
 80a4100:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4104:	ea91 0f03 	teqeq	r1, r3
 80a4108:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a410c:	bd30      	pop	{r4, r5, pc}
 80a410e:	bf00      	nop

080a4110 <__aeabi_ui2d>:
 80a4110:	f090 0f00 	teq	r0, #0
 80a4114:	bf04      	itt	eq
 80a4116:	2100      	moveq	r1, #0
 80a4118:	4770      	bxeq	lr
 80a411a:	b530      	push	{r4, r5, lr}
 80a411c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4120:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4124:	f04f 0500 	mov.w	r5, #0
 80a4128:	f04f 0100 	mov.w	r1, #0
 80a412c:	e750      	b.n	80a3fd0 <__adddf3+0x138>
 80a412e:	bf00      	nop

080a4130 <__aeabi_i2d>:
 80a4130:	f090 0f00 	teq	r0, #0
 80a4134:	bf04      	itt	eq
 80a4136:	2100      	moveq	r1, #0
 80a4138:	4770      	bxeq	lr
 80a413a:	b530      	push	{r4, r5, lr}
 80a413c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4140:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4144:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4148:	bf48      	it	mi
 80a414a:	4240      	negmi	r0, r0
 80a414c:	f04f 0100 	mov.w	r1, #0
 80a4150:	e73e      	b.n	80a3fd0 <__adddf3+0x138>
 80a4152:	bf00      	nop

080a4154 <__aeabi_f2d>:
 80a4154:	0042      	lsls	r2, r0, #1
 80a4156:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a415a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a415e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4162:	bf1f      	itttt	ne
 80a4164:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4168:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a416c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4170:	4770      	bxne	lr
 80a4172:	f092 0f00 	teq	r2, #0
 80a4176:	bf14      	ite	ne
 80a4178:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a417c:	4770      	bxeq	lr
 80a417e:	b530      	push	{r4, r5, lr}
 80a4180:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a418c:	e720      	b.n	80a3fd0 <__adddf3+0x138>
 80a418e:	bf00      	nop

080a4190 <__aeabi_ul2d>:
 80a4190:	ea50 0201 	orrs.w	r2, r0, r1
 80a4194:	bf08      	it	eq
 80a4196:	4770      	bxeq	lr
 80a4198:	b530      	push	{r4, r5, lr}
 80a419a:	f04f 0500 	mov.w	r5, #0
 80a419e:	e00a      	b.n	80a41b6 <__aeabi_l2d+0x16>

080a41a0 <__aeabi_l2d>:
 80a41a0:	ea50 0201 	orrs.w	r2, r0, r1
 80a41a4:	bf08      	it	eq
 80a41a6:	4770      	bxeq	lr
 80a41a8:	b530      	push	{r4, r5, lr}
 80a41aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a41ae:	d502      	bpl.n	80a41b6 <__aeabi_l2d+0x16>
 80a41b0:	4240      	negs	r0, r0
 80a41b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a41b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a41ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a41be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a41c2:	f43f aedc 	beq.w	80a3f7e <__adddf3+0xe6>
 80a41c6:	f04f 0203 	mov.w	r2, #3
 80a41ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a41ce:	bf18      	it	ne
 80a41d0:	3203      	addne	r2, #3
 80a41d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a41d6:	bf18      	it	ne
 80a41d8:	3203      	addne	r2, #3
 80a41da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a41de:	f1c2 0320 	rsb	r3, r2, #32
 80a41e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a41e6:	fa20 f002 	lsr.w	r0, r0, r2
 80a41ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80a41ee:	ea40 000e 	orr.w	r0, r0, lr
 80a41f2:	fa21 f102 	lsr.w	r1, r1, r2
 80a41f6:	4414      	add	r4, r2
 80a41f8:	e6c1      	b.n	80a3f7e <__adddf3+0xe6>
 80a41fa:	bf00      	nop

080a41fc <__aeabi_dmul>:
 80a41fc:	b570      	push	{r4, r5, r6, lr}
 80a41fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a420a:	bf1d      	ittte	ne
 80a420c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4210:	ea94 0f0c 	teqne	r4, ip
 80a4214:	ea95 0f0c 	teqne	r5, ip
 80a4218:	f000 f8de 	bleq	80a43d8 <__aeabi_dmul+0x1dc>
 80a421c:	442c      	add	r4, r5
 80a421e:	ea81 0603 	eor.w	r6, r1, r3
 80a4222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a422a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a422e:	bf18      	it	ne
 80a4230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a423c:	d038      	beq.n	80a42b0 <__aeabi_dmul+0xb4>
 80a423e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4242:	f04f 0500 	mov.w	r5, #0
 80a4246:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a424a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a424e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4252:	f04f 0600 	mov.w	r6, #0
 80a4256:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a425a:	f09c 0f00 	teq	ip, #0
 80a425e:	bf18      	it	ne
 80a4260:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4264:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a426c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4270:	d204      	bcs.n	80a427c <__aeabi_dmul+0x80>
 80a4272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4276:	416d      	adcs	r5, r5
 80a4278:	eb46 0606 	adc.w	r6, r6, r6
 80a427c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a428c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4290:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4294:	bf88      	it	hi
 80a4296:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a429a:	d81e      	bhi.n	80a42da <__aeabi_dmul+0xde>
 80a429c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a42a0:	bf08      	it	eq
 80a42a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a42a6:	f150 0000 	adcs.w	r0, r0, #0
 80a42aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a42ae:	bd70      	pop	{r4, r5, r6, pc}
 80a42b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a42b4:	ea46 0101 	orr.w	r1, r6, r1
 80a42b8:	ea40 0002 	orr.w	r0, r0, r2
 80a42bc:	ea81 0103 	eor.w	r1, r1, r3
 80a42c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a42c4:	bfc2      	ittt	gt
 80a42c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a42ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a42ce:	bd70      	popgt	{r4, r5, r6, pc}
 80a42d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a42d4:	f04f 0e00 	mov.w	lr, #0
 80a42d8:	3c01      	subs	r4, #1
 80a42da:	f300 80ab 	bgt.w	80a4434 <__aeabi_dmul+0x238>
 80a42de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a42e2:	bfde      	ittt	le
 80a42e4:	2000      	movle	r0, #0
 80a42e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a42ea:	bd70      	pople	{r4, r5, r6, pc}
 80a42ec:	f1c4 0400 	rsb	r4, r4, #0
 80a42f0:	3c20      	subs	r4, #32
 80a42f2:	da35      	bge.n	80a4360 <__aeabi_dmul+0x164>
 80a42f4:	340c      	adds	r4, #12
 80a42f6:	dc1b      	bgt.n	80a4330 <__aeabi_dmul+0x134>
 80a42f8:	f104 0414 	add.w	r4, r4, #20
 80a42fc:	f1c4 0520 	rsb	r5, r4, #32
 80a4300:	fa00 f305 	lsl.w	r3, r0, r5
 80a4304:	fa20 f004 	lsr.w	r0, r0, r4
 80a4308:	fa01 f205 	lsl.w	r2, r1, r5
 80a430c:	ea40 0002 	orr.w	r0, r0, r2
 80a4310:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a431c:	fa21 f604 	lsr.w	r6, r1, r4
 80a4320:	eb42 0106 	adc.w	r1, r2, r6
 80a4324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4328:	bf08      	it	eq
 80a432a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a432e:	bd70      	pop	{r4, r5, r6, pc}
 80a4330:	f1c4 040c 	rsb	r4, r4, #12
 80a4334:	f1c4 0520 	rsb	r5, r4, #32
 80a4338:	fa00 f304 	lsl.w	r3, r0, r4
 80a433c:	fa20 f005 	lsr.w	r0, r0, r5
 80a4340:	fa01 f204 	lsl.w	r2, r1, r4
 80a4344:	ea40 0002 	orr.w	r0, r0, r2
 80a4348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a434c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4350:	f141 0100 	adc.w	r1, r1, #0
 80a4354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4358:	bf08      	it	eq
 80a435a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a435e:	bd70      	pop	{r4, r5, r6, pc}
 80a4360:	f1c4 0520 	rsb	r5, r4, #32
 80a4364:	fa00 f205 	lsl.w	r2, r0, r5
 80a4368:	ea4e 0e02 	orr.w	lr, lr, r2
 80a436c:	fa20 f304 	lsr.w	r3, r0, r4
 80a4370:	fa01 f205 	lsl.w	r2, r1, r5
 80a4374:	ea43 0302 	orr.w	r3, r3, r2
 80a4378:	fa21 f004 	lsr.w	r0, r1, r4
 80a437c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4380:	fa21 f204 	lsr.w	r2, r1, r4
 80a4384:	ea20 0002 	bic.w	r0, r0, r2
 80a4388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a438c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4390:	bf08      	it	eq
 80a4392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4396:	bd70      	pop	{r4, r5, r6, pc}
 80a4398:	f094 0f00 	teq	r4, #0
 80a439c:	d10f      	bne.n	80a43be <__aeabi_dmul+0x1c2>
 80a439e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a43a2:	0040      	lsls	r0, r0, #1
 80a43a4:	eb41 0101 	adc.w	r1, r1, r1
 80a43a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a43ac:	bf08      	it	eq
 80a43ae:	3c01      	subeq	r4, #1
 80a43b0:	d0f7      	beq.n	80a43a2 <__aeabi_dmul+0x1a6>
 80a43b2:	ea41 0106 	orr.w	r1, r1, r6
 80a43b6:	f095 0f00 	teq	r5, #0
 80a43ba:	bf18      	it	ne
 80a43bc:	4770      	bxne	lr
 80a43be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a43c2:	0052      	lsls	r2, r2, #1
 80a43c4:	eb43 0303 	adc.w	r3, r3, r3
 80a43c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a43cc:	bf08      	it	eq
 80a43ce:	3d01      	subeq	r5, #1
 80a43d0:	d0f7      	beq.n	80a43c2 <__aeabi_dmul+0x1c6>
 80a43d2:	ea43 0306 	orr.w	r3, r3, r6
 80a43d6:	4770      	bx	lr
 80a43d8:	ea94 0f0c 	teq	r4, ip
 80a43dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a43e0:	bf18      	it	ne
 80a43e2:	ea95 0f0c 	teqne	r5, ip
 80a43e6:	d00c      	beq.n	80a4402 <__aeabi_dmul+0x206>
 80a43e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a43ec:	bf18      	it	ne
 80a43ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a43f2:	d1d1      	bne.n	80a4398 <__aeabi_dmul+0x19c>
 80a43f4:	ea81 0103 	eor.w	r1, r1, r3
 80a43f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a43fc:	f04f 0000 	mov.w	r0, #0
 80a4400:	bd70      	pop	{r4, r5, r6, pc}
 80a4402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4406:	bf06      	itte	eq
 80a4408:	4610      	moveq	r0, r2
 80a440a:	4619      	moveq	r1, r3
 80a440c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4410:	d019      	beq.n	80a4446 <__aeabi_dmul+0x24a>
 80a4412:	ea94 0f0c 	teq	r4, ip
 80a4416:	d102      	bne.n	80a441e <__aeabi_dmul+0x222>
 80a4418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a441c:	d113      	bne.n	80a4446 <__aeabi_dmul+0x24a>
 80a441e:	ea95 0f0c 	teq	r5, ip
 80a4422:	d105      	bne.n	80a4430 <__aeabi_dmul+0x234>
 80a4424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4428:	bf1c      	itt	ne
 80a442a:	4610      	movne	r0, r2
 80a442c:	4619      	movne	r1, r3
 80a442e:	d10a      	bne.n	80a4446 <__aeabi_dmul+0x24a>
 80a4430:	ea81 0103 	eor.w	r1, r1, r3
 80a4434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4438:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a443c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4440:	f04f 0000 	mov.w	r0, #0
 80a4444:	bd70      	pop	{r4, r5, r6, pc}
 80a4446:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a444a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a444e:	bd70      	pop	{r4, r5, r6, pc}

080a4450 <__aeabi_ddiv>:
 80a4450:	b570      	push	{r4, r5, r6, lr}
 80a4452:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a445a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a445e:	bf1d      	ittte	ne
 80a4460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4464:	ea94 0f0c 	teqne	r4, ip
 80a4468:	ea95 0f0c 	teqne	r5, ip
 80a446c:	f000 f8a7 	bleq	80a45be <__aeabi_ddiv+0x16e>
 80a4470:	eba4 0405 	sub.w	r4, r4, r5
 80a4474:	ea81 0e03 	eor.w	lr, r1, r3
 80a4478:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a447c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4480:	f000 8088 	beq.w	80a4594 <__aeabi_ddiv+0x144>
 80a4484:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4488:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a448c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4490:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4494:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4498:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a449c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a44a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a44a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a44a8:	429d      	cmp	r5, r3
 80a44aa:	bf08      	it	eq
 80a44ac:	4296      	cmpeq	r6, r2
 80a44ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a44b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a44b6:	d202      	bcs.n	80a44be <__aeabi_ddiv+0x6e>
 80a44b8:	085b      	lsrs	r3, r3, #1
 80a44ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a44be:	1ab6      	subs	r6, r6, r2
 80a44c0:	eb65 0503 	sbc.w	r5, r5, r3
 80a44c4:	085b      	lsrs	r3, r3, #1
 80a44c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a44ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a44ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a44d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a44d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a44da:	bf22      	ittt	cs
 80a44dc:	1ab6      	subcs	r6, r6, r2
 80a44de:	4675      	movcs	r5, lr
 80a44e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a44e4:	085b      	lsrs	r3, r3, #1
 80a44e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a44ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a44ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a44f2:	bf22      	ittt	cs
 80a44f4:	1ab6      	subcs	r6, r6, r2
 80a44f6:	4675      	movcs	r5, lr
 80a44f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a44fc:	085b      	lsrs	r3, r3, #1
 80a44fe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4502:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4506:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a450a:	bf22      	ittt	cs
 80a450c:	1ab6      	subcs	r6, r6, r2
 80a450e:	4675      	movcs	r5, lr
 80a4510:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4514:	085b      	lsrs	r3, r3, #1
 80a4516:	ea4f 0232 	mov.w	r2, r2, rrx
 80a451a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a451e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4522:	bf22      	ittt	cs
 80a4524:	1ab6      	subcs	r6, r6, r2
 80a4526:	4675      	movcs	r5, lr
 80a4528:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a452c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4530:	d018      	beq.n	80a4564 <__aeabi_ddiv+0x114>
 80a4532:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4536:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a453a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a453e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4542:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4546:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a454a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a454e:	d1c0      	bne.n	80a44d2 <__aeabi_ddiv+0x82>
 80a4550:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4554:	d10b      	bne.n	80a456e <__aeabi_ddiv+0x11e>
 80a4556:	ea41 0100 	orr.w	r1, r1, r0
 80a455a:	f04f 0000 	mov.w	r0, #0
 80a455e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4562:	e7b6      	b.n	80a44d2 <__aeabi_ddiv+0x82>
 80a4564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4568:	bf04      	itt	eq
 80a456a:	4301      	orreq	r1, r0
 80a456c:	2000      	moveq	r0, #0
 80a456e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4572:	bf88      	it	hi
 80a4574:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4578:	f63f aeaf 	bhi.w	80a42da <__aeabi_dmul+0xde>
 80a457c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4580:	bf04      	itt	eq
 80a4582:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a458a:	f150 0000 	adcs.w	r0, r0, #0
 80a458e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4592:	bd70      	pop	{r4, r5, r6, pc}
 80a4594:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4598:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a459c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a45a0:	bfc2      	ittt	gt
 80a45a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a45a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a45aa:	bd70      	popgt	{r4, r5, r6, pc}
 80a45ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a45b0:	f04f 0e00 	mov.w	lr, #0
 80a45b4:	3c01      	subs	r4, #1
 80a45b6:	e690      	b.n	80a42da <__aeabi_dmul+0xde>
 80a45b8:	ea45 0e06 	orr.w	lr, r5, r6
 80a45bc:	e68d      	b.n	80a42da <__aeabi_dmul+0xde>
 80a45be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a45c2:	ea94 0f0c 	teq	r4, ip
 80a45c6:	bf08      	it	eq
 80a45c8:	ea95 0f0c 	teqeq	r5, ip
 80a45cc:	f43f af3b 	beq.w	80a4446 <__aeabi_dmul+0x24a>
 80a45d0:	ea94 0f0c 	teq	r4, ip
 80a45d4:	d10a      	bne.n	80a45ec <__aeabi_ddiv+0x19c>
 80a45d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a45da:	f47f af34 	bne.w	80a4446 <__aeabi_dmul+0x24a>
 80a45de:	ea95 0f0c 	teq	r5, ip
 80a45e2:	f47f af25 	bne.w	80a4430 <__aeabi_dmul+0x234>
 80a45e6:	4610      	mov	r0, r2
 80a45e8:	4619      	mov	r1, r3
 80a45ea:	e72c      	b.n	80a4446 <__aeabi_dmul+0x24a>
 80a45ec:	ea95 0f0c 	teq	r5, ip
 80a45f0:	d106      	bne.n	80a4600 <__aeabi_ddiv+0x1b0>
 80a45f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a45f6:	f43f aefd 	beq.w	80a43f4 <__aeabi_dmul+0x1f8>
 80a45fa:	4610      	mov	r0, r2
 80a45fc:	4619      	mov	r1, r3
 80a45fe:	e722      	b.n	80a4446 <__aeabi_dmul+0x24a>
 80a4600:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4604:	bf18      	it	ne
 80a4606:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a460a:	f47f aec5 	bne.w	80a4398 <__aeabi_dmul+0x19c>
 80a460e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4612:	f47f af0d 	bne.w	80a4430 <__aeabi_dmul+0x234>
 80a4616:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a461a:	f47f aeeb 	bne.w	80a43f4 <__aeabi_dmul+0x1f8>
 80a461e:	e712      	b.n	80a4446 <__aeabi_dmul+0x24a>

080a4620 <__gedf2>:
 80a4620:	f04f 3cff 	mov.w	ip, #4294967295
 80a4624:	e006      	b.n	80a4634 <__cmpdf2+0x4>
 80a4626:	bf00      	nop

080a4628 <__ledf2>:
 80a4628:	f04f 0c01 	mov.w	ip, #1
 80a462c:	e002      	b.n	80a4634 <__cmpdf2+0x4>
 80a462e:	bf00      	nop

080a4630 <__cmpdf2>:
 80a4630:	f04f 0c01 	mov.w	ip, #1
 80a4634:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4638:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a463c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4640:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4644:	bf18      	it	ne
 80a4646:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a464a:	d01b      	beq.n	80a4684 <__cmpdf2+0x54>
 80a464c:	b001      	add	sp, #4
 80a464e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4652:	bf0c      	ite	eq
 80a4654:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4658:	ea91 0f03 	teqne	r1, r3
 80a465c:	bf02      	ittt	eq
 80a465e:	ea90 0f02 	teqeq	r0, r2
 80a4662:	2000      	moveq	r0, #0
 80a4664:	4770      	bxeq	lr
 80a4666:	f110 0f00 	cmn.w	r0, #0
 80a466a:	ea91 0f03 	teq	r1, r3
 80a466e:	bf58      	it	pl
 80a4670:	4299      	cmppl	r1, r3
 80a4672:	bf08      	it	eq
 80a4674:	4290      	cmpeq	r0, r2
 80a4676:	bf2c      	ite	cs
 80a4678:	17d8      	asrcs	r0, r3, #31
 80a467a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a467e:	f040 0001 	orr.w	r0, r0, #1
 80a4682:	4770      	bx	lr
 80a4684:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a468c:	d102      	bne.n	80a4694 <__cmpdf2+0x64>
 80a468e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4692:	d107      	bne.n	80a46a4 <__cmpdf2+0x74>
 80a4694:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a469c:	d1d6      	bne.n	80a464c <__cmpdf2+0x1c>
 80a469e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a46a2:	d0d3      	beq.n	80a464c <__cmpdf2+0x1c>
 80a46a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a46a8:	4770      	bx	lr
 80a46aa:	bf00      	nop

080a46ac <__aeabi_cdrcmple>:
 80a46ac:	4684      	mov	ip, r0
 80a46ae:	4610      	mov	r0, r2
 80a46b0:	4662      	mov	r2, ip
 80a46b2:	468c      	mov	ip, r1
 80a46b4:	4619      	mov	r1, r3
 80a46b6:	4663      	mov	r3, ip
 80a46b8:	e000      	b.n	80a46bc <__aeabi_cdcmpeq>
 80a46ba:	bf00      	nop

080a46bc <__aeabi_cdcmpeq>:
 80a46bc:	b501      	push	{r0, lr}
 80a46be:	f7ff ffb7 	bl	80a4630 <__cmpdf2>
 80a46c2:	2800      	cmp	r0, #0
 80a46c4:	bf48      	it	mi
 80a46c6:	f110 0f00 	cmnmi.w	r0, #0
 80a46ca:	bd01      	pop	{r0, pc}

080a46cc <__aeabi_dcmpeq>:
 80a46cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a46d0:	f7ff fff4 	bl	80a46bc <__aeabi_cdcmpeq>
 80a46d4:	bf0c      	ite	eq
 80a46d6:	2001      	moveq	r0, #1
 80a46d8:	2000      	movne	r0, #0
 80a46da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a46de:	bf00      	nop

080a46e0 <__aeabi_dcmplt>:
 80a46e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a46e4:	f7ff ffea 	bl	80a46bc <__aeabi_cdcmpeq>
 80a46e8:	bf34      	ite	cc
 80a46ea:	2001      	movcc	r0, #1
 80a46ec:	2000      	movcs	r0, #0
 80a46ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a46f2:	bf00      	nop

080a46f4 <__aeabi_dcmple>:
 80a46f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a46f8:	f7ff ffe0 	bl	80a46bc <__aeabi_cdcmpeq>
 80a46fc:	bf94      	ite	ls
 80a46fe:	2001      	movls	r0, #1
 80a4700:	2000      	movhi	r0, #0
 80a4702:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4706:	bf00      	nop

080a4708 <__aeabi_dcmpge>:
 80a4708:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a470c:	f7ff ffce 	bl	80a46ac <__aeabi_cdrcmple>
 80a4710:	bf94      	ite	ls
 80a4712:	2001      	movls	r0, #1
 80a4714:	2000      	movhi	r0, #0
 80a4716:	f85d fb08 	ldr.w	pc, [sp], #8
 80a471a:	bf00      	nop

080a471c <__aeabi_dcmpgt>:
 80a471c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4720:	f7ff ffc4 	bl	80a46ac <__aeabi_cdrcmple>
 80a4724:	bf34      	ite	cc
 80a4726:	2001      	movcc	r0, #1
 80a4728:	2000      	movcs	r0, #0
 80a472a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a472e:	bf00      	nop

080a4730 <__aeabi_dcmpun>:
 80a4730:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4734:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4738:	d102      	bne.n	80a4740 <__aeabi_dcmpun+0x10>
 80a473a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a473e:	d10a      	bne.n	80a4756 <__aeabi_dcmpun+0x26>
 80a4740:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4744:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4748:	d102      	bne.n	80a4750 <__aeabi_dcmpun+0x20>
 80a474a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a474e:	d102      	bne.n	80a4756 <__aeabi_dcmpun+0x26>
 80a4750:	f04f 0000 	mov.w	r0, #0
 80a4754:	4770      	bx	lr
 80a4756:	f04f 0001 	mov.w	r0, #1
 80a475a:	4770      	bx	lr

080a475c <__aeabi_d2iz>:
 80a475c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4760:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4764:	d215      	bcs.n	80a4792 <__aeabi_d2iz+0x36>
 80a4766:	d511      	bpl.n	80a478c <__aeabi_d2iz+0x30>
 80a4768:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a476c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4770:	d912      	bls.n	80a4798 <__aeabi_d2iz+0x3c>
 80a4772:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a477a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a477e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4782:	fa23 f002 	lsr.w	r0, r3, r2
 80a4786:	bf18      	it	ne
 80a4788:	4240      	negne	r0, r0
 80a478a:	4770      	bx	lr
 80a478c:	f04f 0000 	mov.w	r0, #0
 80a4790:	4770      	bx	lr
 80a4792:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4796:	d105      	bne.n	80a47a4 <__aeabi_d2iz+0x48>
 80a4798:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a479c:	bf08      	it	eq
 80a479e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a47a2:	4770      	bx	lr
 80a47a4:	f04f 0000 	mov.w	r0, #0
 80a47a8:	4770      	bx	lr
 80a47aa:	bf00      	nop

080a47ac <__aeabi_d2uiz>:
 80a47ac:	004a      	lsls	r2, r1, #1
 80a47ae:	d211      	bcs.n	80a47d4 <__aeabi_d2uiz+0x28>
 80a47b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a47b4:	d211      	bcs.n	80a47da <__aeabi_d2uiz+0x2e>
 80a47b6:	d50d      	bpl.n	80a47d4 <__aeabi_d2uiz+0x28>
 80a47b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a47bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a47c0:	d40e      	bmi.n	80a47e0 <__aeabi_d2uiz+0x34>
 80a47c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a47c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a47ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a47ce:	fa23 f002 	lsr.w	r0, r3, r2
 80a47d2:	4770      	bx	lr
 80a47d4:	f04f 0000 	mov.w	r0, #0
 80a47d8:	4770      	bx	lr
 80a47da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a47de:	d102      	bne.n	80a47e6 <__aeabi_d2uiz+0x3a>
 80a47e0:	f04f 30ff 	mov.w	r0, #4294967295
 80a47e4:	4770      	bx	lr
 80a47e6:	f04f 0000 	mov.w	r0, #0
 80a47ea:	4770      	bx	lr

080a47ec <__aeabi_d2f>:
 80a47ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a47f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a47f4:	bf24      	itt	cs
 80a47f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a47fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a47fe:	d90d      	bls.n	80a481c <__aeabi_d2f+0x30>
 80a4800:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4804:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4808:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a480c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4810:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4814:	bf08      	it	eq
 80a4816:	f020 0001 	biceq.w	r0, r0, #1
 80a481a:	4770      	bx	lr
 80a481c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4820:	d121      	bne.n	80a4866 <__aeabi_d2f+0x7a>
 80a4822:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4826:	bfbc      	itt	lt
 80a4828:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a482c:	4770      	bxlt	lr
 80a482e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4832:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4836:	f1c2 0218 	rsb	r2, r2, #24
 80a483a:	f1c2 0c20 	rsb	ip, r2, #32
 80a483e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4842:	fa20 f002 	lsr.w	r0, r0, r2
 80a4846:	bf18      	it	ne
 80a4848:	f040 0001 	orrne.w	r0, r0, #1
 80a484c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4850:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4854:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4858:	ea40 000c 	orr.w	r0, r0, ip
 80a485c:	fa23 f302 	lsr.w	r3, r3, r2
 80a4860:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4864:	e7cc      	b.n	80a4800 <__aeabi_d2f+0x14>
 80a4866:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a486a:	d107      	bne.n	80a487c <__aeabi_d2f+0x90>
 80a486c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4870:	bf1e      	ittt	ne
 80a4872:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4876:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a487a:	4770      	bxne	lr
 80a487c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4880:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4884:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4888:	4770      	bx	lr
 80a488a:	bf00      	nop

080a488c <__aeabi_frsub>:
 80a488c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4890:	e002      	b.n	80a4898 <__addsf3>
 80a4892:	bf00      	nop

080a4894 <__aeabi_fsub>:
 80a4894:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4898 <__addsf3>:
 80a4898:	0042      	lsls	r2, r0, #1
 80a489a:	bf1f      	itttt	ne
 80a489c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a48a0:	ea92 0f03 	teqne	r2, r3
 80a48a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a48a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a48ac:	d06a      	beq.n	80a4984 <__addsf3+0xec>
 80a48ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a48b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a48b6:	bfc1      	itttt	gt
 80a48b8:	18d2      	addgt	r2, r2, r3
 80a48ba:	4041      	eorgt	r1, r0
 80a48bc:	4048      	eorgt	r0, r1
 80a48be:	4041      	eorgt	r1, r0
 80a48c0:	bfb8      	it	lt
 80a48c2:	425b      	neglt	r3, r3
 80a48c4:	2b19      	cmp	r3, #25
 80a48c6:	bf88      	it	hi
 80a48c8:	4770      	bxhi	lr
 80a48ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a48ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a48d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a48d6:	bf18      	it	ne
 80a48d8:	4240      	negne	r0, r0
 80a48da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a48de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a48e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a48e6:	bf18      	it	ne
 80a48e8:	4249      	negne	r1, r1
 80a48ea:	ea92 0f03 	teq	r2, r3
 80a48ee:	d03f      	beq.n	80a4970 <__addsf3+0xd8>
 80a48f0:	f1a2 0201 	sub.w	r2, r2, #1
 80a48f4:	fa41 fc03 	asr.w	ip, r1, r3
 80a48f8:	eb10 000c 	adds.w	r0, r0, ip
 80a48fc:	f1c3 0320 	rsb	r3, r3, #32
 80a4900:	fa01 f103 	lsl.w	r1, r1, r3
 80a4904:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4908:	d502      	bpl.n	80a4910 <__addsf3+0x78>
 80a490a:	4249      	negs	r1, r1
 80a490c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4910:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4914:	d313      	bcc.n	80a493e <__addsf3+0xa6>
 80a4916:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a491a:	d306      	bcc.n	80a492a <__addsf3+0x92>
 80a491c:	0840      	lsrs	r0, r0, #1
 80a491e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4922:	f102 0201 	add.w	r2, r2, #1
 80a4926:	2afe      	cmp	r2, #254	; 0xfe
 80a4928:	d251      	bcs.n	80a49ce <__addsf3+0x136>
 80a492a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a492e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4932:	bf08      	it	eq
 80a4934:	f020 0001 	biceq.w	r0, r0, #1
 80a4938:	ea40 0003 	orr.w	r0, r0, r3
 80a493c:	4770      	bx	lr
 80a493e:	0049      	lsls	r1, r1, #1
 80a4940:	eb40 0000 	adc.w	r0, r0, r0
 80a4944:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4948:	f1a2 0201 	sub.w	r2, r2, #1
 80a494c:	d1ed      	bne.n	80a492a <__addsf3+0x92>
 80a494e:	fab0 fc80 	clz	ip, r0
 80a4952:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4956:	ebb2 020c 	subs.w	r2, r2, ip
 80a495a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a495e:	bfaa      	itet	ge
 80a4960:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4964:	4252      	neglt	r2, r2
 80a4966:	4318      	orrge	r0, r3
 80a4968:	bfbc      	itt	lt
 80a496a:	40d0      	lsrlt	r0, r2
 80a496c:	4318      	orrlt	r0, r3
 80a496e:	4770      	bx	lr
 80a4970:	f092 0f00 	teq	r2, #0
 80a4974:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4978:	bf06      	itte	eq
 80a497a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a497e:	3201      	addeq	r2, #1
 80a4980:	3b01      	subne	r3, #1
 80a4982:	e7b5      	b.n	80a48f0 <__addsf3+0x58>
 80a4984:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4988:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a498c:	bf18      	it	ne
 80a498e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4992:	d021      	beq.n	80a49d8 <__addsf3+0x140>
 80a4994:	ea92 0f03 	teq	r2, r3
 80a4998:	d004      	beq.n	80a49a4 <__addsf3+0x10c>
 80a499a:	f092 0f00 	teq	r2, #0
 80a499e:	bf08      	it	eq
 80a49a0:	4608      	moveq	r0, r1
 80a49a2:	4770      	bx	lr
 80a49a4:	ea90 0f01 	teq	r0, r1
 80a49a8:	bf1c      	itt	ne
 80a49aa:	2000      	movne	r0, #0
 80a49ac:	4770      	bxne	lr
 80a49ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a49b2:	d104      	bne.n	80a49be <__addsf3+0x126>
 80a49b4:	0040      	lsls	r0, r0, #1
 80a49b6:	bf28      	it	cs
 80a49b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a49bc:	4770      	bx	lr
 80a49be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a49c2:	bf3c      	itt	cc
 80a49c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a49c8:	4770      	bxcc	lr
 80a49ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a49ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a49d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a49d6:	4770      	bx	lr
 80a49d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a49dc:	bf16      	itet	ne
 80a49de:	4608      	movne	r0, r1
 80a49e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a49e4:	4601      	movne	r1, r0
 80a49e6:	0242      	lsls	r2, r0, #9
 80a49e8:	bf06      	itte	eq
 80a49ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a49ee:	ea90 0f01 	teqeq	r0, r1
 80a49f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a49f6:	4770      	bx	lr

080a49f8 <__aeabi_ui2f>:
 80a49f8:	f04f 0300 	mov.w	r3, #0
 80a49fc:	e004      	b.n	80a4a08 <__aeabi_i2f+0x8>
 80a49fe:	bf00      	nop

080a4a00 <__aeabi_i2f>:
 80a4a00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4a04:	bf48      	it	mi
 80a4a06:	4240      	negmi	r0, r0
 80a4a08:	ea5f 0c00 	movs.w	ip, r0
 80a4a0c:	bf08      	it	eq
 80a4a0e:	4770      	bxeq	lr
 80a4a10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4a14:	4601      	mov	r1, r0
 80a4a16:	f04f 0000 	mov.w	r0, #0
 80a4a1a:	e01c      	b.n	80a4a56 <__aeabi_l2f+0x2a>

080a4a1c <__aeabi_ul2f>:
 80a4a1c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4a20:	bf08      	it	eq
 80a4a22:	4770      	bxeq	lr
 80a4a24:	f04f 0300 	mov.w	r3, #0
 80a4a28:	e00a      	b.n	80a4a40 <__aeabi_l2f+0x14>
 80a4a2a:	bf00      	nop

080a4a2c <__aeabi_l2f>:
 80a4a2c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4a30:	bf08      	it	eq
 80a4a32:	4770      	bxeq	lr
 80a4a34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4a38:	d502      	bpl.n	80a4a40 <__aeabi_l2f+0x14>
 80a4a3a:	4240      	negs	r0, r0
 80a4a3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4a40:	ea5f 0c01 	movs.w	ip, r1
 80a4a44:	bf02      	ittt	eq
 80a4a46:	4684      	moveq	ip, r0
 80a4a48:	4601      	moveq	r1, r0
 80a4a4a:	2000      	moveq	r0, #0
 80a4a4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4a50:	bf08      	it	eq
 80a4a52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4a56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4a5a:	fabc f28c 	clz	r2, ip
 80a4a5e:	3a08      	subs	r2, #8
 80a4a60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4a64:	db10      	blt.n	80a4a88 <__aeabi_l2f+0x5c>
 80a4a66:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4a6a:	4463      	add	r3, ip
 80a4a6c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4a70:	f1c2 0220 	rsb	r2, r2, #32
 80a4a74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4a78:	fa20 f202 	lsr.w	r2, r0, r2
 80a4a7c:	eb43 0002 	adc.w	r0, r3, r2
 80a4a80:	bf08      	it	eq
 80a4a82:	f020 0001 	biceq.w	r0, r0, #1
 80a4a86:	4770      	bx	lr
 80a4a88:	f102 0220 	add.w	r2, r2, #32
 80a4a8c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4a90:	f1c2 0220 	rsb	r2, r2, #32
 80a4a94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4a98:	fa21 f202 	lsr.w	r2, r1, r2
 80a4a9c:	eb43 0002 	adc.w	r0, r3, r2
 80a4aa0:	bf08      	it	eq
 80a4aa2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4aa6:	4770      	bx	lr

080a4aa8 <__cxa_atexit>:
 80a4aa8:	b510      	push	{r4, lr}
 80a4aaa:	4c05      	ldr	r4, [pc, #20]	; (80a4ac0 <__cxa_atexit+0x18>)
 80a4aac:	4613      	mov	r3, r2
 80a4aae:	b12c      	cbz	r4, 80a4abc <__cxa_atexit+0x14>
 80a4ab0:	460a      	mov	r2, r1
 80a4ab2:	4601      	mov	r1, r0
 80a4ab4:	2002      	movs	r0, #2
 80a4ab6:	f3af 8000 	nop.w
 80a4aba:	bd10      	pop	{r4, pc}
 80a4abc:	4620      	mov	r0, r4
 80a4abe:	bd10      	pop	{r4, pc}
 80a4ac0:	00000000 	.word	0x00000000

080a4ac4 <memcpy>:
 80a4ac4:	b510      	push	{r4, lr}
 80a4ac6:	1e43      	subs	r3, r0, #1
 80a4ac8:	440a      	add	r2, r1
 80a4aca:	4291      	cmp	r1, r2
 80a4acc:	d004      	beq.n	80a4ad8 <memcpy+0x14>
 80a4ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4ad6:	e7f8      	b.n	80a4aca <memcpy+0x6>
 80a4ad8:	bd10      	pop	{r4, pc}

080a4ada <memset>:
 80a4ada:	4603      	mov	r3, r0
 80a4adc:	4402      	add	r2, r0
 80a4ade:	4293      	cmp	r3, r2
 80a4ae0:	d002      	beq.n	80a4ae8 <memset+0xe>
 80a4ae2:	f803 1b01 	strb.w	r1, [r3], #1
 80a4ae6:	e7fa      	b.n	80a4ade <memset+0x4>
 80a4ae8:	4770      	bx	lr
	...

080a4aec <srand>:
 80a4aec:	b538      	push	{r3, r4, r5, lr}
 80a4aee:	4b12      	ldr	r3, [pc, #72]	; (80a4b38 <srand+0x4c>)
 80a4af0:	4605      	mov	r5, r0
 80a4af2:	681c      	ldr	r4, [r3, #0]
 80a4af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4af6:	b9d3      	cbnz	r3, 80a4b2e <srand+0x42>
 80a4af8:	2018      	movs	r0, #24
 80a4afa:	f7fd fdd7 	bl	80a26ac <malloc>
 80a4afe:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4b02:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4b04:	8003      	strh	r3, [r0, #0]
 80a4b06:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4b0a:	8043      	strh	r3, [r0, #2]
 80a4b0c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4b10:	8083      	strh	r3, [r0, #4]
 80a4b12:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4b16:	80c3      	strh	r3, [r0, #6]
 80a4b18:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4b1c:	8103      	strh	r3, [r0, #8]
 80a4b1e:	2305      	movs	r3, #5
 80a4b20:	8143      	strh	r3, [r0, #10]
 80a4b22:	230b      	movs	r3, #11
 80a4b24:	8183      	strh	r3, [r0, #12]
 80a4b26:	2201      	movs	r2, #1
 80a4b28:	2300      	movs	r3, #0
 80a4b2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4b2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4b30:	2200      	movs	r2, #0
 80a4b32:	611d      	str	r5, [r3, #16]
 80a4b34:	615a      	str	r2, [r3, #20]
 80a4b36:	bd38      	pop	{r3, r4, r5, pc}
 80a4b38:	20000078 	.word	0x20000078

080a4b3c <strdup>:
 80a4b3c:	4b02      	ldr	r3, [pc, #8]	; (80a4b48 <strdup+0xc>)
 80a4b3e:	4601      	mov	r1, r0
 80a4b40:	6818      	ldr	r0, [r3, #0]
 80a4b42:	f000 b803 	b.w	80a4b4c <_strdup_r>
 80a4b46:	bf00      	nop
 80a4b48:	20000078 	.word	0x20000078

080a4b4c <_strdup_r>:
 80a4b4c:	b570      	push	{r4, r5, r6, lr}
 80a4b4e:	4606      	mov	r6, r0
 80a4b50:	4608      	mov	r0, r1
 80a4b52:	460c      	mov	r4, r1
 80a4b54:	f000 f80d 	bl	80a4b72 <strlen>
 80a4b58:	1c45      	adds	r5, r0, #1
 80a4b5a:	4629      	mov	r1, r5
 80a4b5c:	4630      	mov	r0, r6
 80a4b5e:	f7fd fdc5 	bl	80a26ec <_malloc_r>
 80a4b62:	4606      	mov	r6, r0
 80a4b64:	b118      	cbz	r0, 80a4b6e <_strdup_r+0x22>
 80a4b66:	462a      	mov	r2, r5
 80a4b68:	4621      	mov	r1, r4
 80a4b6a:	f7ff ffab 	bl	80a4ac4 <memcpy>
 80a4b6e:	4630      	mov	r0, r6
 80a4b70:	bd70      	pop	{r4, r5, r6, pc}

080a4b72 <strlen>:
 80a4b72:	4603      	mov	r3, r0
 80a4b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4b78:	2a00      	cmp	r2, #0
 80a4b7a:	d1fb      	bne.n	80a4b74 <strlen+0x2>
 80a4b7c:	1a18      	subs	r0, r3, r0
 80a4b7e:	3801      	subs	r0, #1
 80a4b80:	4770      	bx	lr

080a4b82 <link_code_end>:
	...

080a4b84 <dynalib_user>:
 80a4b84:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a4b94:	0000 0000 01ff 0086 0000 0000 5479 6d65     ............yTem
 80a4ba4:	6570 6172 7574 6572 3a20 0020 4320 4300     perature : . C.C
 80a4bb4:	324f 3a20 0020 7070 006d 6574 706d 6800     O2 : .ppm.temp.h
 80a4bc4:	6d75 6469 7469 0079 4f43 0032 7270 7365     umidity.CO2.pres
 80a4bd4:	6e65 6563 4800 6d75 6469 7469 2065 203a     ence.Humidite : 
 80a4be4:	6400 7461 4561 7272 726f 6e00 7765 7453     .dataError.newSt
 80a4bf4:	7461 0065 6572 0064 6c62 6575 6c00 6769     ate.red.blue.lig
 80a4c04:	7468 6c42 6575 6700 6572 6e65 4d00 746f     htBlue.green.Mot
 80a4c14:	6f69 2d6e 6544 6574 7463 6f69 006e 6261     ion-Detection.ab
 80a4c24:	6573 636e 0065 6564 6166 6c75 2074 4d00     sence.default .M
 80a4c34:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
 80a4c44:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
 80a4c54:	5349 7465 6974 676e 2073 7325 6c25 2075     ISettings %s%lu 
 80a4c64:	7325 4d20 444f 2545 3e64 0000               %s MODE%d>..

080a4c70 <_ZTV12Adafruit_GFX>:
	...
 80a4c80:	1269 080a 28c1 080a 00a9 080a 0b05 080a     i....(..........
 80a4c90:	0abd 080a 0aed 080a 0ac9 080a 0adb 080a     ................
 80a4ca0:	09fd 080a 0b05 080a 0ce3 080a 0ce1 080a     ................
 80a4cb0:	0b07 080a 0b45 080a 0b7f 080a 0bc5 080a     ....E...........
 80a4cc0:	0be1 080a 0c61 080a                         ....a...

080a4cc8 <_ZL4font>:
 80a4cc8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a4cd8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a4ce8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a4cf8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a4d08:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a4d18:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a4d28:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a4d38:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a4d48:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a4d58:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a4d68:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a4d78:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a4d88:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a4d98:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a4da8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a4db8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a4dc8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a4dd8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a4de8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a4df8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a4e08:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a4e18:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a4e28:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a4e38:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a4e48:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a4e58:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a4e68:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a4e78:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a4e88:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a4e98:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a4ea8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a4eb8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a4ec8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a4ed8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a4ee8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a4ef8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a4f08:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a4f18:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a4f28:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a4f38:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a4f48:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a4f58:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a4f68:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a4f78:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a4f88:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a4f98:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a4fa8:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a4fb8:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a4fc8:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a4fd8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a4fe8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a4ff8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a5008:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a5018:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a5028:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a5038:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a5048:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a5058:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a5068:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a5078:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a5088:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a5098:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a50a8:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a50b8:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a50c8:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a50d8:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a50e8:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a50f8:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a5108:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a5118:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a5128:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a5138:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a5148:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a5158:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a5168:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a5178:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a5188:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a5198:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a51a8:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a51b8:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

080a51c8 <_ZTV16OledWingAdafruit>:
	...
 80a51d0:	1385 080a 13a5 080a 1269 080a 28c1 080a     ........i....(..
 80a51e0:	1449 080a 0b05 080a 0abd 080a 0aed 080a     I...............
 80a51f0:	0ac9 080a 0adb 080a 09fd 080a 0b05 080a     ................
 80a5200:	0ce3 080a 15f3 080a 1bbb 080a 1b6d 080a     ............m...
 80a5210:	0b7f 080a 0bc5 080a 0be1 080a 0c61 080a     ............a...

080a5220 <_ZTVN8particle13__SPISettingsE>:
	...
 80a5228:	09a1 080a                                   ....

080a522c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 80a522c:	0100 0703 1f0f 7f3f                         ......?.

080a5234 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
 80a5234:	02da da81                                        ...

080a5237 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
 80a5237:	02da 8f81                                   ....

080a523b <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
 80a523b:	12da ae81                                        ...

080a523e <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 80a523e:	d5ae a880                                   ....

080a5242 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 80a5242:	00d3 8d40                                   ..@.

080a5246 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 80a5246:	0020 c8a1                                    ...

080a524a <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 80a524a:	40db a6a4 af2e                              .@....

080a5250 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 80a5250:	8000 e0c0 f8f0 fefc                         ........

080a5258 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 80a5258:	0022 21ff 0000 0000                         "..!....

080a5260 <_ZTV16Adafruit_SSD1306>:
	...
 80a5268:	141d 080a 1435 080a 1269 080a 28c1 080a     ....5...i....(..
 80a5278:	1449 080a 0b05 080a 0abd 080a 0aed 080a     I...............
 80a5288:	0ac9 080a 0adb 080a 09fd 080a 0b05 080a     ................
 80a5298:	0ce3 080a 15f3 080a 1bbb 080a 1b6d 080a     ............m...
 80a52a8:	0b7f 080a 0bc5 080a 0be1 080a 0c61 080a     ............a...

080a52b8 <_ZL12splash1_data>:
 80a52b8:	0000 0000 0100 0080 0000 0000 0000 0000     ................
 80a52c8:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
 80a52d8:	0000 0000 0000 c007 0000 0000 0000 0000     ................
 80a52e8:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
 80a52f8:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
 80a5308:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
 80a5320:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
 80a5330:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
 80a5340:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
 80a5350:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
 80a5360:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
 80a5370:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
 80a5380:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
 80a5390:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
 80a53a0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
 80a53b0:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
 80a53c0:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
 80a53d0:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
 80a53e0:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
 80a53f0:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
 80a5400:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
 80a5410:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
 80a5420:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
 80a5430:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
 80a5448:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
 80a5460:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
 80a5470:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
 80a5480:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
 80a5490:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
 80a54a0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
 80a54b0:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
 80a54c0:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
 80a54d0:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
 80a54e0:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
 80a54f0:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
 80a5500:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
 80a5510:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
 80a5520:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
 80a5530:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
 80a5540:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
 80a5550:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
 80a5560:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
 80a5570:	fdff 5b6b 6adb c0fd                         ..k[.j..

080a5578 <_ZL12splash2_data>:
 80a5578:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 80a5588:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 80a5598:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 80a55b4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 80a55c4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 80a55d4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 80a55e4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 80a55f4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 80a5604:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 80a5614:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 80a5624:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 80a5634:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 80a5644:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 80a5654:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 80a5664:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 80a5674:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 80a5684:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 80a5694:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 80a56a4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 80a56b4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 80a56c4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 80a56d4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 80a56e4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 80a56f4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 80a570c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 80a571c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 80a572c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 80a573c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 80a574c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

080a5758 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a5758:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 80a5768:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
 80a5778:	006c 5355 5342 7265 6169 316c 7400 7079     l.USBSerial1.typ
 80a5788:	0065 6170 6172 006d 6d63 0064 6469 6800     e.param.cmd.id.h
 80a5798:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
 80a57a8:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
 80a57b8:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
 80a57c8:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
 80a57d8:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
 80a57e8:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 80a57f8:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 80a5808:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
 80a5818:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a5828:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a5838:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a5848:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
 80a5858:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a5868:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a5878:	0000 0000                                   ....

080a587c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a5884:	2d65 080a 2d6b 080a 2daf 080a 2d79 080a     e-..k-...-..y-..
 80a5894:	2d67 080a                                   g-..

080a5898 <_ZTV9IPAddress>:
	...
 80a58a0:	32fd 080a 32ed 080a 32ef 080a               .2...2...2..

080a58ac <_ZTV9USBSerial>:
	...
 80a58b4:	33b9 080a 3409 080a 3417 080a 28c1 080a     .3...4...4...(..
 80a58c4:	33f5 080a 33bb 080a 33d1 080a 3403 080a     .3...3...3...4..
 80a58d4:	33e7 080a 33b5 080a                         .3...3..

080a58dc <_ZTV11USARTSerial>:
	...
 80a58e4:	3655 080a 36a5 080a 36b3 080a 28c1 080a     U6...6...6...(..
 80a58f4:	3669 080a 368b 080a 3677 080a 369f 080a     i6...6..w6...6..
 80a5904:	3657 080a 365b 080a                         W6..[6..

080a590c <_ZTV7TwoWire>:
	...
 80a5914:	378d 080a 37d7 080a 37af 080a 378f 080a     .7...7...7...7..
 80a5924:	37b7 080a 37bf 080a 37c7 080a 37cf 080a     .7...7...7...7..

080a5934 <_ZTVN5spark9WiFiClassE>:
	...
 80a593c:	38d7 080a 38cd 080a 38c3 080a 3841 080a     .8...8...8..A8..
 80a594c:	2b8f 080a 38b7 080a 38ab 080a 38a3 080a     .+...8...8...8..
 80a595c:	3899 080a 388f 080a 384b 080a               .8...8..K8..

080a5968 <_ZTVN5spark12NetworkClassE>:
	...
 80a5970:	38f5 080a 38ff 080a 3909 080a 3913 080a     .8...8...9...9..
 80a5980:	391d 080a 3929 080a 3935 080a 3941 080a     .9..)9..59..A9..
 80a5990:	3949 080a 3953 080a 395d 080a               I9..S9..]9..

080a599c <_ZSt7nothrow>:
 80a599c:	0000 0000                                   ....

080a59a0 <__sf_fake_stdin>:
	...

080a59c0 <__sf_fake_stdout>:
	...

080a59e0 <__sf_fake_stderr>:
	...

080a5a00 <link_const_variable_data_end>:
 80a5a00:	080a0519 	.word	0x080a0519
 80a5a04:	080a09f9 	.word	0x080a09f9
 80a5a08:	080a137f 	.word	0x080a137f
 80a5a0c:	080a1415 	.word	0x080a1415
 80a5a10:	080a1419 	.word	0x080a1419
 80a5a14:	080a1d39 	.word	0x080a1d39
 80a5a18:	080a21cd 	.word	0x080a21cd
 80a5a1c:	080a288d 	.word	0x080a288d
 80a5a20:	080a2ba9 	.word	0x080a2ba9
 80a5a24:	080a2bb9 	.word	0x080a2bb9
 80a5a28:	080a2c11 	.word	0x080a2c11
 80a5a2c:	080a38e1 	.word	0x080a38e1
 80a5a30:	080a39ad 	.word	0x080a39ad
 80a5a34:	080a3b05 	.word	0x080a3b05
 80a5a38:	080a3bfd 	.word	0x080a3bfd
 80a5a3c:	080a3c81 	.word	0x080a3c81
 80a5a40:	080a3d45 	.word	0x080a3d45
 80a5a44:	080a3e09 	.word	0x080a3e09

080a5a48 <link_constructors_end>:
	...
